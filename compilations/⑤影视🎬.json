[{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"毒舌🎬","author":"格格","version":0,"type":"video","url":"https://www.dushe8.app:51111/show/fyAll-----3-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&3&4&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\nvar a='https://www.dushe8.app:51111/';\nvar b='https://vres.miximixi.me/';\nvar 列表 = 'body&&.module-item';\nvar 标题 = '.v-item-title,1&&Text';\nvar 描述 = '.v-item-bottom&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n一级B()","searchFind":"js:require(config.模板);\n\nvar a='https://www.dushe8.app:51111/';\nvar b='https://vres.miximixi.me/';\nvar 列表 = 'body&&.search-result-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n搜索B()","search_url":"https://www.dushe8.app:51111/search?k=**&page=fypage","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.source-swiper&&span';\nvar 选集列表 = 'body&&.episode-list';\nvar 选集标签 = '.episode-list&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://61.147.93.252:15001/vod_pc_static_dsdy/images/favicon.ico?ver=240510"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"可可🎬","author":"格格","version":2,"type":"video","url":"hiker://empty##https://www.keke9.com:51111/show/fyAll-----3-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺&短剧&","class_url":"2&1&3&4&6&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\nvar a = 'https://www.keke9.com:51111';\nvar b = 'https://vres.miximixi.me';\nvar 列表 =\n'body&&.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.v-item-bottom&&Text';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n\n一级B()","searchFind":"js:require(config.模板);\nvar a = 'https://www.keke9.com:51111';\nvar b = 'https://vres.miximixi.me';\nvar 列表 = 'body&&.search-result-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n搜索B()\n搜索B()","search_url":"https://www.keke9.com:51111/search?k=**&page=fypage","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.source-swiper&&span';\nvar 选集列表 = 'body&&.episode-list';\nvar 选集标签 = '.episode-list&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://61.147.93.252:15001/vod_pc_static_kkdy/images/p/logo.png?ver=240510"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"片吧②🎬","author":"格格","version":4,"type":"video","url":"https://www.yingbar.com/class/fyclass--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&3&4&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"l","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.yingbar.com/sou/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } \n            \n});\nvar 线路列表 = 'body&&.stui-vodlist__head';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = '.pull-right1&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://s1.ax1x.com/2022/11/15/zAvjsJ.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"真不卡🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##http://kan8.tv/films/fyAll_fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"http://kan8.tv/search.php?searchword=**;post","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\n\n\nvar 线路列表 = 'body&&.nav-tabs&&a';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://kan8.tv/static/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"独播库🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://u.duboku.io/vodshow/4--------fypage---.html","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\nconst 大类定位 = '.myui-header__menu'\nconst 拼接分类 = 'body&&.myui-screen__list'\nconst 小类定位 = 'body&&a:not(:matches(首|全|留|纪录片))'\n\n动态分类()\n","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/voddetail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } \n            \n});\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://u.duboku.io/template/mytheme/statics/image/20200420/92ef7bc2b.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"片吧🎬","author":"格格","version":1,"type":"video","url":"https://www.pbpb.tv/class/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.pianbus.com/sou/**----------fypage---.html","titleColor":"#004466","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } \n            \n});\nvar 线路列表 = 'body&&.stui-vodlist__head';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = '.pull-right1&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.pianyes.com/favicon.ico"},{"last_chapter_rule":"","pageList":[],"title":"囧囧🎬","author":"","version":1,"type":"video","url":"https://m.80skp.com/show/fyAll--------fypage---.html;get;UTF-8;{User-Agent@Mozilla/5.0 (Windows NT 10.0)}","col_type":"movie_3","class_name":"电影&连续剧&综艺&动漫&轮理","class_url":"1&2&3&4&20","area_name":"动作片&喜剧片&爱情片&科幻片&恐怖片&剧情片&战争片","area_url":"6&7&8&9&10&11&12","sort_name":"","year_name":"国产剧&港台剧&日韩剧&欧美剧","sort_url":"","year_url":"13&14&15&16","find_rule":".stui-vodlist&&li;h4&&Text;a&&data-original;.pic-text&&Text;a&&href","searchFind":".stui-vodlist__media&&li;h3&&Text;a&&href;.pic-text&&Text;.detail--h3&&Text;.lazyload&&data-original","search_url":"https://m.80skp.com/search/-------------.html?wd=**","titleColor":"#004466","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:var d = [];var html=getResCode();\n\n\n//默认播放地址(需修改)\nvar lazy =  `@lazyRule=.js:decodeURIComponent(base64Decode(JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]).url))`;\n\n\n//视频标题的定位\ntry{\nvar des_title = parseDomForHtml(html, 'body&&h1&&Text');//视频标题标签得改\n\n}catch(e){\nvar des_title ='没有正确获取到影片名称哟！';\n}\n\n//剧情简介的定位\ntry{\nvar des_desc = parseDomForHtml(html,'.data,1&&Text');//得改;取data里面第x个p,或者写成.data&&Text是取整个date\n\n}catch(e){\nvar des_desc ='没有正确获取到剧情简介哟！';\n}\n\n//视频封面的定位\ntry{\nvar des_pic =parseDom(html,'.lazyload&&data-original');//视频封面定位得改\n\n}catch(e){\nvar des_desc ='没有正确获取到简介图片路径哟！\\n'+des_desc;\n}\n\n//线路名列表的定位\nvar arts = parseDomForArray(html,'body&&.stui-pannel__head');//线路名列表得改\n\n\n//播放列表的列表的定位\nvar conts = parseDomForArray(html, 'body&&.stui-content__playlist');//播放列表的列表定位得改\n   \nvar lists =[];\nfor (var i in conts) {\n    lists.push(parseDomForArray(conts[i], 'ul&&li'))      //' 列表名改'ul&&li'\n}\n\nvar tabs = [];\nfor (var i in conts) {\n    tabs.push(parseDomForHtml(arts[i], '.title&&Text'))//有可能改Text\n\n}\n\n\n//下面除了获取选集名称例如1,2,3集，有的需要改下\n//有其他不需要修改\n\nd.push({\ntitle:des_title,\ndesc:des_desc,\npic_url:des_pic,\nurl:getUrl(),\ncol_type:'movie_1_vertical_pic'\n});\n\n//加一行空白行\nd.push({col_type:'line_blank'});\nd.push({\n\ttitle: \"““””<b>\"+'<span style=\"color: #CC0066\">'+'~◆~共有'+arts.length+'条线路~◆~'+'</span></b>',\n\tcol_type: 'text_center_1'\n})    \n   \n\n\n//折叠需要用到的\nfunction setLists(tabs, lists, vari) {\n    var title = '';\n    for (var i = 0; i < tabs.length; i++) {\n\n        var url = \"hiker://empty@lazyRule=.js:putVar('\" + vari + i + \"', getVar('\" + vari + i + \"', ' 【已折叠】') == ' 【已展开】' ? ' 【已折叠】': ' 【已展开】');refreshPage();'toast://切换成功！'\";\n\n\n         let flag=getVar(vari + i, ' 【已折叠】') == ' 【已展开】'?'🔻':'🔻';\n        d.push({\ntitle:flag+'播放线路'+(i+1)+'==> '+ parseDomForHtml(tabs[i],\"Text\"),\n            url: url,\n            col_type: 'text_1'\n        })\n          \n        if (getVar(vari + i, ' 【已折叠】') == ' 【已展开】') {\n            var list = lists[i];\n            for (var j in list) {\n\n \n                d.push({\n\n\n                    title: parseDomForHtml(list[j],'a&&Text').replace(/第(\\d+)集/,'$1'),//有的需要改'Text'\n\n\n\n                    url:parseDom(list[j],'a&&href') + lazy,\n                    col_type: list.length >3?'text_4':'text_2'\n                });\n            }\n        }\n    }\n}\n\n// 调用函数\nsetLists(tabs, lists, MY_URL);\n\nsetResult(d);","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"","pages":"[]","proxy":"","icon":"https://cdn.jsdelivr.net/gh/web-players/jiojio/img/favicon.ico"},{"last_chapter_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"叶子🎬","author":"","version":0,"type":"video","url":"https://www.yzyyy.com/yztop/yzfyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"dsj&dy&dm&zy&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text||.pic-tag,1&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist__media||.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.yzyyy.com/yzsoso**/page/fypage.html","titleColor":"#004466","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar lazy = $(\"\").lazyRule(() => {\n    var player = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n    var from = player.from;\n    var jsurl = player.url;\n    if (player.encrypt == '1') {\n        var jsurl = unescape(jsurl);\n    } else if (player.encrypt == '2') {\n        var jsurl = unescape(base64Decode(jsurl));\n    } else {\n        jsurl\n    };\n    //log('\\n' + from + '\\n' + jsurl);\n\n    if (jsurl.match(/youku|mgtv|ixigua|qq\\.com|qiyi|migu|bili|sohu|pptv|le/)) {\n        //log(\"正版\");\n        eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));eval(fetch(config.cj));\n      \n        if (/cat\\.wkfile/.test(jsurl)) {\n            let url = jsurl + \";{Referer@https://fantuan.tv}\";\n            return url\n        } else {\n            return aytmParse(jsurl);\n        }\n    } else if (jsurl.search(/\\.m3u8|\\.mp4/) > -1) {\n        \n        var video = jsurl;\n    } else if (jsurl.match(/fen\\.laodi/)) {\n        let url = 'https://zy.laodi.xyz/bfd873b.php?url=' + jsurl;\n        let html = pdfh(fetch(url, {}), 'body&&script,-1&&Html');\n        let playurl = html.split(\"vurl='\")[1].split(\"'\")[0];\n        return playurl\n    } else if (jsurl.match(/RongXingVR/i)) {\n        let playurl = JSON.parse(fetch(\"http://fast.rongxingvr.top:99/api/?key=sFPQyQSxZKBVfDzfZ9&url=\" + jsurl)).url;\n        return cacheM3u8(playurl);\n     } else if (jsurl.match(/LT/)) {\n\n        eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n        eval(fetch(config.cj));\n        var video = ParseS.maoss(\"https://zy.youhuima.vip/?url=\" + jsurl, false, \"A42EAC0C2B408472\")\n    } else if (jsurl.match(/renrenmi/)) {\n\n        var urll = request(\"https://jiexi.moeamv.com/analysis.php?v=\" + jsurl).match(/urls = \"(.*?)\"/)[1];\n        writeFile('hiker://files/cache/video.m3u8', fetch(urll, {}));\n        return 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/video.m3u8#' + urll;\n    } else {\n\n        eval(request('https://lanmeiguojiang.com/static/js/playerconfig.js'));\n        var jx = MacPlayerConfig.player_list[from].parse;\n        if (jx == '') {\n            var jx = 'https://lanmeiguojiang.com/static/player/index.php?url=';\n        };\n        var play = jx + jsurl + '&next=';\n        showLoading(\"正在嗅探中,请稍后...\");\n        var video = 'x5Rule://' + play + '@' + $.toString(() => {\n            var urls = _getUrls();\n            for (var i in urls) {\n                if (urls[i].match(/\\.mp3|\\.mp4|\\.m3u8/)) {\n                    //fy_bridge_app.log(urls[i])\n                    return urls[i];\n                } else if (urls[i].match(/\\.flv/)) {\n                    //fy_bridge_app.log(urls[i])\n                    return urls[i] + ';{Referer@https://www.bilibili.com/&&User-Agent@Mozilla/5.0}';\n                }\n            }\n        })\n    }\n    return video;\n});\n\nvar 线路列表 = 'body&&.bottom-line';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\nvar 调用断插 = 0;\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"","pages":"[]","proxy":"","icon":"https://www.yzyyy.com/statics/img/favicon.ico"},{"last_chapter_rule":"","pageList":[],"title":"39🎬","author":"格格","version":0,"type":"video","url":"https://39kan.com/vodshow/fyclass/area/fyarea/by/fysort/page/fypage/year/fyyear.html.js:input.replace('area//','/').replace('letter//','/').replace('year/.','.')","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"地区&大陆&香港&台湾&美国&法国&英国&日本&韩国&德国&泰国&印度&意大利&西班牙&加拿大&其他","area_url":"&内地&香港&台湾&美国&法国&英国&日本&韩国&德国&泰国&印度&意大利&西班牙&加拿大&其他","sort_name":"","year_name":"年份&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010&2009&2008&2007&2006&2005&2004&2003&2002&2001&2000","sort_url":"","year_url":"&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010&2009&2008&2007&2006&2005&2004&2003&2002&2001&2000","find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = 'body&&.fed-list-info&&li';\nvar 标题 = '.fed-part-eone&&Text';\nvar 描述 = '.fed-list-pics&&.fed-list-remarks&&Text';\nvar 图片 = '.fed-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = 'body&&.fed-deta-info';\nvar 标题 = '.fed-part-eone&&Text';\nvar 描述 = '.fed-list-pics&&.fed-list-remarks&&Text';\nvar 图片 = '.fed-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://39kan.com/vodsearch/wd/**/page/fypage.html","titleColor":"#004466","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar lazy=   `@lazyRule=iframe&&data-play.js:base64Decode(input.slice(3))`;\n/*\nif(!getVar('jevonsvip$cookie')){\nvar iscookie=``;\n}else{\nvar iscookie=`headers: {\"Cookie\": \"`+getMyVar('jevonsvip$cookie')+`\"}`;\n}\nvar lazy=`@lazyRule=.js:var js = request(input, {`+iscookie+`});var jsUrl = base64Decode(parseDomForHtml(js, 'iframe&&data-play').slice(3));var jx = parseDomForHtml(js, 'iframe&&data-pars');if(jsUrl.match(/renrenmi/)){var urls=request(jx+jsUrl).match(/urls = \"(.*?)\"/)[1];cacheM3u8(urls)}else if(jsUrl.match(/youku|mgtv|ixigua|qq.com|qiyi|migu|bilibili|sohu|pptv|le/)){eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));eval(fetch(config.cj));aytmParse(jsUrl)}else{jsUrl}`;\n*/\nvar 标题 = 'body&&h1&&Text';\nvar 简介 = '.fed-list-remarks&&Text';\nvar 图片 = '.fed-lazy&&data-original';\nvar 线路列表 = 'body&&.fed-drop-tops&&ul&&li';\nvar 选集列表 = 'body&&.fed-drop-btms&&.fed-play-item';\nvar 选集标签 = 'ul:not(.fed-drop-head)&&li';\nvar 线路标签 = 'Text';\nvar 调用断插 = 0;\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"","pages":"[]","proxy":"","icon":"https://39kan.com/template/vfed/asset/img/favicon.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"新叶子🎬","author":"格格","version":1,"type":"video","url":"https://m.6ygo.com/6ytype-fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"动作片&喜剧片&爱情片&科幻片&恐怖片&剧情片&战争片","area_url":"5&6&7&8&9&10&11","sort_name":"","year_name":"国产剧&港台剧&日韩剧&欧美剧","sort_url":"","year_url":"12&13&14&15","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.6ygo.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } \n            \n});\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://m.6ygo.com/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"视觉🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.ikyy.tv/v_show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.ikyy.tv/v_search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\nvar lazy = $('').lazyRule((MY_HOME) => {\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    if (/m3u8|mp4|flv/.test(url))\n        return url\n    eval(request(MY_HOME + '/static/js/playerconfig.js'));\n    var jx = MacPlayerConfig.player_list[html.from].parse;\n    if (jx == '') {\n        jx = MacPlayerConfig.parse\n    }\n    if (jx.startsWith('//'))\n        jx = 'https:' + jx\n    /*\n            eval(getCryptoJS())\n\n            function decrypt(jx, url) {\n                const sortByKey = (key, arr, callback) => {\n                    let f = (a, b) => callback(a[key], b[key]);\n                    return arr.sort(f);\n                }\n                var html = request(jx + url, {\n            headers: {\n                'Referer': MY_URL\n            }\n        })\n    \t\t\tlog(html)\n                eval(html.match(/var config = {[\\s\\S]*?}/)[0]+'}')\n                var _pr = pdfh(html, \"meta[name=\\\"viewport\\\"]&&id\").replace(\"now_\", \"\");\n                var _pu = pdfh(html, \"meta[charset=\\\"UTF-8\\\"]&&id\").replace(\"now_\", \"\");\n                let _puArr = [],\n                    _newArr = [],\n                    _code = '';\n                for (var i = 0; i < _pu.length; i++) {\n                    _puArr.push({\n                        'id': _pu[i],\n                        'text': _pr[i]\n                    });\n                }\n                _newArr = sortByKey(\"id\", _puArr, (a, b) => a - b);\n                for (var i = 0; i < _newArr.length; i++) {\n                    _code += _newArr[i]['text'];\n                }\n                let vkey = CryptoJS.MD5(_code + \"Jeeves\").toString();\n                let key = CryptoJS.enc.Utf8.parse(vkey.substring(16));\n                let iv = CryptoJS.enc.Utf8.parse(vkey.substring(0, 16));\n                let decrypted = CryptoJS.AES.decrypt(config.url, key, {\n                    iv: iv,\n                    mode: CryptoJS.mode.CBC,\n                    padding: CryptoJS.pad.Pkcs7\n                });\n                return decrypted.toString(CryptoJS.enc.Utf8);\n            }\n\n            var play = decrypt(jx, url)\n    */\n    eval(request(jx + url).match(/var config = {[\\s\\S]*?}/)[0]);\n    var play = JSON.parse(post(jx.replace('?url=', 'API.php'), {\n        headers: {\n            \"User-Agent\": MOBILE_UA\n        },\n        body: {\n            url: config.url,\n            time: config.time,\n            key: config.key\n        }\n    })).url;\n    return play\n}, MY_HOME)\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://pic.rmb.bdstatic.com/bjh/98ff947d6f3bc694f697935e1c080932.png"},{"last_chapter_rule":"js:\nrequire(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[{"col_type":"movie_3","name":"drpy2.js","path":"drpy2.js","rule":"const testPath = module.modulePath.slice(0, module.modulePath.lastIndexOf(\"/\")) + \"/\";\r\nconst {\r\n    gbkTool\r\n} = $.require(testPath + 'gbk.js');\r\nconst 模板 = $.require(testPath + \"模板.js\");\r\nconst pako = $.require(testPath + \"pako.min.js\");\r\nconst NODERSA = $.require(testPath + \"node-rsa.js\");\r\nconst JSEncrypt = $.require(testPath + \"jsencrypt.js\");\r\nconst JINJA = $.require(testPath+\"jinja.min.js\");\r\nconst JP = $.require(testPath+\"jsonpathplus.min.js\");\r\nconst cheerio = {\r\n    jinja2(template, obj) {\r\n        return JINJA.render(template, obj);\r\n    },\r\n    jp(path, json) {\r\n        return JP.JSONPath({\r\n            path,\r\n            json\r\n        })[0];\r\n    }\r\n}\r\n// import cheerio from \"https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/cheerio.min.js\";\r\n// import \"https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/crypto-js.js\";\r\n// import 模板 from\"https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/js/模板.js\";\r\n// import {gbkTool} from 'https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/gbk.js'\r\n\r\nfunction init_test() {\r\n    // console.log(typeof(CryptoJS));\r\n    console.log(\"init_test_start\");\r\n    // print(模板);\r\n    // print(typeof(模板.getMubans));\r\n    console.log(\"当前版本号:\" + VERSION);\r\n    console.log('本地代理地址:' + getProxyUrl());\r\n    console.log(RKEY);\r\n    // ocr_demo_test();\r\n    // rsa_demo_test();\r\n\r\n    // console.log('Uint8Array:'+typeof(Uint8Array)+' '+'Uint16Array:'+typeof(Uint16Array));\r\n    // console.log('encodeURIComponent:'+typeof(encodeURIComponent)+' '+'decodeURIComponent:'+typeof(decodeURIComponent));\r\n    // console.log('atob:'+typeof(atob)+' '+'btoa:'+typeof(btoa));\r\n    // log('typeof (JSEncrypt):'+typeof (JSEncrypt));\r\n    // log('typeof (pako):'+typeof (pako));\r\n    // let b64_str = btoa('hello hipy');\r\n    // let str = atob(b64_str);\r\n    // console.log(`btoa加密文本:${b64_str},atob解密文本:${str}`)\r\n    // let gzip_str = gzip('{\"a\":\"电影\",\"b\":\"电影\",\"c\":\"电影\",\"d\":\"电影\",\"e\":\"电影\",\"f\":\"电影\"}');\r\n    // let ungzip_str = ungzip(gzip_str);\r\n    // console.log(`gzip加密文本:${gzip_str},长度:${gzip_str.length},ungzip解密文本:${ungzip_str},长度:${ungzip_str.length}`);\r\n    // let a = {\"1\":[{\"key\":\"类型\",\"name\":\"类型\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"Netflix\",\"v\":\"NETFLIX\"},{\"n\":\"剧情\",\"v\":\"剧情\"},{\"n\":\"喜剧\",\"v\":\"喜剧\"},{\"n\":\"动作\",\"v\":\"动作\"},{\"n\":\"爱情\",\"v\":\"爱情\"},{\"n\":\"恐怖\",\"v\":\"恐怖\"},{\"n\":\"惊悚\",\"v\":\"惊悚\"},{\"n\":\"犯罪\",\"v\":\"犯罪\"},{\"n\":\"科幻\",\"v\":\"科幻\"},{\"n\":\"悬疑\",\"v\":\"悬疑\"},{\"n\":\"奇幻\",\"v\":\"奇幻\"},{\"n\":\"冒险\",\"v\":\"冒险\"},{\"n\":\"战争\",\"v\":\"战争\"},{\"n\":\"历史\",\"v\":\"历史\"},{\"n\":\"古装\",\"v\":\"古装\"},{\"n\":\"家庭\",\"v\":\"家庭\"},{\"n\":\"传记\",\"v\":\"传记\"},{\"n\":\"武侠\",\"v\":\"武侠\"},{\"n\":\"歌舞\",\"v\":\"歌舞\"},{\"n\":\"短片\",\"v\":\"短片\"},{\"n\":\"动画\",\"v\":\"动画\"},{\"n\":\"儿童\",\"v\":\"儿童\"},{\"n\":\"职场\",\"v\":\"职场\"}]},{\"key\":\"地区\",\"name\":\"地区\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"大陆\",\"v\":\"中国大陆\"},{\"n\":\"香港\",\"v\":\"中国香港\"},{\"n\":\"台湾\",\"v\":\"中国台湾\"},{\"n\":\"美国\",\"v\":\"美国\"},{\"n\":\"日本\",\"v\":\"日本\"},{\"n\":\"韩国\",\"v\":\"韩国\"},{\"n\":\"英国\",\"v\":\"英国\"},{\"n\":\"法国\",\"v\":\"法国\"},{\"n\":\"德国\",\"v\":\"德国\"},{\"n\":\"印度\",\"v\":\"印度\"},{\"n\":\"泰国\",\"v\":\"泰国\"},{\"n\":\"丹麦\",\"v\":\"丹麦\"},{\"n\":\"瑞典\",\"v\":\"瑞典\"},{\"n\":\"巴西\",\"v\":\"巴西\"},{\"n\":\"加拿大\",\"v\":\"加拿大\"},{\"n\":\"俄罗斯\",\"v\":\"俄罗斯\"},{\"n\":\"意大利\",\"v\":\"意大利\"},{\"n\":\"比利时\",\"v\":\"比利时\"},{\"n\":\"爱尔兰\",\"v\":\"爱尔兰\"},{\"n\":\"西班牙\",\"v\":\"西班牙\"},{\"n\":\"澳大利亚\",\"v\":\"澳大利亚\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"语言\",\"name\":\"语言\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"国语\",\"v\":\"国语\"},{\"n\":\"粤语\",\"v\":\"粤语\"},{\"n\":\"英语\",\"v\":\"英语\"},{\"n\":\"日语\",\"v\":\"日语\"},{\"n\":\"韩语\",\"v\":\"韩语\"},{\"n\":\"法语\",\"v\":\"法语\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"年份\",\"name\":\"年份\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"2024\",\"v\":\"2024\"},{\"n\":\"2023\",\"v\":\"2023\"},{\"n\":\"2022\",\"v\":\"2022\"},{\"n\":\"2021\",\"v\":\"2021\"},{\"n\":\"2020\",\"v\":\"2020\"},{\"n\":\"10年代\",\"v\":\"2010_2019\"},{\"n\":\"00年代\",\"v\":\"2000_2009\"},{\"n\":\"90年代\",\"v\":\"1990_1999\"},{\"n\":\"80年代\",\"v\":\"1980_1989\"},{\"n\":\"更早\",\"v\":\"0_1979\"}]},{\"key\":\"排序\",\"name\":\"排序\",\"value\":[{\"n\":\"综合\",\"v\":\"\"},{\"n\":\"最新\",\"v\":\"2\"},{\"n\":\"最热\",\"v\":\"3\"},{\"n\":\"评分\",\"v\":\"4\"}]}],\"2\":[{\"key\":\"类型\",\"name\":\"类型\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"Netflix\",\"v\":\"Netflix\"},{\"n\":\"剧情\",\"v\":\"剧情\"},{\"n\":\"爱情\",\"v\":\"爱情\"},{\"n\":\"喜剧\",\"v\":\"喜剧\"},{\"n\":\"犯罪\",\"v\":\"犯罪\"},{\"n\":\"悬疑\",\"v\":\"悬疑\"},{\"n\":\"古装\",\"v\":\"古装\"},{\"n\":\"动作\",\"v\":\"动作\"},{\"n\":\"家庭\",\"v\":\"家庭\"},{\"n\":\"惊悚\",\"v\":\"惊悚\"},{\"n\":\"奇幻\",\"v\":\"奇幻\"},{\"n\":\"美剧\",\"v\":\"美剧\"},{\"n\":\"科幻\",\"v\":\"科幻\"},{\"n\":\"历史\",\"v\":\"历史\"},{\"n\":\"战争\",\"v\":\"战争\"},{\"n\":\"韩剧\",\"v\":\"韩剧\"},{\"n\":\"武侠\",\"v\":\"武侠\"},{\"n\":\"言情\",\"v\":\"言情\"},{\"n\":\"恐怖\",\"v\":\"恐怖\"},{\"n\":\"冒险\",\"v\":\"冒险\"},{\"n\":\"都市\",\"v\":\"都市\"},{\"n\":\"职场\",\"v\":\"职场\"}]},{\"key\":\"地区\",\"name\":\"地区\",\"value\":[{\"n\":\"地区\",\"v\":\"\"},{\"n\":\"大陆\",\"v\":\"中国大陆\"},{\"n\":\"香港\",\"v\":\"中国香港\"},{\"n\":\"韩国\",\"v\":\"韩国\"},{\"n\":\"美国\",\"v\":\"美国\"},{\"n\":\"日本\",\"v\":\"日本\"},{\"n\":\"法国\",\"v\":\"法国\"},{\"n\":\"英国\",\"v\":\"英国\"},{\"n\":\"德国\",\"v\":\"德国\"},{\"n\":\"台湾\",\"v\":\"中国台湾\"},{\"n\":\"泰国\",\"v\":\"泰国\"},{\"n\":\"印度\",\"v\":\"印度\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"语言\",\"name\":\"语言\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"国语\",\"v\":\"国语\"},{\"n\":\"粤语\",\"v\":\"粤语\"},{\"n\":\"英语\",\"v\":\"英语\"},{\"n\":\"日语\",\"v\":\"日语\"},{\"n\":\"韩语\",\"v\":\"韩语\"},{\"n\":\"法语\",\"v\":\"法语\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"年份\",\"name\":\"年份\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"2024\",\"v\":\"2024\"},{\"n\":\"2023\",\"v\":\"2023\"},{\"n\":\"2022\",\"v\":\"2022\"},{\"n\":\"2021\",\"v\":\"2021\"},{\"n\":\"2020\",\"v\":\"2020\"},{\"n\":\"10年代\",\"v\":\"2010_2019\"},{\"n\":\"00年代\",\"v\":\"2000_2009\"},{\"n\":\"90年代\",\"v\":\"1990_1999\"},{\"n\":\"80年代\",\"v\":\"1980_1989\"},{\"n\":\"更早\",\"v\":\"0_1979\"}]},{\"key\":\"排序\",\"name\":\"排序\",\"value\":[{\"n\":\"综合\",\"v\":\"\"},{\"n\":\"最新\",\"v\":\"2\"},{\"n\":\"最热\",\"v\":\"3\"},{\"n\":\"评分\",\"v\":\"4\"}]}],\"3\":[{\"key\":\"类型\",\"name\":\"类型\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"Netflix\",\"v\":\"Netflix\"},{\"n\":\"动态漫画\",\"v\":\"动态漫画\"},{\"n\":\"剧情\",\"v\":\"剧情\"},{\"n\":\"动画\",\"v\":\"动画\"},{\"n\":\"喜剧\",\"v\":\"喜剧\"},{\"n\":\"冒险\",\"v\":\"冒险\"},{\"n\":\"动作\",\"v\":\"动作\"},{\"n\":\"奇幻\",\"v\":\"奇幻\"},{\"n\":\"科幻\",\"v\":\"科幻\"},{\"n\":\"儿童\",\"v\":\"儿童\"},{\"n\":\"搞笑\",\"v\":\"搞笑\"},{\"n\":\"爱情\",\"v\":\"爱情\"},{\"n\":\"家庭\",\"v\":\"家庭\"},{\"n\":\"短片\",\"v\":\"短片\"},{\"n\":\"热血\",\"v\":\"热血\"},{\"n\":\"益智\",\"v\":\"益智\"},{\"n\":\"悬疑\",\"v\":\"悬疑\"},{\"n\":\"经典\",\"v\":\"经典\"},{\"n\":\"校园\",\"v\":\"校园\"},{\"n\":\"Anime\",\"v\":\"Anime\"},{\"n\":\"运动\",\"v\":\"运动\"},{\"n\":\"亲子\",\"v\":\"亲子\"},{\"n\":\"青春\",\"v\":\"青春\"},{\"n\":\"恋爱\",\"v\":\"恋爱\"},{\"n\":\"武侠\",\"v\":\"武侠\"},{\"n\":\"惊悚\",\"v\":\"惊悚\"}]},{\"key\":\"地区\",\"name\":\"地区\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"日本\",\"v\":\"日本\"},{\"n\":\"大陆\",\"v\":\"中国大陆\"},{\"n\":\"台湾\",\"v\":\"中国台湾\"},{\"n\":\"美国\",\"v\":\"美国\"},{\"n\":\"香港\",\"v\":\"中国香港\"},{\"n\":\"韩国\",\"v\":\"韩国\"},{\"n\":\"英国\",\"v\":\"英国\"},{\"n\":\"法国\",\"v\":\"法国\"},{\"n\":\"德国\",\"v\":\"德国\"},{\"n\":\"印度\",\"v\":\"印度\"},{\"n\":\"泰国\",\"v\":\"泰国\"},{\"n\":\"丹麦\",\"v\":\"丹麦\"},{\"n\":\"瑞典\",\"v\":\"瑞典\"},{\"n\":\"巴西\",\"v\":\"巴西\"},{\"n\":\"加拿大\",\"v\":\"加拿大\"},{\"n\":\"俄罗斯\",\"v\":\"俄罗斯\"},{\"n\":\"意大利\",\"v\":\"意大利\"},{\"n\":\"比利时\",\"v\":\"比利时\"},{\"n\":\"爱尔兰\",\"v\":\"爱尔兰\"},{\"n\":\"西班牙\",\"v\":\"西班牙\"},{\"n\":\"澳大利亚\",\"v\":\"澳大利亚\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"语言\",\"name\":\"语言\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"国语\",\"v\":\"国语\"},{\"n\":\"粤语\",\"v\":\"粤语\"},{\"n\":\"英语\",\"v\":\"英语\"},{\"n\":\"日语\",\"v\":\"日语\"},{\"n\":\"韩语\",\"v\":\"韩语\"},{\"n\":\"法语\",\"v\":\"法语\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"年份\",\"name\":\"年份\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"2024\",\"v\":\"2024\"},{\"n\":\"2023\",\"v\":\"2023\"},{\"n\":\"2022\",\"v\":\"2022\"},{\"n\":\"2021\",\"v\":\"2021\"},{\"n\":\"2020\",\"v\":\"2020\"},{\"n\":\"10年代\",\"v\":\"2010_2019\"},{\"n\":\"00年代\",\"v\":\"2000_2009\"},{\"n\":\"90年代\",\"v\":\"1990_1999\"},{\"n\":\"80年代\",\"v\":\"1980_1989\"},{\"n\":\"更早\",\"v\":\"0_1979\"}]},{\"key\":\"排序\",\"name\":\"排序\",\"value\":[{\"n\":\"综合\",\"v\":\"\"},{\"n\":\"最新\",\"v\":\"2\"},{\"n\":\"最热\",\"v\":\"3\"},{\"n\":\"评分\",\"v\":\"4\"}]}],\"4\":[{\"key\":\"类型\",\"name\":\"类型\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"纪录\",\"v\":\"纪录\"},{\"n\":\"真人秀\",\"v\":\"真人秀\"},{\"n\":\"记录\",\"v\":\"记录\"},{\"n\":\"脱口秀\",\"v\":\"脱口秀\"},{\"n\":\"剧情\",\"v\":\"剧情\"},{\"n\":\"历史\",\"v\":\"历史\"},{\"n\":\"喜剧\",\"v\":\"喜剧\"},{\"n\":\"传记\",\"v\":\"传记\"},{\"n\":\"相声\",\"v\":\"相声\"},{\"n\":\"节目\",\"v\":\"节目\"},{\"n\":\"歌舞\",\"v\":\"歌舞\"},{\"n\":\"冒险\",\"v\":\"冒险\"},{\"n\":\"运动\",\"v\":\"运动\"},{\"n\":\"Season\",\"v\":\"Season\"},{\"n\":\"犯罪\",\"v\":\"犯罪\"},{\"n\":\"短片\",\"v\":\"短片\"},{\"n\":\"搞笑\",\"v\":\"搞笑\"},{\"n\":\"晚会\",\"v\":\"晚会\"}]},{\"key\":\"地区\",\"name\":\"地区\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"大陆\",\"v\":\"中国大陆\"},{\"n\":\"香港\",\"v\":\"中国香港\"},{\"n\":\"台湾\",\"v\":\"中国台湾\"},{\"n\":\"美国\",\"v\":\"美国\"},{\"n\":\"日本\",\"v\":\"日本\"},{\"n\":\"韩国\",\"v\":\"韩国\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"语言\",\"name\":\"语言\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"国语\",\"v\":\"国语\"},{\"n\":\"粤语\",\"v\":\"粤语\"},{\"n\":\"英语\",\"v\":\"英语\"},{\"n\":\"日语\",\"v\":\"日语\"},{\"n\":\"韩语\",\"v\":\"韩语\"},{\"n\":\"法语\",\"v\":\"法语\"},{\"n\":\"其他\",\"v\":\"其他\"}]},{\"key\":\"年份\",\"name\":\"年份\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"2024\",\"v\":\"2024\"},{\"n\":\"2023\",\"v\":\"2023\"},{\"n\":\"2022\",\"v\":\"2022\"},{\"n\":\"2021\",\"v\":\"2021\"},{\"n\":\"2020\",\"v\":\"2020\"},{\"n\":\"10年代\",\"v\":\"2010_2019\"},{\"n\":\"00年代\",\"v\":\"2000_2009\"},{\"n\":\"90年代\",\"v\":\"1990_1999\"},{\"n\":\"80年代\",\"v\":\"1980_1989\"},{\"n\":\"更早\",\"v\":\"0_1979\"}]},{\"key\":\"排序\",\"name\":\"排序\",\"value\":[{\"n\":\"综合\",\"v\":\"\"},{\"n\":\"最新\",\"v\":\"2\"},{\"n\":\"最热\",\"v\":\"3\"},{\"n\":\"评分\",\"v\":\"4\"}]}],\"6\":[{\"key\":\"类型\",\"name\":\"类型\",\"value\":[{\"n\":\"类型\",\"v\":\"\"},{\"n\":\"逆袭\",\"v\":\"逆袭\"},{\"n\":\"甜宠\",\"v\":\"甜宠\"},{\"n\":\"虐恋\",\"v\":\"虐恋\"},{\"n\":\"穿越\",\"v\":\"穿越\"},{\"n\":\"重生\",\"v\":\"重生\"},{\"n\":\"剧情\",\"v\":\"剧情\"},{\"n\":\"科幻\",\"v\":\"科幻\"},{\"n\":\"武侠\",\"v\":\"武侠\"},{\"n\":\"爱情\",\"v\":\"爱情\"},{\"n\":\"动作\",\"v\":\"动作\"},{\"n\":\"战争\",\"v\":\"战争\"},{\"n\":\"冒险\",\"v\":\"冒险\"},{\"n\":\"其它\",\"v\":\"其它\"}]},{\"key\":\"排序\",\"name\":\"排序\",\"value\":[{\"n\":\"综合\",\"v\":\"\"},{\"n\":\"最新\",\"v\":\"2\"},{\"n\":\"最热\",\"v\":\"3\"}]}]};\r\n    // log(gzip(JSON.stringify(a)));\r\n\r\n    console.log(JSON.stringify(rule));\r\n    console.log(\"init_test_end\");\r\n\r\n\r\n    // log('typeof (JSEncrypt):'+typeof (JSEncrypt));\r\n    // let publicKey = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwEc7wBMtYKkxvrQNI3+ITBZwAkPkGvsv4TsAHFskKGZWz9eYl3scivhmlEfWHlEkdyb0m82CmB1qAgef+pD4cZu+Cdmm2e9lnExhLwm8cBgpkAen9QRNdjojZgxM0W+JcReH4W6pw+uFXiLRn4AIQkDftWGNLg6wlNS+39Z/RvP9zyATJLZ9AKDdHp62XMxEK1KZvWBuIg+Oa5UzgA9jy+2XyIqwhBtO8tPbUl21t2pvTzHoLUjSkPNm2LurcUk6+jQ2r6aiS2CN1NXIucPJU6mkuIQ821SjvkYPtIdRMntW4y2u4cyiqVEEQwlzWVMHh+/vfrWAQr9fgjDuYYtvPQIDAQAB';\r\n    // let privateKey  = 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDARzvAEy1gqTG+tA0jf4hMFnACQ+Qa+y/hOwAcWyQoZlbP15iXexyK+GaUR9YeUSR3JvSbzYKYHWoCB5/6kPhxm74J2abZ72WcTGEvCbxwGCmQB6f1BE12OiNmDEzRb4lxF4fhbqnD64VeItGfgAhCQN+1YY0uDrCU1L7f1n9G8/3PIBMktn0AoN0enrZczEQrUpm9YG4iD45rlTOAD2PL7ZfIirCEG07y09tSXbW3am9PMegtSNKQ82bYu6txSTr6NDavpqJLYI3U1ci5w8lTqaS4hDzbVKO+Rg+0h1Eye1bjLa7hzKKpUQRDCXNZUweH7+9+tYBCv1+CMO5hi289AgMBAAECggEBAIRbRJUWXmEwdq64kGbELlV6CIZ2p3mvOSlIjO34Cy7IK7AMz9xOgbpj/XDK9miOIJTouu7ZC7GcZdGZ4BUCYBMMS0fKjGFuurpZlXhkslNTPqEHtCUkXhIpOR7RDrwIlErGEOIsZC4aXQcM3tF1t7mroJLh4OY4dHMu82lv5NM4hhFMNvHzXVvrPXeTzw26gddHVG/ke0WUYOcB5j3cPp8xaVp7JV8bdxtGtkqIfBLY/dIczzJu/3F3cBpU2nNwt8uVUF/w/HKlr7j8FqqFHXWh182beU0n5AIdRyRJBrRUAEhdtsUnvJOVBDqzZa+9DJ5395F7V8KRlQptxETdhCECgYEA4x/2HM9fnVIhG6wTbEt1LhGTKYb/igMAHLqquEMfRsB44tobI8gVNwR3qJQY/nKXxcQemQV29PcdqpENCKyXUXGD8SI1UPg15rHFBI8CIqlCXfzJybdHjmzlhaA9I5lofIVh+5MW7WkvHZoRy7NeDMhHUuaiveuqC4OJ8n+dD2kCgYEA2LkmUVef3WkBBwUBRdkyoog3DMwR+/ubb0ncJVYy3ItYVJltQ4HqmrRiJc8xBAoFnG8rbiqDnmTnDR3WbuxU1G2hml09fqId+rQds2UfESswCXHU43A4f77m1XyA6PprBxpozVIcmK69N4rR9jOXflLWo3O+p2ipUbmNpId7+rUCgYBSpcbBJRT+AmzZzPwkZDD32p1ady114zGfQq3s7z/qVw+mPQezNZPCuXVxerK9pKVl6b/Ynwxyh5nb/3xms6c8k7oXfQM5u5ihof63cfKs+jqUSPCE3pTDVw0OWwjkc2Z6KW9GRHgLXEMw2mevYE3RCPArUpHV2nO+TNddzuIwQQKBgQDOZwdnUNygMfEYjlu3+jOPN8u2FGTMZ8SRKPbRWFb4VH27lKPLN2AIFuOivsEf56uQYRAry7GumMq0Y0ZmPg5Mglz2dvaqNBv5OLFQuW3tHAST+iWWtroYb+fISts7B8QG79AAO8OgZksvKrbslBYj6SEiaomZRsR7YQzVNXOOQQKBgQCovElZ50c8ZJ6m9D9fw3Nes7u9vshpyyac5tt4tZ7yfU4l5pWGrIUqCE703qZp4NAqEvlZUCJbj9kkysaj/2MfFb2b9jSvdNB+V/YW9Cwg+5TziYoOcQzN1z2u4p4goTAv0S+pTNSr3qWaTUI4TXUXQajif45Fexv+MrP5AAXQyw=='\r\n    // // let text = '你好';\r\n    // let text = '[{\"vod_name\":\"兔小贝原创儿歌\",\"vod_pic\":\"https://resource-cdn.tuxiaobei.com/video-album/FnQ8ieJHgsbgCKWXNBg4uoOmKgG5.jpg\",\"vod_remarks\":\"共229首\",\"vod_content\":\"\",\"vod_id\":\"/subject/17@@兔小贝原创儿歌@@https://resource-cdn.tuxiaobei.com/video-album/FnQ8ieJHgsbgCKWXNBg4uoOmKgG5.jpg\"},{\"vod_name\":\"英文儿歌\",\"vod_pic\":\"https://resource-cdn.tuxiaobei.com/video-album/Fqjpx2H_-QaYNAYn2MekRuDpeyUv.jpg\",\"vod_remarks\":\"共10首\",\"vod_content\":\"\",\"vod_id\":\"/subject/23@@英文儿歌@@https://resource-cdn.tuxiaobei.com/video-album/Fqjpx2H_-QaYNAYn2MekRuDpeyUv.jpg\"}]';\r\n    // let str = RSA.encode(text, publicKey);\r\n    // console.log(\"加密数据：\" + str);\r\n    // let str1 = 'Wa2c/868VOm0PgpGG2s2aMrDbGOlJRdZXlSGswjFgywd3nZNB7ND8kVMdNB/OsNFoQXJXSJMvPaE73BH7rs8fz54JGdYQK+qTgfQRqQZvomCjbzseSR4bm4NOrtIOOslL3WqxlzOuU0M1P1eERmkLEVU2WSyc3RGtJro3b3MOWYCNdKMoZdncfOHJndkl4wm9V3GGc3uH98hs6OxLvBWgXoW9jZQ3n0vR2FtS2KYrPGuSuKGkxlt9Kw5TD6nri142NOimz05WK55Xe04YUQ1VZd51t0wzJGXolWgfzIQaK2zzhk5Zjlm+IQJxXqEWiJ2+O6TJ+lIttvsDSaUflcDXQ==';\r\n    // let str2 = 'R86mW9DzBw05pxBSh9ECh1stXxINmnudgZBbzU/cz1EcFgrEgdk0Zk4ruAiJZB2fP5c7d3gMmN8+Dv19IfARWSzw85xCEjUhpdcMJ0jn6ZE5H+muadND9LzjeVisojqwYxot3YVdKof7HMhPFN8QR0jfzqhjmnGFTlY1jMXzJK0MSOLNRLDar480CdKNb/cxALC8+xKIlhM9E4B31t8J4rNMUWSCAr49lbZ3jx3PxieBpTQUdDJz96AttR93Pc+c51wrxh0Ch/Mt4Rs09HGMXwIpNV+CxsGwSGRQUlyJo2k3d0WqsVzpz6S8A4VGEMTRLGI3IjEt+eWt7wM3nAXarg==';\r\n    // let str3 = 'D4eOsRqua+jYA5+ZOR9PLI2PExKjKfArQfv9/wGeG50bQSjWypShJPY6RQfO+rghyf0juzHIUSxqH91OxinhCFkONaF2Vod2QVyphyn9eh73dAcEFKIFFKGXoPCjbMWrr3p4d+hgVrHzrFeGqkRq8JFOvG2L5XDxVfWbV8KmUA0DKuz6QwWg7P4kesy+C7BbLALy5W/wfZchD3gnsBvx/pjFoe11VfAify9isLxg9a15jj52xr6lzQ9kge9C2JcV8yq85bFKaUpJWgobzz+BSIv3lVMU6vgcldmOrhkyiETpFGFGGF00DphGCEoK6uAyyNDh7+Jn8P17zf/DW1wV3A==';\r\n    // let uncrypted = RSA.decode(str, privateKey);\r\n    // log('解密数据:'+uncrypted);\r\n    // uncrypted = RSA.decode(str1, privateKey);\r\n    // log('解密数据1:'+uncrypted);\r\n    // uncrypted = RSA.decode(str2, privateKey);\r\n    // log('解密数据2:'+uncrypted);\r\n    // uncrypted = RSA.decode(str3, privateKey);\r\n    // log('解密数据3:'+uncrypted);\r\n\r\n    // log('rsax:'+typeof(rsax));\r\n    // log('rsaX:'+typeof(rsaX));\r\n    // let data = base64Encode('你好');\r\n    // let publicKey = 'dzyyds';\r\n    // console.log(typeof (RSA.encode));\r\n    // let encryptBase64Data = RSA.encode(data,publicKey);\r\n    // log('encryptBase64Data:'+encryptBase64Data);\r\n    // let str = RSA.decode(data,publicKey);\r\n    // log('str:'+str);\r\n}\r\n\r\n/**\r\n * 验证码ocr识别的测试案例\r\n */\r\nfunction ocr_demo_test() {\r\n    // 这张图片为4113的验证码\r\n    let img_base64 = `iVBORw0KGgoAAAANSUhEUgAAAIAAAAAoBAMAAADEX+97AAAAG1BMVEXz+/4thQTa7N6QwIFFkyNeokKozqDB3b93sWHFR+MEAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABN0lEQVRIie2TQU+DQBCFt9vScvQpxR4xrcSjJCZ67JDGXsX+AdR4B3vpsSYm/m2HXaRLmuySepR3Gdidb/btDAjRq5dT96eCMlfBuzi1QLZUoZy2yz5sOvI+9iomaPEZ6nWnEtxqIyiM1RcAy44GNDhBXUjot/VVNweV1ah68FqWRyjKIOqAcyYF6rGcmpYnHzGt3fycNoMw0d3/THFu7hFSJ/8OXO6iTM8/KSg09obAzIHLO250LgQ0txOZSfgrV4Exdw98uGycJ0ErAeExZGhOmFHV9zHO6qVSj0MpLq7xZON56o++MjlsEgfVhbQWWME+xQX7J4V6zfi9A1Ly9rP1BvEXp+BbVJ/M77n+wfOIDVp51pZ4iBxvmj9AGrtvry6emwfKnVkW+ZRKd5ZNMvob36vXP9YPDmQki8QiCFAAAAAASUVORK5CYII=`;\r\n    // 更换api-可以通过这个代码换掉默认的ocr接口\r\n    OcrApi.api = OCR_API;\r\n    let code = OcrApi.classification(img_base64);\r\n    log('测试验证码图片的ocr识别结果为:' + code);\r\n}\r\n\r\n/**\r\n * rsa加解密的全方位测试案例\r\n */\r\nfunction rsa_demo_test() {\r\n    let t1 = new Date().getTime();\r\n    let pkcs1_public = `\r\n-----BEGIN RSA PUBLIC KEY-----\r\nMEgCQQCrI0pQ/ERRpJ3Ou190XJedFq846nDYP52rOtXyDxlFK5D3p6JJu2RwsKwy\r\nlsQ9xY0xYPpRZUZKMEeR7e9gmRNLAgMBAAE=\r\n-----END RSA PUBLIC KEY-----\r\n`.trim();\r\n\r\n    let pkcs1_public_pem = `\r\nMEgCQQCrI0pQ/ERRpJ3Ou190XJedFq846nDYP52rOtXyDxlFK5D3p6JJu2RwsKwy\r\nlsQ9xY0xYPpRZUZKMEeR7e9gmRNLAgMBAAE=\r\n`.trim();\r\n\r\n    let pkcs8_public = `\r\n-----BEGIN PUBLIC KEY-----\r\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKsjSlD8RFGknc67X3Rcl50WrzjqcNg/\r\nnas61fIPGUUrkPenokm7ZHCwrDKWxD3FjTFg+lFlRkowR5Ht72CZE0sCAwEAAQ==\r\n-----END PUBLIC KEY-----`.trim();\r\n\r\n    let pkcs8_public_pem = `\r\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKsjSlD8RFGknc67X3Rcl50WrzjqcNg/\r\nnas61fIPGUUrkPenokm7ZHCwrDKWxD3FjTFg+lFlRkowR5Ht72CZE0sCAwEAAQ==\r\n`.trim();\r\n\r\n    let pkcs1_private = `\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIBOAIBAAJBAKsjSlD8RFGknc67X3Rcl50WrzjqcNg/nas61fIPGUUrkPenokm7\r\nZHCwrDKWxD3FjTFg+lFlRkowR5Ht72CZE0sCAwEAAQI/b6OV1z65UokQaMvSeRXt\r\n0Yv6wiYtduQI9qpq5nzy/ytaqsbBfClNTi/HifKPKxlRouWFkc518EQI8LBxoarJ\r\nAiEA4DaONMplV8PQNa3TKn2F+SDEvLOCjdL0kHKdN90Ti28CIQDDZnTBaHgZwZbA\r\nhS7Bbf5yvwjWMhO6Y7l04/Qm7R+35QIgPuQuqXIoUSD080mp1N5WyRW++atksIF+\r\n5lGv9e6GP/MCICnj8y/rl6Pd7tXDN6zcSeqLrfdNsREKhB3dKOCXgW9JAiAFYtFS\r\nEJNBXVRTK42SNsZ2hJ/9xLwOwnH2epT8Q43s3Q==\r\n-----END RSA PRIVATE KEY-----\r\n`.trim()\r\n\r\n    let pkcs8_private = `\r\n-----BEGIN PRIVATE KEY-----\r\nMIIBUgIBADANBgkqhkiG9w0BAQEFAASCATwwggE4AgEAAkEAqyNKUPxEUaSdzrtf\r\ndFyXnRavOOpw2D+dqzrV8g8ZRSuQ96eiSbtkcLCsMpbEPcWNMWD6UWVGSjBHke3v\r\nYJkTSwIDAQABAj9vo5XXPrlSiRBoy9J5Fe3Ri/rCJi125Aj2qmrmfPL/K1qqxsF8\r\nKU1OL8eJ8o8rGVGi5YWRznXwRAjwsHGhqskCIQDgNo40ymVXw9A1rdMqfYX5IMS8\r\ns4KN0vSQcp033ROLbwIhAMNmdMFoeBnBlsCFLsFt/nK/CNYyE7pjuXTj9CbtH7fl\r\nAiA+5C6pcihRIPTzSanU3lbJFb75q2SwgX7mUa/17oY/8wIgKePzL+uXo93u1cM3\r\nrNxJ6out902xEQqEHd0o4JeBb0kCIAVi0VIQk0FdVFMrjZI2xnaEn/3EvA7CcfZ6\r\nlPxDjezd\r\n-----END PRIVATE KEY-----\r\n`.trim()\r\n\r\n    let data = `\r\nNodeRsa\r\n这是node-rsa 现在修改集成在drpy里使用`.trim();\r\n\r\n    let encryptedWithPublic = NODERSA.encryptRSAWithPublicKey(data, pkcs1_public, {\r\n        // PublicFormat: \"pkcs1-public-pem\",\r\n        outputEncoding: \"base64\",\r\n        options: {environment: \"browser\", encryptionScheme: 'pkcs1_oaep'},\r\n    });\r\n    console.log(\"公钥加密\");\r\n    console.log(encryptedWithPublic);\r\n\r\n\r\n    let decryptedWithPrivate = NODERSA.decryptRSAWithPrivateKey(encryptedWithPublic, pkcs1_private, {\r\n        // PublicFormat: \"pkcs1-private\",\r\n        // outEncoding: \"hex\"\r\n        options: {environment: \"browser\", encryptionScheme: 'pkcs1_oaep'},\r\n    });\r\n    console.log(\"私钥解密\");\r\n    console.log(decryptedWithPrivate);\r\n\r\n\r\n// https://www.btool.cn/rsa-sign\r\n    let pkcs1_sha256_sign = NODERSA.sign(\"1\", pkcs1_private, {\r\n        outputEncoding: \"base64\",\r\n        options: {environment: \"browser\", encryptionScheme: 'pkcs1', signingScheme: \"pkcs1-sha256\"},\r\n    });\r\n    console.log(\"pkcs1_sha256_sign\");\r\n    console.log(pkcs1_sha256_sign);\r\n\r\n    let pkcs1_sha256_sign_verify = NODERSA.verify(\"1\", \"Oulx2QrgeipKYBtqEDqFb2s/+ndk2cGQxO4CkhU7iBM1vyNmmvqubpsmeoUuN3waGrYZLknSEdwBkfv0tUMpFQ==\", pkcs1_private, {\r\n        options: {environment: \"browser\", encryptionScheme: 'pkcs1', signingScheme: \"pkcs1-sha256\"},\r\n    });\r\n    console.log(\"pkcs1_sha256_sign_verify\");\r\n    console.log(pkcs1_sha256_sign_verify);\r\n\r\n    let pkcs1_oaep_sha256 = NODERSA.encryptRSAWithPublicKey(data, `-----BEGIN RSA PUBLIC KEY-----\r\nMIIBCgKCAQEA5KOq1gRNyllLNWKQy8sGpZE3Q1ULLSmzZw+eaAhj9lvqn7IsT1du\r\nSYn08FfoOA2qMwtz+1O2l1mgzNoSVCyVpVabnTG+C9XKeZXAnJHd8aYA7l7Sxhdm\r\nkte+iymYZ0ZBPzijo8938iugtVvqi9UgDmnY3u/NlQDqiL5BGqSxSTd/Sgmy3zD8\r\nPYzEa3wD9vehQ5fZZ45vKIq8GNVh2Z8+IGO85FF1OsN7+b2yGJa/FmDDNn0+HP+m\r\nPfI+kYBqEVpo0Ztbc3UdxgFwGC8O1n8AQyriwHnSOtIiuBH62J/7qyC/3LEAApRb\r\nDd9YszqzmODjQUddZKHmvc638VW+azc0EwIDAQAB\r\n-----END RSA PUBLIC KEY-----\r\n`, {\r\n        outputEncoding: \"base64\",\r\n        options: {\r\n            environment: \"browser\", encryptionScheme: {\r\n                scheme: \"pkcs1_oaep\",\r\n                hash: \"sha256\",\r\n            },\r\n        }\r\n        // options: { environment: \"browser\", encryptionScheme: 'pkcs1' },\r\n    });\r\n    console.log(\"pkcs1_oaep_sha256\");\r\n    console.log(pkcs1_oaep_sha256);\r\n\r\n    decryptedWithPrivate = NODERSA.decryptRSAWithPrivateKey(\"kSZesAAyYh2hdsQnYMdGqb6gKAzTauBKouvBzWcc4+F8RvGd0nwO6mVkUMVilPgUuNxjEauHayHiY8gI3Py45UI3+km0rSGyHrS6dHiHgCkMejXHieglYzAB0IxX3Jkm4z/66bdB/D+GFy0oct5fGCMI1UHPjEAYOsazJDa8lBFNbjiWFeb/qiZtIx3vGM7KYPAZzyRf/zPbbQ8zy9xOmRuOl5nnIxgo0Okp3KO/RIPO4GZOSBA8f2lx1UtNwwrXAMpcNavtoqHVcjJ/9lcotXYQFrn5b299pSIRf2gVm8ZJ31SK6Z8cc14nKtvgnmsgClDzIXJ1o1RcDK+knVAySg==\", `-----BEGIN RSA PRIVATE KEY-----\r\nMIIEpAIBAAKCAQEA5KOq1gRNyllLNWKQy8sGpZE3Q1ULLSmzZw+eaAhj9lvqn7Is\r\nT1duSYn08FfoOA2qMwtz+1O2l1mgzNoSVCyVpVabnTG+C9XKeZXAnJHd8aYA7l7S\r\nxhdmkte+iymYZ0ZBPzijo8938iugtVvqi9UgDmnY3u/NlQDqiL5BGqSxSTd/Sgmy\r\n3zD8PYzEa3wD9vehQ5fZZ45vKIq8GNVh2Z8+IGO85FF1OsN7+b2yGJa/FmDDNn0+\r\nHP+mPfI+kYBqEVpo0Ztbc3UdxgFwGC8O1n8AQyriwHnSOtIiuBH62J/7qyC/3LEA\r\nApRbDd9YszqzmODjQUddZKHmvc638VW+azc0EwIDAQABAoIBADZ/QGgUzInvsLp/\r\nzO2WbfYm39o/uhNAvk9RbLt1TIZbMFhyOpeKynHi3Swwd9xsfWX/U9zS/lGi/m31\r\niKrhmaW4OA1G3vqpMcK7TBbFufYwUEaA+ZJX344euH8pIfdzyneMQ4z3Far2dS7l\r\nQsmjuilVV2kEFadveXewiYoVOWCu00w6bN8wy2SIHlQn+kIL6HQhWz12iKKflIKu\r\neGRdzLHsKmBt6WbY1Wuhx7HU0fAKdlBDPxCHNlI+kybUYE9o5C2vJiaVM5wqJBgZ\r\n8Dz8kt1QbLJ910JoLXkLVQ8uC8NJKQwFtqQjTGPnEq0+wbgz6Ij599rKZkwW/xq9\r\nl6KoUiECgYEA6Ah42tVdkNW047f03xVYXFH96RgorHRS36mR8Y+ONUq1fwKidovC\r\nWjwVujt4OPf3l1W6iyn/F6cu/bsmvPrSc3HTN0B1V31QK4OjgetxQ2PSbTldH02J\r\nNPzkt+v+cPxXpx/P5mgt7Weefw5txU547KubGrHUV5rBKFtIx9pj16MCgYEA/EF0\r\no19+D24DZAPwlDS5VbEd7FStnwY4oQ5PqbuNOSbSJLMWU0AqzXcRokp8UTyCZ0X3\r\nATkS1REq97kShCuR+npTR6a6DlY7sdpPI1SMLNajgB2tkx0EOzX+PfNIbHUd4jpJ\r\nI0ZMAHv/OOtkzQHDaeTWBTrzsWm6/nTiykfduNECgYEA46AMD4HpPECqKAs66e5i\r\ntI6q7JSKskObWVdcmQEfnSAhVOwcvPb2Ptda6UuV8S0xcwDi88rLOUUFUFzc79+P\r\nvTkY38cYVi/VChsluDpk7ptqv0PbGu5Rf+3n4pZdEjI7OvR2W64wAAn67uIUxc7p\r\nyiO/ET0K9rYWb6S9jXGtKMkCgYEA2kPAqoO7zZoBMQ7/oR0lp/HC1HRIbiqx4RlC\r\n8Lgpb+QZPEwA6zPAVVvLVENi4d+bbcRp/xLlKpraNNJcJSSWAMbLPFoU7sbKjA87\r\nHnTPfRSTEA2d3Ibk3F7Rh8TzS3Ti0JZiJjVzGZAwu41iAMifzwaD8K6boUy80eNN\r\nQH2CaaECgYBUsLYvC/MiYg3w+LGOONuQongoVUXjGqnw2bjVa9RK7lwRdXPUqJ51\r\nMpVO98IkoLvGSI/0sGNP3GKNhC+eMGjJAVwFyEuOn+JsmMv9Y9uStIVi5tIHIhKw\r\nm7mp8il0kaftHdSxTbspG3tZ2fjIiFIZkLEOmRpd7ogWumgOajzUdA==\r\n-----END RSA PRIVATE KEY-----`, {\r\n        // PublicFormat: \"pkcs1-private\",\r\n        // outEncoding: \"hex\"\r\n        options: {environment: \"browser\", encryptionScheme: 'pkcs1_oaep'},\r\n    });\r\n    console.log('decryptedWithPrivate');\r\n    console.log(decryptedWithPrivate);\r\n\r\n\r\n    (() => {\r\n        let key = new NODERSA.NodeRSA({b: 1024});\r\n        key.setOptions({encryptionScheme: 'pkcs1'})\r\n        let text = `你好drpy node-ras`;\r\n        let encrypted = key.encrypt(text, 'base64');\r\n        console.log('encrypted: ', encrypted);\r\n        const decrypted = key.decrypt(encrypted, 'utf8');\r\n        console.log('decrypted: ', decrypted);\r\n    })();\r\n    let t2 = new Date().getTime();\r\n    console.log('rsa_demo_test 测试耗时:' + (t2 - t1) + '毫秒');\r\n}\r\n\r\n\r\n/**\r\n * 执行预处理代码\r\n */\r\nfunction pre() {\r\n    if (typeof (rule.预处理) === 'string' && rule.预处理 && rule.预处理.trim()) {\r\n        let code = rule.预处理.trim();\r\n        console.log(\"执行预处理代码:\" + code);\r\n        if (code.startsWith('js:')) {\r\n            code = code.replace('js:', '');\r\n        }\r\n        try {\r\n            // code里可以进行get 或者 post请求cookie并改变rule.headers 里的cookie\r\n            //  直接操作 rule_fetch_params 这个变量 .headers.Cookie\r\n            eval(code);\r\n        } catch (e) {\r\n            console.log('预处理执行失败:' + e.message);\r\n        }\r\n    }\r\n}\r\n\r\nlet rule = {};\r\nlet vercode = typeof (pdfl) === 'function' ? 'drpy2.1' : 'drpy2';\r\nconst VERSION = vercode + ' 3.9.50beta29 20240613';\r\n/** 已知问题记录\r\n * 1.影魔的jinjia2引擎不支持 {{fl}}对象直接渲染 (有能力解决的话尽量解决下，支持对象直接渲染字符串转义,如果加了|safe就不转义)[影魔牛逼，最新的文件发现这问题已经解决了]\r\n * Array.prototype.append = Array.prototype.push; 这种js执行后有毛病,for in 循环列表会把属性给打印出来 (这个大毛病需要重点排除一下)\r\n * 2.import es6py.js但是里面的函数没有被装载进来.比如drpy规则报错setResult2 is undefiend(合并文件了可以不管了)\r\n * 3.无法重复导入cheerio(怎么解决drpy和parseTag里都需要导入cheerio的问题) 无法在副文件导入cheerio (现在是全部放在drpy一个文件里了,凑合解决?)\r\n * 4.有个错误不知道哪儿来的 executeScript: com.quickjs.JSObject$Undefined cannot be cast to java.lang.String 在 点击选集播放打印init_test_end后面打印(貌似不影响使用)\r\n * 5.需要实现 stringify 函数,比起JSON.strifngify函数,它会原封不动保留中文不会编码unicode\r\n * 6.base64Encode,base64Decode,md5函数还没有实现 (抄影魔代码实现了)\r\n * 7.eval(getCryptoJS());还没有实现 (可以空实现了,以后遇到能忽略)\r\n * done:  jsp:{pdfa,pdfh,pd},json:{pdfa,pdfh,pd},jq:{pdfa,pdfh,pd}\r\n * 8.req函数不支持传递字符串的data参数 {'content-type':'text/plain'} 类型数据，因此无法直接调用alist的ocr接口\r\n *  * 电脑看日志调试\r\n adb tcpip 5555\r\n adb connect 192.168.10.192\r\n adb devices -l\r\n adb logcat -c\r\n adb logcat | grep -i QuickJS\r\n adb logcat -c -b events\r\n adb logcat -c -b main -b events -b radio -b system\r\n adb logcat > 2.log DRPY:E | grep -i QuickJS\r\n * **/\r\n\r\n\r\n/*** 以下是内置变量和解析方法 **/\r\nconst MOBILE_UA = 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.91 Mobile Safari/537.36';\r\nconst PC_UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36';\r\nconst UA = 'Mozilla/5.0';\r\nconst UC_UA = 'Mozilla/5.0 (Linux; U; Android 9; zh-CN; MI 9 Build/PKQ1.181121.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.5.5.1035 Mobile Safari/537.36';\r\nconst IOS_UA = 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1';\r\nconst RULE_CK = 'cookie'; // 源cookie的key值\r\n// const KEY = typeof(key)!=='undefined'&&key?key:'drpy_' + (rule.title || rule.host); // 源的唯一标识\r\nconst CATE_EXCLUDE = '首页|留言|APP|下载|资讯|新闻|动态';\r\nconst TAB_EXCLUDE = '猜你|喜欢|下载|剧情|榜|评论';\r\nconst OCR_RETRY = 3;//ocr验证重试次数\r\n// const OCR_API = 'http://drpy.nokia.press:8028/ocr/drpy/text';//ocr在线识别接口\r\nconst OCR_API = 'https://api.nn.ci/ocr/b64/text';//ocr在线识别接口\r\nif (typeof (MY_URL) === 'undefined') {\r\n    var MY_URL; // 全局注入变量,pd函数需要\r\n}\r\nvar HOST;\r\nvar RKEY; // 源的唯一标识\r\nvar fetch;\r\nvar print;\r\nvar log;\r\nvar rule_fetch_params;\r\nvar fetch_params; // 每个位置单独的\r\nvar oheaders;\r\n// var play_url; // 二级详情页注入变量,为了适配js模式0 (不在这里定义了,直接二级里定义了个空字符串)\r\nvar _pdfh;\r\nvar _pdfa;\r\nvar _pd;\r\n// const DOM_CHECK_ATTR = ['url', 'src', 'href', 'data-original', 'data-src'];\r\nconst DOM_CHECK_ATTR = /(url|src|href|-original|-src|-play|-url|style)$/;\r\n// 过滤特殊链接,不走urlJoin\r\nconst SPECIAL_URL = /^(ftp|magnet|thunder|ws):/;\r\nconst NOADD_INDEX = /:eq|:lt|:gt|:first|:last|^body$|^#/;  // 不自动加eq下标索引\r\nconst URLJOIN_ATTR = /(url|src|href|-original|-src|-play|-url|style)$|^(data-|url-|src-)/;  // 需要自动urljoin的属性\r\nconst SELECT_REGEX = /:eq|:lt|:gt|#/g;\r\nconst SELECT_REGEX_A = /:eq|:lt|:gt/g;\r\n\r\n// 增加$js工具，支持$js.toString(()=>{});\r\nconst $js = {\r\n    toString(func) {\r\n        let strfun = func.toString();\r\n        return strfun.replace(/^\\(\\)(\\s+)?=>(\\s+)?\\{/, \"js:\").replace(/\\}$/, '');\r\n    }\r\n};\r\n\r\nfunction window_b64() {\r\n    let b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    let base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\r\n\r\n    function btoa(str) {\r\n        var out, i, len;\r\n        var c1, c2, c3;\r\n        len = str.length;\r\n        i = 0;\r\n        out = \"\";\r\n        while (i < len) {\r\n            c1 = str.charCodeAt(i++) & 0xff;\r\n            if (i == len) {\r\n                out += b64map.charAt(c1 >> 2);\r\n                out += b64map.charAt((c1 & 0x3) << 4);\r\n                out += \"==\";\r\n                break;\r\n            }\r\n            c2 = str.charCodeAt(i++);\r\n            if (i == len) {\r\n                out += b64map.charAt(c1 >> 2);\r\n                out += b64map.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\r\n                out += b64map.charAt((c2 & 0xF) << 2);\r\n                out += \"=\";\r\n                break;\r\n            }\r\n            c3 = str.charCodeAt(i++);\r\n            out += b64map.charAt(c1 >> 2);\r\n            out += b64map.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\r\n            out += b64map.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));\r\n            out += b64map.charAt(c3 & 0x3F);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function atob(str) {\r\n        var c1, c2, c3, c4;\r\n        var i, len, out;\r\n        len = str.length;\r\n        i = 0;\r\n        out = \"\";\r\n        while (i < len) {\r\n            do {\r\n                c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\r\n            } while (i < len && c1 == -1);\r\n            if (c1 == -1) break;\r\n            do {\r\n                c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\r\n            } while (i < len && c2 == -1);\r\n            if (c2 == -1) break;\r\n            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\r\n            do {\r\n                c3 = str.charCodeAt(i++) & 0xff;\r\n                if (c3 == 61) return out;\r\n                c3 = base64DecodeChars[c3];\r\n            } while (i < len && c3 == -1);\r\n            if (c3 == -1) break;\r\n            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\r\n            do {\r\n                c4 = str.charCodeAt(i++) & 0xff;\r\n                if (c4 == 61) return out;\r\n                c4 = base64DecodeChars[c4];\r\n            } while (i < len && c4 == -1);\r\n            if (c4 == -1) break;\r\n            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    return {\r\n        atob,\r\n        btoa\r\n    }\r\n}\r\n\r\n/**\r\n es6py扩展\r\n */\r\nif (typeof atob != 'function' || typeof btoa != 'function') {\r\n    var {atob, btoa} = window_b64();\r\n}\r\n\r\nif (typeof Object.assign != 'function') {\r\n    Object.assign = function () {\r\n        let target = arguments[0];\r\n        for (let i = 1; i < arguments.length; i++) {\r\n            let source = arguments[i];\r\n            for (let key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n}\r\nif (!String.prototype.includes) {\r\n    String.prototype.includes = function (search, start) {\r\n        if (typeof start !== 'number') {\r\n            start = 0;\r\n        }\r\n\r\n        if (start + search.length > this.length) {\r\n            return false;\r\n        } else {\r\n            return this.indexOf(search, start) !== -1;\r\n        }\r\n    };\r\n}\r\n\r\nif (!Array.prototype.includes) {\r\n    Object.defineProperty(Array.prototype, 'includes', {\r\n        value: function (searchElement, fromIndex) {\r\n\r\n            if (this == null) {//this是空或者未定义，抛出错误\r\n                throw new TypeError('\"this\" is null or not defined');\r\n            }\r\n\r\n            var o = Object(this);//将this转变成对象\r\n            var len = o.length >>> 0;//无符号右移0位，获取对象length属性，如果未定义就会变成0\r\n\r\n            if (len === 0) {//length为0直接返回false未找到目标值\r\n                return false;\r\n            }\r\n\r\n            var n = fromIndex | 0;//查找起始索引\r\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);//计算正确起始索引，因为有可能是负值\r\n\r\n            while (k < len) {//从起始索引处开始循环\r\n                if (o[k] === searchElement) {//如果某一位置与寻找目标相等，返回true，找到了\r\n                    return true;\r\n                }\r\n                k++;\r\n            }\r\n            return false;//未找到，返回false\r\n        },\r\n        enumerable: false\r\n    });\r\n}\r\nif (typeof String.prototype.startsWith != 'function') {\r\n    String.prototype.startsWith = function (prefix) {\r\n        return this.slice(0, prefix.length) === prefix;\r\n    };\r\n}\r\nif (typeof String.prototype.endsWith != 'function') {\r\n    String.prototype.endsWith = function (suffix) {\r\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\r\n    };\r\n}\r\nObject.defineProperty(Object.prototype, 'myValues', {\r\n    value: function (obj) {\r\n        if (obj == null) {\r\n            throw new TypeError(\"Cannot convert undefined or null to object\");\r\n        }\r\n        var res = []\r\n        for (var k in obj) {\r\n            if (obj.hasOwnProperty(k)) {//需判断是否是本身的属性\r\n                res.push(obj[k]);\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n    enumerable: false\r\n});\r\nif (typeof Object.prototype.values != 'function') {\r\n    Object.defineProperty(Object.prototype, 'values', {\r\n        value: function (obj) {\r\n            if (obj == null) {\r\n                throw new TypeError(\"Cannot convert undefined or null to object\");\r\n            }\r\n            var res = []\r\n            for (var k in obj) {\r\n                if (obj.hasOwnProperty(k)) {//需判断是否是本身的属性\r\n                    res.push(obj[k]);\r\n                }\r\n            }\r\n            return res;\r\n        },\r\n        enumerable: false\r\n    });\r\n}\r\nif (typeof Array.prototype.join != 'function') {\r\n    Object.defineProperty(Array.prototype, 'join', {\r\n        value: function (emoji) {\r\n            // emoji = emoji||',';\r\n            emoji = emoji || '';\r\n            let self = this;\r\n            let str = \"\";\r\n            let i = 0;\r\n            if (!Array.isArray(self)) {\r\n                throw String(self) + 'is not Array'\r\n            }\r\n            if (self.length === 0) {\r\n                return ''\r\n            }\r\n            if (self.length === 1) {\r\n                return String(self[0])\r\n            }\r\n            i = 1;\r\n            str = this[0];\r\n            for (; i < self.length; i++) {\r\n                str += String(emoji) + String(self[i]);\r\n            }\r\n            return str;\r\n        },\r\n        enumerable: false\r\n    });\r\n}\r\nif (typeof Array.prototype.toReversed != 'function') {\r\n    Object.defineProperty(Array.prototype, 'toReversed', {\r\n        value: function () {\r\n            const clonedList = this.slice();\r\n            // 倒序新数组\r\n            const reversedList = clonedList.reverse();\r\n            return reversedList;\r\n        },\r\n        enumerable: false\r\n    });\r\n}\r\n\r\nObject.defineProperty(Array.prototype, 'append', {\r\n    value: Array.prototype.push,\r\n    enumerable: false\r\n});\r\nObject.defineProperty(String.prototype, 'strip', {\r\n    value: String.prototype.trim,\r\n    enumerable: false\r\n});\r\nObject.defineProperty(String.prototype, 'rstrip', {\r\n    value: function (chars) {\r\n        let regex = new RegExp(chars + \"$\");\r\n        return this.replace(regex, \"\");\r\n    },\r\n    enumerable: false\r\n});\r\n\r\nfunction 是否正版(vipUrl) {\r\n    let flag = new RegExp('qq\\.com|iqiyi\\.com|youku\\.com|mgtv\\.com|bilibili\\.com|sohu\\.com|ixigua\\.com|pptv\\.com|miguvideo\\.com|le\\.com|1905\\.com|fun\\.tv');\r\n    return flag.test(vipUrl);\r\n}\r\n\r\nfunction urlDeal(vipUrl) {\r\n    if (!vipUrl) {\r\n        return ''\r\n    }\r\n    if (!是否正版(vipUrl)) {\r\n        return vipUrl\r\n    }\r\n    if (!/miguvideo/.test(vipUrl)) {\r\n        vipUrl = vipUrl.split('#')[0].split('?')[0];\r\n    }\r\n    return vipUrl\r\n}\r\n\r\nfunction setResult(d) {\r\n    if (!Array.isArray(d)) {\r\n        return []\r\n    }\r\n    VODS = [];\r\n    // print(d);\r\n    d.forEach(function (it) {\r\n        let obj = {\r\n            vod_id: it.url || '',\r\n            vod_name: it.title || '',\r\n            vod_remarks: it.desc || '',\r\n            vod_content: it.content || '',\r\n            vod_pic: it.pic_url || it.img || '',\r\n        };\r\n        let keys = Object.keys(it);\r\n        if (keys.includes('tname')) {\r\n            obj.type_name = it.tname || '';\r\n        }\r\n        if (keys.includes('tid')) {\r\n            obj.type_id = it.tid || '';\r\n        }\r\n        if (keys.includes('year')) {\r\n            obj.vod_year = it.year || '';\r\n        }\r\n        if (keys.includes('actor')) {\r\n            obj.vod_actor = it.actor || '';\r\n        }\r\n        if (keys.includes('director')) {\r\n            obj.vod_director = it.director || '';\r\n        }\r\n        if (keys.includes('area')) {\r\n            obj.vod_area = it.area || '';\r\n        }\r\n        VODS.push(obj);\r\n    });\r\n    return VODS\r\n}\r\n\r\nfunction setResult2(res) {\r\n    VODS = res.list || [];\r\n    return VODS\r\n}\r\n\r\nfunction setHomeResult(res) {\r\n    if (!res || typeof (res) !== 'object') {\r\n        return []\r\n    }\r\n    return setResult(res.list);\r\n}\r\n\r\n// 猫了个咪\r\nfunction rc(js) {\r\n    if (js === 'maomi_aes.js') {\r\n        var a = CryptoJS.enc.Utf8.parse(\"625222f9149e961d\");\r\n        var t = CryptoJS.enc.Utf8.parse(\"5efdtf6060e2o330\");\r\n        return {\r\n            De: function (word) {\r\n                word = CryptoJS.enc.Hex.parse(word)\r\n                return CryptoJS.AES.decrypt(CryptoJS.enc.Base64.stringify(word), a, {\r\n                    iv: t,\r\n                    mode: CryptoJS.mode.CBC,\r\n                    padding: CryptoJS.pad.Pkcs7\r\n                }).toString(CryptoJS.enc.Utf8)\r\n            },\r\n            En: function (word) {\r\n                // print(a);\r\n                // print(word);\r\n                var Encrypted = CryptoJS.AES.encrypt(word, a, {\r\n                    iv: t,\r\n                    mode: CryptoJS.mode.CBC,\r\n                    padding: CryptoJS.pad.Pkcs7\r\n                });\r\n                return Encrypted.ciphertext.toString();\r\n            }\r\n        };\r\n    }\r\n    return {};\r\n}\r\n\r\n// 千万不要用for in 推荐 forEach (for in 会打乱顺序)\r\n//猫函数\r\nfunction maoss(jxurl, ref, key) {\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    eval(getCryptoJS());\r\n    try {\r\n        var getVideoInfo = function (text) {\r\n            return CryptoJS.AES.decrypt(text, key, {iv: iv, padding: CryptoJS.pad.Pkcs7}).toString(CryptoJS.enc.Utf8);\r\n        };\r\n        var token_key = key == undefined ? 'dvyYRQlnPRCMdQSe' : key;\r\n        if (ref) {\r\n            var html = request(jxurl, {\r\n                headers: {\r\n                    'Referer': ref\r\n                }\r\n            });\r\n        } else {\r\n            var html = request(jxurl);\r\n        }\r\n        // print(html);\r\n        if (html.indexOf('&btwaf=') != -1) {\r\n            html = request(jxurl + '&btwaf' + html.match(/&btwaf(.*?)\"/)[1], {\r\n                headers: {\r\n                    'Referer': ref\r\n                }\r\n            })\r\n        }\r\n        var token_iv = html.split('_token = \"')[1].split('\"')[0];\r\n        var key = CryptoJS.enc.Utf8.parse(token_key);\r\n        var iv = CryptoJS.enc.Utf8.parse(token_iv);\r\n        // log(\"iv:\"+iv);\r\n        //  log(html);\r\n        // print(key);\r\n        // print(iv);\r\n        eval(html.match(/var config = {[\\s\\S]*?}/)[0] + '');\r\n        // config.url = config.url.replace(/,/g,'');\r\n        // print(config.url);\r\n        if (!config.url.startsWith('http')) {\r\n            //config.url = decodeURIComponent(AES(config.url, key, iv));\r\n            config.url = CryptoJS.AES.decrypt(config.url, key, {\r\n                iv: iv,\r\n                padding: CryptoJS.pad.Pkcs7\r\n            }).toString(CryptoJS.enc.Utf8)\r\n        }\r\n        return config.url;\r\n    } catch (e) {\r\n        return '';\r\n    }\r\n}\r\n\r\n/**\r\n * 将base64编码进行url编译\r\n * @param str\r\n * @returns {string}\r\n */\r\nfunction urlencode(str) {\r\n    str = (str + '').toString();\r\n    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\r\n}\r\n\r\n/**\r\n * url编码,同 encodeURI\r\n * @param str\r\n * @returns {string}\r\n */\r\nfunction encodeUrl(str) {\r\n    if (typeof (encodeURI) == 'function') {\r\n        return encodeURI(str)\r\n    } else {\r\n        str = (str + '').toString();\r\n        return encodeURIComponent(str).replace(/%2F/g, '/').replace(/%3F/g, '?').replace(/%3A/g, ':').replace(/%40/g, '@').replace(/%3D/g, '=').replace(/%3A/g, ':').replace(/%2C/g, ',').replace(/%2B/g, '+').replace(/%24/g, '$');\r\n    }\r\n}\r\n\r\nfunction base64Encode(text) {\r\n    return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(text));\r\n    // return text\r\n}\r\n\r\nfunction base64Decode(text) {\r\n    return CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(text));\r\n    // return text\r\n}\r\n\r\nfunction md5(text) {\r\n    return CryptoJS.MD5(text).toString();\r\n}\r\n\r\nfunction uint8ArrayToBase64(uint8Array) {\r\n    let binaryString = String.fromCharCode.apply(null, Array.from(uint8Array));\r\n    return btoa(binaryString);\r\n}\r\n\r\nfunction Utf8ArrayToStr(array) {\r\n    var out, i, len, c;\r\n    var char2, char3;\r\n    out = \"\";\r\n    len = array.length;\r\n    i = 0;\r\n    while (i < len) {\r\n        c = array[i++];\r\n        switch (c >> 4) {\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n            case 7:\r\n                out += String.fromCharCode(c);\r\n                break;\r\n            case 12:\r\n            case 13:\r\n                char2 = array[i++];\r\n                out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));\r\n                break;\r\n            case 14:\r\n                char2 = array[i++];\r\n                char3 = array[i++];\r\n                out += String.fromCharCode(\r\n                    ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\r\n                );\r\n                break;\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\n/**\r\n * gzip压缩base64|压缩率80%+\r\n * @param str\r\n * @returns {string}\r\n */\r\nfunction gzip(str) {\r\n    let arr = pako.gzip(str, {\r\n        to: 'string'\r\n    });\r\n    return uint8ArrayToBase64(arr)\r\n}\r\n\r\n/**\r\n * gzip解压base64数据\r\n * @param b64Data\r\n * @returns {string}\r\n */\r\nfunction ungzip(b64Data) {\r\n    let strData = atob(b64Data);\r\n    const charData = strData.split('').map(function (x) {\r\n        return x.charCodeAt(0);\r\n    });\r\n    const binData = new Uint8Array(charData);\r\n    const data = pako.inflate(binData);\r\n    return Utf8ArrayToStr(data);\r\n}\r\n\r\n/**\r\n * 字符串按指定编码\r\n * @param input\r\n * @param encoding\r\n * @returns {*}\r\n */\r\nfunction encodeStr(input, encoding) {\r\n    encoding = encoding || 'gbk';\r\n    if (encoding.startsWith('gb')) {\r\n        const strTool = gbkTool();\r\n        input = strTool.encode(input);\r\n    }\r\n    return input\r\n}\r\n\r\n/**\r\n * 字符串指定解码\r\n * @param input\r\n * @param encoding\r\n * @returns {*}\r\n */\r\nfunction decodeStr(input, encoding) {\r\n    encoding = encoding || 'gbk';\r\n    if (encoding.startsWith('gb')) {\r\n        const strTool = gbkTool();\r\n        input = strTool.decode(input);\r\n    }\r\n    return input\r\n}\r\n\r\nfunction getCryptoJS() {\r\n    // return request('https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/crypto-hiker.js');\r\n    return 'console.log(\"CryptoJS已装载\");'\r\n}\r\n\r\n// 封装的RSA加解密类\r\nconst RSA = {\r\n    decode: function (data, key, option) {\r\n        option = option || {};\r\n        if (typeof (JSEncrypt) === 'function') {\r\n            let chunkSize = option.chunkSize || 117; // 默认分段长度为117\r\n            let privateKey = this.getPrivateKey(key); // 获取私钥\r\n            const decryptor = new JSEncrypt(); //创建解密对象实例\r\n            decryptor.setPrivateKey(privateKey); //设置秘钥\r\n            let uncrypted = '';\r\n            // uncrypted = decryptor.decrypt(data);\r\n            uncrypted = decryptor.decryptUnicodeLong(data);\r\n            return uncrypted;\r\n        } else {\r\n            return false\r\n        }\r\n    },\r\n    encode: function (data, key, option) {\r\n        option = option || {};\r\n        if (typeof (JSEncrypt) === 'function') {\r\n            let chunkSize = option.chunkSize || 117; // 默认分段长度为117\r\n            let publicKey = this.getPublicKey(key); // 获取公钥\r\n            const encryptor = new JSEncrypt();\r\n            encryptor.setPublicKey(publicKey); // 设置公钥\r\n            let encrypted = ''; // 加密结果\r\n            // const textLen = data.length; // 待加密文本长度\r\n            // let offset = 0; // 分段偏移量\r\n            // // 分段加密\r\n            // while (offset < textLen) {\r\n            //     let chunk = data.slice(offset, chunkSize); // 提取分段数据\r\n            //     let enc = encryptor.encrypt(chunk); // 加密分段数据\r\n            //     encrypted += enc; // 连接加密结果\r\n            //     offset += chunkSize; // 更新偏移量\r\n            // }\r\n            encrypted = encryptor.encryptUnicodeLong(data);\r\n            return encrypted\r\n        } else {\r\n            return false\r\n        }\r\n    },\r\n    fixKey(key, prefix, endfix) {\r\n        if (!key.includes(prefix)) {\r\n            key = prefix + key;\r\n        }\r\n        if (!key.includes(endfix)) {\r\n            key += endfix\r\n        }\r\n        return key\r\n    },\r\n    getPrivateKey(key) {\r\n        let prefix = '-----BEGIN RSA PRIVATE KEY-----';\r\n        let endfix = '-----END RSA PRIVATE KEY-----';\r\n        return this.fixKey(key, prefix, endfix);\r\n    },\r\n    getPublicKey(key) {\r\n        let prefix = '-----BEGIN PUBLIC KEY-----';\r\n        let endfix = '-----END PUBLIC KEY-----';\r\n        return this.fixKey(key, prefix, endfix);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取壳子返回的代理地址\r\n * @returns {string|*}\r\n */\r\nfunction getProxyUrl() {\r\n    if (typeof (getProxy) === 'function') {//判断壳子里有getProxy函数就执行取返回结果。否则取默认的本地\r\n        return getProxy(true)\r\n    } else {\r\n        return 'http://127.0.0.1:9978/proxy?do=js'\r\n    }\r\n}\r\n\r\n/**\r\n * 根据正则处理原始m3u8里的广告ts片段，自动修复相对链接\r\n * @param m3u8_text m3u8原始文本，里面是最末级的只含ts片段的。不支持嵌套m3u8链接\r\n * @param m3u8_url m3u8原始地址\r\n * @param ad_remove 正则表达式如: reg:/video/adjump(.*?)ts\r\n * @returns {string|DocumentFragment|*|string}\r\n */\r\nfunction fixAdM3u8(m3u8_text, m3u8_url, ad_remove) {\r\n    if ((!m3u8_text && !m3u8_url) || (!m3u8_text && m3u8_url && !m3u8_url.startsWith('http'))) {\r\n        return ''\r\n    }\r\n    if (!m3u8_text) {\r\n        log('m3u8_url:' + m3u8_url);\r\n        m3u8_text = request(m3u8_url);\r\n    }\r\n    log('len(m3u8_text):' + m3u8_text.length);\r\n    if (!ad_remove) {\r\n        return m3u8_text\r\n    }\r\n    if (ad_remove.startsWith('reg:')) {\r\n        ad_remove = ad_remove.slice(4)\r\n    } else if (ad_remove.startsWith('js:')) {\r\n        ad_remove = ad_remove.slice(3)\r\n    }\r\n    let m3u8_start = m3u8_text.slice(0, m3u8_text.indexOf('#EXTINF')).trim();\r\n    let m3u8_body = m3u8_text.slice(m3u8_text.indexOf('#EXTINF'), m3u8_text.indexOf('#EXT-X-ENDLIST')).trim();\r\n    let m3u8_end = m3u8_text.slice(m3u8_text.indexOf('#EXT-X-ENDLIST')).trim();\r\n    let murls = [];\r\n    let m3_body_list = m3u8_body.split('\\n');\r\n    let m3_len = m3_body_list.length;\r\n    let i = 0;\r\n    while (i < m3_len) {\r\n        let mi = m3_body_list[i];\r\n        let mi_1 = m3_body_list[i + 1];\r\n        if (mi.startsWith('#EXTINF')) {\r\n            murls.push([mi, mi_1].join('&'));\r\n            i += 2\r\n        } else if (mi.startsWith('#EXT-X-DISCONTINUITY')) {\r\n            let mi_2 = m3_body_list[i + 2];\r\n            murls.push([mi, mi_1, mi_2].join('&'));\r\n            i += 3\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    let new_m3u8_body = [];\r\n    for (let murl of murls) {\r\n        if (ad_remove && new RegExp(ad_remove).test(murl)) {\r\n\r\n        } else {\r\n            let murl_list = murl.split('&');\r\n            if (!murl_list[murl_list.length - 1].startsWith('http') && m3u8_url.startsWith('http')) {\r\n                murl_list[murl_list.length - 1] = urljoin(m3u8_url, murl_list[murl_list.length - 1]);\r\n            }\r\n            murl_list.forEach((it) => {\r\n                new_m3u8_body.push(it);\r\n            });\r\n        }\r\n\r\n    }\r\n    new_m3u8_body = new_m3u8_body.join('\\n').trim();\r\n    m3u8_text = [m3u8_start, new_m3u8_body, m3u8_end].join('\\n').trim();\r\n    return m3u8_text\r\n}\r\n\r\n/**\r\n *  智能对比去除广告。支持嵌套m3u8。只需要传入播放地址\r\n * @param m3u8_url m3u8播放地址\r\n * @param headers 自定义访问m3u8的请求头,可以不传\r\n * @returns {string}\r\n */\r\nfunction fixAdM3u8Ai(m3u8_url, headers) {\r\n    let ts = new Date().getTime();\r\n    let option = headers ? {headers: headers} : {};\r\n\r\n    function b(s1, s2) {\r\n        let i = 0;\r\n        while (i < s1.length) {\r\n            if (s1[i] !== s2[i]) {\r\n                break\r\n            }\r\n            i++\r\n        }\r\n        return i;\r\n    }\r\n\r\n    function reverseString(str) {\r\n        return str.split('').reverse().join('');\r\n    }\r\n\r\n    //log('播放的地址：' + m3u8_url);\r\n    let m3u8 = request(m3u8_url, option);\r\n    //log('m3u8处理前:' + m3u8);\r\n    m3u8 = m3u8.trim().split('\\n').map(it => it.startsWith('#') ? it : urljoin(m3u8_url, it)).join('\\n');\r\n    //log('m3u8处理后:============:' + m3u8);\r\n    // 获取嵌套m3u8地址\r\n    m3u8 = m3u8.replace(/\\n\\n/ig, '\\n');//删除多余的换行符\r\n    let last_url = m3u8.split('\\n').slice(-1)[0];\r\n    if (last_url.length < 5) {\r\n        last_url = m3u8.split('\\n').slice(-2)[0];\r\n    }\r\n\r\n    if (last_url.includes('.m3u8') && last_url !== m3u8_url) {\r\n        m3u8_url = urljoin2(m3u8_url, last_url);\r\n        log('嵌套的m3u8_url:' + m3u8_url);\r\n        m3u8 = request(m3u8_url, option);\r\n    }\r\n    //log('----处理有广告的地址----');\r\n    let s = m3u8.trim().split('\\n').filter(it => it.trim()).join('\\n');\r\n    let ss = s.split('\\n')\r\n    //找出第一条播放地址\r\n    let firststr = ss.find(x => !x.startsWith('#'));\r\n    let maxl = 0;//最大相同字符\r\n    let firststrlen = firststr.length;\r\n    //log('字符串长度：' + firststrlen);\r\n    let ml = Math.round(ss.length / 2).toString().length;//取数据的长度的位数\r\n    //log('数据条数的长度：' + ml);\r\n    //找出最后一条播放地址\r\n    let maxc = 0;\r\n    let laststr = ss.toReversed().find((x) => {\r\n        if (!x.startsWith('#')) {\r\n            let k = b(reverseString(firststr), reverseString(x));\r\n            maxl = b(firststr, x);\r\n            maxc++;\r\n            if (firststrlen - maxl <= ml + k || maxc > 10) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    });\r\n    log('最后一条切片：' + laststr);\r\n    //log('最小相同字符长度：' + maxl);\r\n    let ad_urls = [];\r\n    for (let i = 0; i < ss.length; i++) {\r\n        let s = ss[i];\r\n        if (!s.startsWith('#')) {\r\n            if (b(firststr, s) < maxl) {\r\n                ad_urls.push(s); // 广告地址加入列表\r\n                ss.splice(i - 1, 2);\r\n                i = i - 2;\r\n            } else {\r\n                ss[i] = urljoin(m3u8_url, s);\r\n            }\r\n        } else {\r\n            ss[i] = s.replace(/URI=\\\"(.*)\\\"/, 'URI=\\\"' + urljoin(m3u8_url, '$1') + '\\\"');\r\n        }\r\n    }\r\n    log('处理的m3u8地址:' + m3u8_url);\r\n    log('----广告地址----');\r\n    log(ad_urls);\r\n    m3u8 = ss.join('\\n');\r\n    //log('处理完成');\r\n    log('处理耗时：' + (new Date().getTime() - ts).toString());\r\n    return m3u8\r\n}\r\n\r\n\r\n/**\r\n * 强制正序算法\r\n * @param lists  待正序列表\r\n * @param key 正序键\r\n * @param option 单个元素处理函数\r\n * @returns {*}\r\n */\r\nfunction forceOrder(lists, key, option) {\r\n    let start = Math.floor(lists.length / 2);\r\n    let end = Math.min(lists.length - 1, start + 1);\r\n    if (start >= end) {\r\n        return lists;\r\n    }\r\n    let first = lists[start];\r\n    let second = lists[end];\r\n    if (key) {\r\n        try {\r\n            first = first[key];\r\n            second = second[key];\r\n        } catch (e) {\r\n        }\r\n    }\r\n    if (option && typeof (option) === 'function') {\r\n        try {\r\n            first = option(first);\r\n            second = option(second);\r\n        } catch (e) {\r\n        }\r\n    }\r\n    first += '';\r\n    second += '';\r\n    // console.log(first,second);\r\n    if (first.match(/(\\d+)/) && second.match(/(\\d+)/)) {\r\n        let num1 = Number(first.match(/(\\d+)/)[1]);\r\n        let num2 = Number(second.match(/(\\d+)/)[1]);\r\n        if (num1 > num2) {\r\n            lists.reverse();\r\n        }\r\n    }\r\n    return lists\r\n}\r\n\r\nlet VODS = [];// 一级或者搜索需要的数据列表\r\nlet VOD = {};// 二级的单个数据\r\nlet TABS = [];// 二级的自定义线路列表 如: TABS=['道长在线','道长在线2']\r\nlet LISTS = [];// 二级的自定义选集播放列表 如: LISTS=[['第1集$http://1.mp4','第2集$http://2.mp4'],['第3集$http://1.mp4','第4集$http://2.mp4']]\r\n\r\n/**\r\n * 获取链接的query请求转为js的object字典对象\r\n * @param url\r\n * @returns {{}}\r\n */\r\nfunction getQuery(url) {\r\n    try {\r\n        if (url.indexOf('?') > -1) {\r\n            url = url.slice(url.indexOf('?') + 1);\r\n        }\r\n        let arr = url.split(\"#\")[0].split(\"&\");\r\n        const resObj = {};\r\n        arr.forEach(item => {\r\n            let arr1 = item.split(\"=\");\r\n            let key = arr1[0];\r\n            let value = arr1.slice(1).join('=');\r\n            resObj[key] = value;\r\n        });\r\n        return resObj;\r\n    } catch (err) {\r\n        log('getQuery发生错误:' + e.message)\r\n        return {};\r\n    }\r\n}\r\n\r\n/**\r\n *  url拼接\r\n * @param fromPath 初始当前页面url\r\n * @param nowPath 相对当前页面url\r\n * @returns {*}\r\n */\r\nfunction urljoin(fromPath, nowPath) {\r\n    fromPath = fromPath || '';\r\n    nowPath = nowPath || '';\r\n    return joinUrl(fromPath, nowPath);\r\n    // try {\r\n    //     // import Uri from './uri.min.js';\r\n    //     // var Uri = require('./uri.min.js');\r\n    //     // eval(request('https://cdn.bootcdn.net/ajax/libs/URI.js/1.19.11/URI.min.js'));\r\n    //     // let new_uri = URI(nowPath, fromPath);\r\n\r\n    //     let new_uri = Uri(nowPath, fromPath);\r\n    //     new_uri = new_uri.toString();\r\n    //     // console.log(new_uri);\r\n    //     // return fromPath + nowPath\r\n    //     return new_uri\r\n    // }\r\n    // catch (e) {\r\n    //     console.log('urljoin发生错误:'+e.message);\r\n    //     if(nowPath.startsWith('http')){\r\n    //         return nowPath\r\n    //     }if(nowPath.startsWith('/')){\r\n    //         return getHome(fromPath)+nowPath\r\n    //     }\r\n    //     return fromPath+nowPath\r\n    // }\r\n}\r\n\r\nvar urljoin2 = urljoin;\r\n\r\n// 内置 pdfh,pdfa,pd\r\nconst defaultParser = {\r\n    pdfh: pdfh,\r\n    pdfa: pdfa,\r\n    pd: pd,\r\n};\r\n\r\n\r\n/**\r\n *  pdfh原版优化,能取style属性里的图片链接\r\n * @param html 源码\r\n * @param parse 解析表达式\r\n * @returns {string|*}\r\n */\r\nfunction pdfh2(html, parse) {\r\n    let html2 = html;\r\n    try {\r\n        if (typeof (html) !== 'string') {\r\n            html2 = html.rr(html.ele).toString();\r\n        }\r\n    } catch (e) {\r\n        print('html对象转文本发生了错误:' + e.message);\r\n    }\r\n    let result = defaultParser.pdfh(html2, parse);\r\n    let option = parse.includes('&&') ? parse.split('&&').slice(-1)[0] : parse.split(' ').slice(-1)[0];\r\n    if (/style/.test(option.toLowerCase()) && /url\\(/.test(result)) {\r\n        try {\r\n            result = result.match(/url\\((.*?)\\)/)[1];\r\n            // 2023/07/28新增 style取内部链接自动去除首尾单双引号\r\n            result = result.replace(/^['|\"](.*)['|\"]$/, \"$1\");\r\n        } catch (e) {\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * pdfa原版优化,可以转换jq的html对象\r\n * @param html\r\n * @param parse\r\n * @returns {*}\r\n */\r\nfunction pdfa2(html, parse) {\r\n    let html2 = html;\r\n    try {\r\n        if (typeof (html) !== 'string') {\r\n            html2 = html.rr(html.ele).toString();\r\n        }\r\n    } catch (e) {\r\n        print('html对象转文本发生了错误:' + e.message);\r\n    }\r\n    return defaultParser.pdfa(html2, parse);\r\n}\r\n\r\n/**\r\n * pd原版方法重写-增加自动urljoin\r\n * @param html\r\n * @param parse\r\n * @param uri\r\n * @returns {*}\r\n */\r\nfunction pd2(html, parse, uri) {\r\n    let ret = pdfh2(html, parse);\r\n    if (typeof (uri) === 'undefined' || !uri) {\r\n        uri = '';\r\n    }\r\n    if (DOM_CHECK_ATTR.test(parse) && !SPECIAL_URL.test(ret)) {\r\n        if (/http/.test(ret)) {\r\n            ret = ret.slice(ret.indexOf('http'));\r\n        } else {\r\n            ret = urljoin(MY_URL, ret)\r\n        }\r\n    }\r\n    // MY_URL = getItem('MY_URL',MY_URL);\r\n    // console.log(`规则${RKEY}打印MY_URL:${MY_URL},uri:${uri}`);\r\n    return ret\r\n}\r\n\r\nconst parseTags = {\r\n    jsp: {\r\n        pdfh: pdfh2,\r\n        pdfa: pdfa2,\r\n        pd: pd2,\r\n    },\r\n    json: {\r\n        pdfh(html, parse) {\r\n            if (!parse || !parse.trim()) {\r\n                return '';\r\n            }\r\n            if (typeof (html) === 'string') {\r\n                // print('jsonpath:pdfh字符串转dict');\r\n                html = JSON.parse(html);\r\n            }\r\n            parse = parse.trim();\r\n            if (!parse.startsWith('$.')) {\r\n                parse = '$.' + parse;\r\n            }\r\n            parse = parse.split('||');\r\n            for (let ps of parse) {\r\n                let ret = cheerio.jp(ps, html);\r\n                if (Array.isArray(ret)) {\r\n                    ret = ret[0] || '';\r\n                } else {\r\n                    ret = ret || ''\r\n                }\r\n                if (ret && typeof (ret) !== 'string') {\r\n                    ret = ret.toString();\r\n                }\r\n                if (ret) {\r\n                    return ret\r\n                }\r\n            }\r\n            return '';\r\n        },\r\n        pdfa(html, parse) {\r\n            if (!parse || !parse.trim()) {\r\n                return '';\r\n            }\r\n            if (typeof (html) === 'string') {\r\n                // print('jsonpath:pdfa字符串转dict');\r\n                html = JSON.parse(html);\r\n            }\r\n            parse = parse.trim()\r\n            if (!parse.startsWith('$.')) {\r\n                parse = '$.' + parse;\r\n            }\r\n            let ret = cheerio.jp(parse, html);\r\n            if (Array.isArray(ret) && Array.isArray(ret[0]) && ret.length === 1) {\r\n                return ret[0] || []\r\n            }\r\n            return ret || []\r\n        },\r\n        pd(html, parse) {\r\n            let ret = parseTags.json.pdfh(html, parse);\r\n            if (ret) {\r\n                return urljoin(MY_URL, ret);\r\n            }\r\n            return ret\r\n        },\r\n    },\r\n    jq: {\r\n        pdfh(html, parse) {\r\n            if (!html || !parse || !parse.trim()) {\r\n                return ''\r\n            }\r\n            parse = parse.trim();\r\n            let result = defaultParser.pdfh(html, parse);\r\n            // print(`pdfh解析${parse}=>${result}`);\r\n            return result;\r\n        },\r\n        pdfa(html, parse) {\r\n            if (!html || !parse || !parse.trim()) {\r\n                return [];\r\n            }\r\n            parse = parse.trim();\r\n            let result = defaultParser.pdfa(html, parse);\r\n            // print(result);\r\n            print(`pdfa解析${parse}=>${result.length}`);\r\n            return result;\r\n        },\r\n        pd(html, parse, base_url) {\r\n            if (!html || !parse || !parse.trim()) {\r\n                return ''\r\n            }\r\n            parse = parse.trim();\r\n            base_url = base_url || MY_URL;\r\n            return defaultParser.pd(html, parse, base_url);\r\n        },\r\n    },\r\n    getParse(p0) {//非js开头的情况自动获取解析标签\r\n        if (p0.startsWith('jsp:')) {\r\n            return this.jsp\r\n        } else if (p0.startsWith('json:')) {\r\n            return this.json\r\n        } else if (p0.startsWith('jq:')) {\r\n            return this.jq\r\n        } else {\r\n            return this.jq\r\n        }\r\n    }\r\n};\r\n\r\nconst stringify = JSON.stringify;\r\nconst jsp = parseTags.jsp;\r\nconst jq = parseTags.jq;\r\n\r\n/*** 后台需要实现的java方法并注入到js中 ***/\r\n\r\n/**\r\n * 读取本地文件->应用程序目录\r\n * @param filePath\r\n * @returns {string}\r\n */\r\nfunction readFile(filePath) {\r\n    filePath = filePath || './uri.min.js';\r\n    var fd = os.open(filePath);\r\n    var buffer = new ArrayBuffer(1024);\r\n    var len = os.read(fd, buffer, 0, 1024);\r\n    console.log(len);\r\n    let text = String.fromCharCode.apply(null, new Uint8Array(buffer));\r\n    console.log(text);\r\n    return text\r\n}\r\n\r\n/**\r\n * 处理返回的json数据\r\n * @param html\r\n * @returns {*}\r\n */\r\nfunction dealJson(html) {\r\n    try {\r\n        // html = html.match(/[\\w|\\W|\\s|\\S]*?(\\{[\\w|\\W|\\s|\\S]*\\})/).group[1];\r\n        html = html.trim();\r\n        if (!((html.startsWith('{') && html.endsWith('}')) || (html.startsWith('[') && html.endsWith(']')))) {\r\n            html = '{' + html.match(/.*?\\{(.*)\\}/m)[1] + '}';\r\n        }\r\n    } catch (e) {\r\n    }\r\n    try {\r\n        html = JSON.parse(html);\r\n    } catch (e) {\r\n    }\r\n    // console.log(typeof(html));\r\n    return html;\r\n}\r\n\r\n/**\r\n * 验证码识别逻辑,需要java实现(js没有bytes类型,无法调用后端的传递图片二进制获取验证码文本的接口)\r\n * @type {{api: string, classification: (function(*=): string)}}\r\n */\r\nvar OcrApi = {\r\n    api: OCR_API,\r\n    classification: function (img) { // img是byte类型,这里不方便搞啊\r\n        let code = '';\r\n        try {\r\n            // let html = request(this.api,{data:{img:img},headers:{'User-Agent':PC_UA},'method':'POST'},true);\r\n            // html = JSON.parse(html);\r\n            // code = html.url||'';\r\n            log('通过drpy_ocr验证码接口过验证...');\r\n            let html = '';\r\n            if (this.api.endsWith('drpy/text')) {\r\n                html = request(this.api, {data: {img: img}, headers: {'User-Agent': PC_UA}, 'method': 'POST'}, true);\r\n            } else {\r\n                html = post(this.api, {body: img});\r\n            }\r\n            code = html || '';\r\n        } catch (e) {\r\n            log(`OCR识别验证码发生错误:${e.message}`)\r\n        }\r\n        return code\r\n    }\r\n};\r\n\r\n/**\r\n * 验证码识别,暂未实现\r\n * @param url 验证码图片链接\r\n * @returns {string} 验证成功后的cookie\r\n */\r\nfunction verifyCode(url) {\r\n    let cnt = 0;\r\n    let host = getHome(url);\r\n    let cookie = '';\r\n    while (cnt < OCR_RETRY) {\r\n        try {\r\n            // let obj = {headers:headers,timeout:timeout};\r\n            let yzm_url = `${host}/index.php/verify/index.html`;\r\n            console.log(`验证码链接:${yzm_url}`);\r\n            let hhtml = request(yzm_url, {withHeaders: true, toBase64: true}, true);\r\n            let json = JSON.parse(hhtml);\r\n            if (!cookie) {\r\n                // print(json);\r\n                let setCk = Object.keys(json).find(it => it.toLowerCase() === 'set-cookie');\r\n                // cookie = json['set-cookie']?json['set-cookie'].split(';')[0]:'';\r\n                cookie = setCk ? json[setCk].split(';')[0] : '';\r\n            }\r\n            // console.log(hhtml);\r\n            console.log('cookie:' + cookie);\r\n            let img = json.body;\r\n            // console.log(img);\r\n            let code = OcrApi.classification(img);\r\n            console.log(`第${cnt + 1}次验证码识别结果:${code}`);\r\n            let submit_url = `${host}/index.php/ajax/verify_check?type=search&verify=${code}`;\r\n            console.log(submit_url);\r\n            let html = request(submit_url, {headers: {Cookie: cookie}, 'method': 'POST'});\r\n            // console.log(html);\r\n            html = JSON.parse(html);\r\n            if (html.msg === 'ok') {\r\n                console.log(`第${cnt + 1}次验证码提交成功`);\r\n                return cookie // 需要返回cookie\r\n            } else if (html.msg !== 'ok' && cnt + 1 >= OCR_RETRY) {\r\n                cookie = ''; // 需要清空返回cookie\r\n            }\r\n        } catch (e) {\r\n            console.log(`第${cnt + 1}次验证码提交失败:${e.message}`);\r\n            if (cnt + 1 >= OCR_RETRY) {\r\n                cookie = '';\r\n            }\r\n        }\r\n        cnt += 1\r\n    }\r\n    return cookie\r\n}\r\n\r\n/**\r\n * 存在数据库配置表里, key字段对应值value,没有就新增,有就更新,调用此方法会清除key对应的内存缓存\r\n * @param k 键\r\n * @param v 值\r\n */\r\nfunction setItem(k, v) {\r\n    local.set(RKEY, k, v);\r\n    console.log(`规则${RKEY}设置${k} => ${v}`)\r\n}\r\n\r\n/**\r\n *  获取数据库配置表对应的key字段的value，没有这个key就返回value默认传参.需要有缓存,第一次获取后会存在内存里\r\n * @param k 键\r\n * @param v 值\r\n * @returns {*}\r\n */\r\nfunction getItem(k, v) {\r\n    return local.get(RKEY, k) || v;\r\n}\r\n\r\n/**\r\n *  删除数据库key对应的一条数据,并清除此key对应的内存缓存\r\n * @param k\r\n */\r\nfunction clearItem(k) {\r\n    local.delete(RKEY, k);\r\n}\r\n\r\n/*** js自封装的方法 ***/\r\n\r\n/**\r\n * 获取链接的host(带http协议的完整链接)\r\n * @param url 任意一个正常完整的Url,自动提取根\r\n * @returns {string}\r\n */\r\nfunction getHome(url) {\r\n    if (!url) {\r\n        return ''\r\n    }\r\n    let tmp = url.split('//');\r\n    url = tmp[0] + '//' + tmp[1].split('/')[0];\r\n    try {\r\n        url = decodeURIComponent(url);\r\n    } catch (e) {\r\n    }\r\n    return url\r\n}\r\n\r\n/**\r\n * get参数编译链接,类似python params字典自动拼接\r\n * @param url 访问链接\r\n * @param obj 参数字典\r\n * @returns {*}\r\n */\r\nfunction buildUrl(url, obj) {\r\n    obj = obj || {};\r\n    if (url.indexOf('?') < 0) {\r\n        url += '?'\r\n    }\r\n    let param_list = [];\r\n    let keys = Object.keys(obj);\r\n    keys.forEach(it => {\r\n        param_list.push(it + '=' + obj[it])\r\n    });\r\n    let prs = param_list.join('&');\r\n    if (keys.length > 0 && !url.endsWith('?')) {\r\n        url += '&'\r\n    }\r\n    url += prs;\r\n    return url\r\n}\r\n\r\n/**\r\n * 远程依赖执行函数\r\n * @param url 远程js地址\r\n */\r\nfunction $require(url) {\r\n    eval(request(url));\r\n}\r\n\r\n/**\r\n * 将obj所有key变小写\r\n * @param obj\r\n */\r\nfunction keysToLowerCase(obj) {\r\n    return Object.keys(obj).reduce((result, key) => {\r\n        const newKey = key.toLowerCase();\r\n        result[newKey] = obj[key]; // 如果值也是对象，可以递归调用本函数\r\n        return result;\r\n    }, {});\r\n}\r\n\r\n/**\r\n * 海阔网页请求函数完整封装\r\n * @param url 请求链接\r\n * @param obj 请求对象 {headers:{},method:'',timeout:5000,body:'',withHeaders:false}\r\n * @param ocr_flag 标识此flag是用于请求ocr识别的,自动过滤content-type指定编码\r\n * @returns {string|string|DocumentFragment|*}\r\n */\r\nfunction request(url, obj, ocr_flag) {\r\n    ocr_flag = ocr_flag || false;\r\n    if (typeof (obj) === 'undefined' || !obj || obj === {}) {\r\n        if (!fetch_params || !fetch_params.headers) {\r\n            let headers = {\r\n                'User-Agent': MOBILE_UA,\r\n            };\r\n            if (rule.headers) {\r\n                Object.assign(headers, rule.headers);\r\n            }\r\n            if (!fetch_params) {\r\n                fetch_params = {};\r\n            }\r\n            fetch_params.headers = headers;\r\n        }\r\n        if (!fetch_params.headers.Referer) {\r\n            fetch_params.headers.Referer = getHome(url)\r\n        }\r\n        obj = fetch_params;\r\n    } else {\r\n        let headers = obj.headers || {};\r\n        let keys = Object.keys(headers).map(it => it.toLowerCase());\r\n        if (!keys.includes('user-agent')) {\r\n            headers['User-Agent'] = MOBILE_UA;\r\n            // fetch_params 里存在ua则优先，否则才默认手机UA\r\n            if (typeof (fetch_params) === 'object' && fetch_params && fetch_params.headers) {\r\n                let fetch_headers = keysToLowerCase(fetch_params.headers);\r\n                if (fetch_headers['user-agent']) {\r\n                    headers['User-Agent'] = fetch_headers['user-agent'];\r\n                }\r\n            }\r\n        }\r\n        if (!keys.includes('referer')) {\r\n            headers['Referer'] = getHome(url);\r\n        }\r\n        obj.headers = headers;\r\n    }\r\n    if (rule.encoding && rule.encoding !== 'utf-8' && !ocr_flag) {\r\n        if (!obj.headers.hasOwnProperty('Content-Type') && !obj.headers.hasOwnProperty('content-type')) { // 手动指定了就不管\r\n            obj.headers[\"Content-Type\"] = 'text/html; charset=' + rule.encoding;\r\n        }\r\n    }\r\n    if (typeof (obj.body) != 'undefined' && obj.body && typeof (obj.body) === 'string') {\r\n        // let data = {};\r\n        // obj.body.split('&').forEach(it=>{\r\n        //     data[it.split('=')[0]] = it.split('=')[1]\r\n        // });\r\n        // obj.data = data;\r\n        // delete obj.body\r\n\r\n        // 传body加 \"Content-Type\":\"application/x-www-form-urlencoded;\" 即可post form\r\n        if (!obj.headers.hasOwnProperty('Content-Type') && !obj.headers.hasOwnProperty('content-type')) { // 手动指定了就不管\r\n            obj.headers[\"Content-Type\"] = 'application/x-www-form-urlencoded; charset=' + rule.encoding;\r\n        }\r\n    } else if (typeof (obj.body) != 'undefined' && obj.body && typeof (obj.body) === 'object') {\r\n        obj.data = obj.body;\r\n        delete obj.body\r\n    }\r\n    if (!url) {\r\n        return obj.withHeaders ? '{}' : ''\r\n    }\r\n    if (obj.toBase64) { // 返回base64,用于请求图片\r\n        obj.buffer = 2;\r\n        delete obj.toBase64\r\n    }\r\n    if (obj.redirect === false) {\r\n        obj.redirect = 0;\r\n    }\r\n    console.log(JSON.stringify(obj.headers));\r\n    // console.log('request:'+url+' obj:'+JSON.stringify(obj));\r\n    console.log('request:' + url + `|method:${obj.method || 'GET'}|body:${obj.body || ''}`);\r\n    let res = req(url, obj);\r\n    let html = res.content || '';\r\n    // console.log(html);\r\n    if (obj.withHeaders) {\r\n        let htmlWithHeaders = res.headers;\r\n        htmlWithHeaders.body = html;\r\n        return JSON.stringify(htmlWithHeaders);\r\n    } else {\r\n        return html\r\n    }\r\n}\r\n\r\n/**\r\n *  快捷post请求\r\n * @param url 地址\r\n * @param obj 对象\r\n * @returns {string|DocumentFragment|*}\r\n */\r\nfunction post(url, obj) {\r\n    obj = obj || {};\r\n    obj.method = 'POST';\r\n    return request(url, obj);\r\n}\r\n\r\n/**\r\n * 快捷获取特殊地址cookie|一般用作搜索过验证\r\n * 用法 let {cookie,html} = reqCookie(url);\r\n * @param url 能返回cookie的地址\r\n * @param obj 常规请求参数\r\n * @param all_cookie 返回全部cookie.默认false只返回第一个,一般是PhpSessionId\r\n * @returns {{cookie: string, html: (*|string|DocumentFragment)}}\r\n */\r\nfunction reqCookie(url, obj, all_cookie) {\r\n    obj = obj || {};\r\n    obj.withHeaders = true;\r\n    all_cookie = all_cookie || false;\r\n    let html = request(url, obj);\r\n    let json = JSON.parse(html);\r\n    let setCk = Object.keys(json).find(it => it.toLowerCase() === 'set-cookie');\r\n    let cookie = setCk ? json[setCk] : '';\r\n    if (Array.isArray(cookie)) {\r\n        cookie = cookie.join(';')\r\n    }\r\n    if (!all_cookie) {\r\n        cookie = cookie.split(';')[0];\r\n    }\r\n    html = json.body;\r\n    return {\r\n        cookie,\r\n        html\r\n    }\r\n}\r\n\r\nfetch = request;\r\nprint = function (data) {\r\n    data = data || '';\r\n    if (typeof (data) == 'object' && Object.keys(data).length > 0) {\r\n        try {\r\n            data = JSON.stringify(data);\r\n            console.log(data);\r\n        } catch (e) {\r\n            // console.log('print:'+e.message);\r\n            console.log(typeof (data) + ':' + data.length);\r\n            return\r\n        }\r\n    } else if (typeof (data) == 'object' && Object.keys(data).length < 1) {\r\n        console.log('null object');\r\n    } else {\r\n        console.log(data);\r\n    }\r\n}\r\nlog = print;\r\n\r\n/**\r\n * 检查宝塔验证并自动跳过获取正确源码\r\n * @param html 之前获取的html\r\n * @param url 之前的来源url\r\n * @param obj 来源obj\r\n * @returns {string|DocumentFragment|*}\r\n */\r\nfunction checkHtml(html, url, obj) {\r\n    if (/\\?btwaf=/.test(html)) {\r\n        let btwaf = html.match(/btwaf(.*?)\"/)[1];\r\n        url = url.split('#')[0] + '?btwaf' + btwaf;\r\n        print('宝塔验证访问链接:' + url);\r\n        html = request(url, obj);\r\n    }\r\n    return html\r\n}\r\n\r\n/**\r\n *  带一次宝塔验证的源码获取\r\n * @param url 请求链接\r\n * @param obj 请求参数\r\n * @returns {string|DocumentFragment}\r\n */\r\nfunction getCode(url, obj) {\r\n    let html = request(url, obj);\r\n    html = checkHtml(html, url, obj);\r\n    return html\r\n}\r\n\r\n/**\r\n * 源rule专用的请求方法,自动注入cookie\r\n * @param url 请求链接\r\n * @returns {string|DocumentFragment}\r\n */\r\nfunction getHtml(url) {\r\n    let obj = {};\r\n    if (rule.headers) {\r\n        obj.headers = rule.headers;\r\n    }\r\n    let cookie = getItem(RULE_CK, '');\r\n    if (cookie) {\r\n        // log('有cookie:'+cookie);\r\n        if (obj.headers && !Object.keys(obj.headers).map(it => it.toLowerCase()).includes('cookie')) {\r\n            log('历史无cookie,新增过验证后的cookie');\r\n            obj.headers['Cookie'] = cookie;\r\n        } else if (obj.headers && obj.headers.cookie && obj.headers.cookie !== cookie) {\r\n            obj.headers['Cookie'] = cookie;\r\n            log('历史有小写过期的cookie,更新过验证后的cookie');\r\n        } else if (obj.headers && obj.headers.Cookie && obj.headers.Cookie !== cookie) {\r\n            obj.headers['Cookie'] = cookie;\r\n            log('历史有大写过期的cookie,更新过验证后的cookie');\r\n        } else if (!obj.headers) {\r\n            obj.headers = {Cookie: cookie};\r\n            log('历史无headers,更新过验证后的含cookie的headers');\r\n        }\r\n    }\r\n    let html = getCode(url, obj);\r\n    return html\r\n}\r\n\r\n/**\r\n * 首页分类解析，筛选暂未实现\r\n * @param homeObj 首页传参对象\r\n * @returns {string}\r\n */\r\nfunction homeParse(homeObj) {\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    let classes = [];\r\n    if (homeObj.class_name && homeObj.class_url) {\r\n        let names = homeObj.class_name.split('&');\r\n        let urls = homeObj.class_url.split('&');\r\n        let cnt = Math.min(names.length, urls.length);\r\n        for (let i = 0; i < cnt; i++) {\r\n            classes.push({\r\n                'type_id': urls[i],\r\n                'type_name': names[i]\r\n            });\r\n        }\r\n    }\r\n\r\n    if (homeObj.class_parse) {\r\n        if (homeObj.class_parse.startsWith('js:')) {\r\n            var input = homeObj.MY_URL;\r\n            try {\r\n                eval(homeObj.class_parse.replace('js:', ''));\r\n                if (Array.isArray(input)) {\r\n                    classes = input;\r\n                }\r\n            } catch (e) {\r\n                log('通过js动态获取分类发生了错误:' + e.message);\r\n            }\r\n        } else {\r\n            let p = homeObj.class_parse.split(';');\r\n            let p0 = p[0];\r\n            let _ps = parseTags.getParse(p0);\r\n            let is_json = p0.startsWith('json:');\r\n            _pdfa = _ps.pdfa;\r\n            _pdfh = _ps.pdfh;\r\n            _pd = _ps.pd;\r\n            MY_URL = rule.url;\r\n            if (is_json) {\r\n                try {\r\n                    let cms_cate_url = homeObj.MY_URL.replace('ac=detail', 'ac=list');\r\n                    let html = homeObj.home_html || getHtml(cms_cate_url);\r\n                    if (html) {\r\n                        if (cms_cate_url === homeObj.MY_URL) {\r\n                            homeHtmlCache = html;\r\n                        }\r\n                        let list = _pdfa(html, p0.replace('json:', ''));\r\n                        if (list && list.length > 0) {\r\n                            classes = list;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e.message);\r\n                }\r\n            } else if (p.length >= 3 && !is_json) { // 可以不写正则\r\n                try {\r\n                    let html = homeObj.home_html || getHtml(homeObj.MY_URL);\r\n                    if (html) {\r\n                        homeHtmlCache = html;\r\n                        let list = _pdfa(html, p0);\r\n                        if (list && list.length > 0) {\r\n                            list.forEach((it, idex) => {\r\n                                try {\r\n                                    let name = _pdfh(it, p[1]);\r\n                                    if (homeObj.cate_exclude && (new RegExp(homeObj.cate_exclude).test(name))) {\r\n                                        return;\r\n                                    }\r\n                                    // let url = pdfh(it, p[2]);\r\n                                    let url = _pd(it, p[2]);\r\n                                    if (p.length > 3 && p[3] && !homeObj.home_html) {\r\n                                        let exp = new RegExp(p[3]);\r\n                                        url = url.match(exp)[1];\r\n                                    }\r\n\r\n                                    classes.push({\r\n                                        'type_id': url.trim(),\r\n                                        'type_name': name.trim()\r\n                                    });\r\n                                } catch (e) {\r\n                                    console.log(`分类列表定位第${idex}个元素正常报错:${e.message}`);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e.message);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    // 排除分类\r\n    classes = classes.filter(it => !homeObj.cate_exclude || !(new RegExp(homeObj.cate_exclude).test(it.type_name)));\r\n    let resp = {\r\n        'class': classes\r\n    };\r\n    if (homeObj.filter) {\r\n        resp.filters = homeObj.filter;\r\n    }\r\n    console.log(JSON.stringify(resp));\r\n    return JSON.stringify(resp);\r\n\r\n}\r\n\r\n/**\r\n * 推荐和搜索单字段继承一级\r\n * @param p 推荐或搜索的解析分割;列表\r\n * @param pn 自身列表序号\r\n * @param pp  一级解析分割;列表\r\n * @param ppn 继承一级序号\r\n * @returns {*}\r\n */\r\nfunction getPP(p, pn, pp, ppn) {\r\n    try {\r\n        let ps = p[pn] === '*' && pp.length > ppn ? pp[ppn] : p[pn]\r\n        return ps\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\n/**\r\n *  首页推荐列表解析\r\n * @param homeVodObj\r\n * @returns {string}\r\n */\r\nfunction homeVodParse(homeVodObj) {\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    let d = [];\r\n    MY_URL = homeVodObj.homeUrl;\r\n    // setItem('MY_URL',MY_URL);\r\n    console.log(MY_URL);\r\n    let t1 = (new Date()).getTime();\r\n    let p = homeVodObj.推荐;\r\n    print('p:' + p);\r\n    if (p === '*' && rule.一级) {\r\n        p = rule.一级;\r\n        homeVodObj.double = false;\r\n    }\r\n    if (!p || typeof (p) !== 'string') {\r\n        return '{}'\r\n    }\r\n    p = p.trim();\r\n    let pp = rule.一级 ? rule.一级.split(';') : [];\r\n    if (p.startsWith('js:')) {\r\n        const TYPE = 'home';\r\n        var input = MY_URL;\r\n        HOST = rule.host;\r\n        eval(p.replace('js:', ''));\r\n        d = VODS;\r\n    } else {\r\n        p = p.split(';');\r\n        if (!homeVodObj.double && p.length < 5) {\r\n            return '{}'\r\n        } else if (homeVodObj.double && p.length < 6) {\r\n            return '{}'\r\n        }\r\n        let p0 = getPP(p, 0, pp, 0)\r\n        let _ps = parseTags.getParse(p0);\r\n        _pdfa = _ps.pdfa;\r\n        _pdfh = _ps.pdfh;\r\n        _pd = _ps.pd;\r\n        let is_json = p0.startsWith('json:');\r\n        p0 = p0.replace(/^(jsp:|json:|jq:)/, '');\r\n        // print(p[0]);\r\n        let html = homeHtmlCache || getHtml(MY_URL);\r\n        homeHtmlCache = undefined;\r\n        if (is_json) {\r\n            // print('是json,开始处理');\r\n            html = dealJson(html);\r\n        }\r\n        try {\r\n            console.log('double:' + homeVodObj.double);\r\n            if (homeVodObj.double) {\r\n                let items = _pdfa(html, p0);\r\n                // console.log(items.length);\r\n                let p1 = getPP(p, 1, pp, 0);\r\n                let p2 = getPP(p, 2, pp, 1);\r\n                let p3 = getPP(p, 3, pp, 2);\r\n                let p4 = getPP(p, 4, pp, 3);\r\n                let p5 = getPP(p, 5, pp, 4);\r\n                let p6 = getPP(p, 6, pp, 5);\r\n                for (let item of items) {\r\n                    // console.log(p[1]);\r\n                    let items2 = _pdfa(item, p1);\r\n                    // console.log(items2.length);\r\n                    for (let item2 of items2) {\r\n                        try {\r\n                            let title = _pdfh(item2, p2);\r\n                            let img = '';\r\n                            try {\r\n                                img = _pd(item2, p3);\r\n                            } catch (e) {\r\n                            }\r\n                            let desc = '';\r\n                            try {\r\n                                desc = _pdfh(item2, p4);\r\n                            } catch (e) {\r\n                            }\r\n                            let links = [];\r\n                            for (let _p5 of p5.split('+')) {\r\n                                let link = !homeVodObj.detailUrl ? _pd(item2, _p5, MY_URL) : _pdfh(item2, _p5);\r\n                                links.push(link);\r\n                            }\r\n                            let content;\r\n                            if (p.length > 6 && p[6]) {\r\n                                content = _pdfh(item2, p6);\r\n                            } else {\r\n                                content = '';\r\n                            }\r\n                            let vid = links.join('$');\r\n                            if (rule.二级 === '*') {\r\n                                vid = vid + '@@' + title + '@@' + img;\r\n                            }\r\n                            let vod = {\r\n                                vod_name: title,\r\n                                vod_pic: img,\r\n                                vod_remarks: desc,\r\n                                vod_content: content,\r\n                                vod_id: vid\r\n                            };\r\n                            // print(vod);\r\n                            d.push(vod);\r\n                        } catch (e) {\r\n                            console.log('首页列表双层定位处理发生错误:' + e.message);\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            } else {\r\n                let items = _pdfa(html, p0);\r\n                let p1 = getPP(p, 1, pp, 1);\r\n                let p2 = getPP(p, 2, pp, 2);\r\n                let p3 = getPP(p, 3, pp, 3);\r\n                let p4 = getPP(p, 4, pp, 4);\r\n                let p5 = getPP(p, 5, pp, 5);\r\n\r\n                for (let item of items) {\r\n                    try {\r\n                        let title = _pdfh(item, p1);\r\n                        let img = '';\r\n                        try {\r\n                            img = _pd(item, p2, MY_URL);\r\n                        } catch (e) {\r\n                        }\r\n                        let desc = '';\r\n                        try {\r\n                            desc = _pdfh(item, p3);\r\n                        } catch (e) {\r\n                        }\r\n                        let links = [];\r\n                        for (let _p5 of p4.split('+')) {\r\n                            let link = !homeVodObj.detailUrl ? _pd(item, _p5, MY_URL) : _pdfh(item, _p5);\r\n                            links.push(link);\r\n                        }\r\n                        let content;\r\n                        if (p.length > 5 && p[5]) {\r\n                            content = _pdfh(item, p5);\r\n                        } else {\r\n                            content = ''\r\n                        }\r\n                        let vid = links.join('$');\r\n                        if (rule.二级 === '*') {\r\n                            vid = vid + '@@' + title + '@@' + img;\r\n                        }\r\n                        let vod = {\r\n                            vod_name: title,\r\n                            vod_pic: img,\r\n                            vod_remarks: desc,\r\n                            vod_content: content,\r\n                            vod_id: vid\r\n                        };\r\n                        d.push(vod);\r\n\r\n                    } catch (e) {\r\n                        console.log('首页列表单层定位处理发生错误:' + e.message);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    let t2 = (new Date()).getTime();\r\n    console.log('加载首页推荐耗时:' + (t2 - t1) + '毫秒');\r\n    // console.log(JSON.stringify(d));\r\n    if (rule.图片替换) {\r\n        if (rule.图片替换.startsWith('js:')) {\r\n            d.forEach(it => {\r\n                try {\r\n                    var input = it.vod_pic;\r\n                    eval(rule.图片替换.trim().replace('js:', ''));\r\n                    it.vod_pic = input;\r\n                } catch (e) {\r\n                    log(`图片:${it.vod_pic}替换错误:${e.message}`);\r\n                }\r\n            });\r\n        } else if (rule.图片替换.includes('=>')) {\r\n            let replace_from = rule.图片替换.split('=>')[0];\r\n            let replace_to = rule.图片替换.split('=>')[1];\r\n            d.forEach(it => {\r\n                if (it.vod_pic && it.vod_pic.startsWith('http')) {\r\n                    it.vod_pic = it.vod_pic.replace(replace_from, replace_to);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (rule.图片来源) {\r\n        d.forEach(it => {\r\n            if (it.vod_pic && it.vod_pic.startsWith('http')) {\r\n                it.vod_pic = it.vod_pic + rule.图片来源;\r\n            }\r\n        });\r\n    }\r\n    if (d.length > 0) {\r\n        print(d.slice(0, 2));\r\n    }\r\n    return JSON.stringify({\r\n        list: d\r\n    })\r\n}\r\n\r\n/**\r\n * 一级分类页数据解析\r\n * @param cateObj\r\n * @returns {string}\r\n */\r\nfunction categoryParse(cateObj) {\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    let p = cateObj.一级;\r\n    if (!p || typeof (p) !== 'string') {\r\n        return '{}'\r\n    }\r\n    let d = [];\r\n    // let url = cateObj.url.replaceAll('fyclass', cateObj.tid).replaceAll('fypage', cateObj.pg);\r\n    let url = cateObj.url.replaceAll('fyclass', cateObj.tid);\r\n    if (cateObj.pg === 1 && url.includes('[') && url.includes(']')) {\r\n        url = url.split('[')[1].split(']')[0];\r\n    } else if (cateObj.pg > 1 && url.includes('[') && url.includes(']')) {\r\n        url = url.split('[')[0];\r\n    }\r\n    if (rule.filter_url) {\r\n        if (!/fyfilter/.test(url)) {\r\n            if (!url.endsWith('&') && !rule.filter_url.startsWith('&')) {\r\n                url += '&'\r\n            }\r\n            url += rule.filter_url;\r\n        } else {\r\n            url = url.replace('fyfilter', rule.filter_url);\r\n        }\r\n        // filter_url支持fyclass\r\n        url = url.replaceAll('fyclass', cateObj.tid);\r\n        // console.log('filter:'+cateObj.filter);\r\n        let fl = cateObj.filter ? cateObj.extend : {};\r\n        // 自动合并 不同分类对应的默认筛选\r\n        if (rule.filter_def && typeof (rule.filter_def) === 'object') {\r\n            try {\r\n                if (Object.keys(rule.filter_def).length > 0 && rule.filter_def.hasOwnProperty(cateObj.tid)) {\r\n                    let self_fl_def = rule.filter_def[cateObj.tid];\r\n                    if (self_fl_def && typeof (self_fl_def) === 'object') {\r\n                        // 引用传递转值传递,避免污染self变量\r\n                        let fl_def = JSON.parse(JSON.stringify(self_fl_def));\r\n                        fl = Object.assign(fl_def, fl);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                print('合并不同分类对应的默认筛选出错:' + e.message);\r\n            }\r\n        }\r\n        let new_url;\r\n        new_url = cheerio.jinja2(url, {fl: fl});\r\n        // console.log('jinjia2执行后的new_url类型为:'+typeof(new_url));\r\n        url = new_url;\r\n    }\r\n    if (/fypage/.test(url)) {\r\n        if (url.includes('(') && url.includes(')')) {\r\n            let url_rep = url.match(/.*?\\((.*)\\)/)[1];\r\n            // console.log(url_rep);\r\n            let cnt_page = url_rep.replaceAll('fypage', cateObj.pg);\r\n            // console.log(cnt_page);\r\n            let cnt_pg = eval(cnt_page);\r\n            // console.log(cnt_pg);\r\n            url = url.replaceAll(url_rep, cnt_pg).replaceAll('(', '').replaceAll(')', '');\r\n        } else {\r\n            url = url.replaceAll('fypage', cateObj.pg);\r\n        }\r\n    }\r\n\r\n    MY_URL = url;\r\n    // setItem('MY_URL',MY_URL);\r\n    console.log(MY_URL);\r\n    p = p.trim();\r\n    const MY_CATE = cateObj.tid;\r\n    if (p.startsWith('js:')) {\r\n        var MY_FL = cateObj.extend;\r\n        const TYPE = 'cate';\r\n        var input = MY_URL;\r\n        const MY_PAGE = cateObj.pg;\r\n        var desc = '';\r\n        eval(p.trim().replace('js:', ''));\r\n        d = VODS;\r\n    } else {\r\n        p = p.split(';');\r\n        if (p.length < 5) {\r\n            return '{}'\r\n        }\r\n        let _ps = parseTags.getParse(p[0]);\r\n        _pdfa = _ps.pdfa;\r\n        _pdfh = _ps.pdfh;\r\n        _pd = _ps.pd;\r\n        let is_json = p[0].startsWith('json:');\r\n        p[0] = p[0].replace(/^(jsp:|json:|jq:)/, '');\r\n        try {\r\n            let html = getHtml(MY_URL);\r\n            if (html) {\r\n                if (is_json) {\r\n                    html = dealJson(html);\r\n                }\r\n                let list = _pdfa(html, p[0]);\r\n                list.forEach(it => {\r\n                    let links = p[4].split('+').map(p4 => {\r\n                        return !rule.detailUrl ? _pd(it, p4, MY_URL) : _pdfh(it, p4);\r\n                    });\r\n                    let link = links.join('$');\r\n                    let vod_id = rule.detailUrl ? MY_CATE + '$' + link : link;\r\n\r\n                    let vod_name = _pdfh(it, p[1]).replace(/\\n|\\t/g, '').trim();\r\n                    let vod_pic = _pd(it, p[2], MY_URL);\r\n\r\n                    if (rule.二级 === '*') {\r\n                        vod_id = vod_id + '@@' + vod_name + '@@' + vod_pic;\r\n                    }\r\n                    d.push({\r\n                        'vod_id': vod_id,\r\n                        'vod_name': vod_name,\r\n                        'vod_pic': vod_pic,\r\n                        'vod_remarks': _pdfh(it, p[3]).replace(/\\n|\\t/g, '').trim(),\r\n                    });\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    }\r\n    if (rule.图片替换) {\r\n        if (rule.图片替换.startsWith('js:')) {\r\n            d.forEach(it => {\r\n                try {\r\n                    var input = it.vod_pic;\r\n                    eval(rule.图片替换.trim().replace('js:', ''));\r\n                    it.vod_pic = input;\r\n                } catch (e) {\r\n                    log(`图片:${it.vod_pic}替换错误:${e.message}`);\r\n                }\r\n            });\r\n        } else if (rule.图片替换.includes('=>')) {\r\n            let replace_from = rule.图片替换.split('=>')[0];\r\n            let replace_to = rule.图片替换.split('=>')[1];\r\n            d.forEach(it => {\r\n                if (it.vod_pic && it.vod_pic.startsWith('http')) {\r\n                    it.vod_pic = it.vod_pic.replace(replace_from, replace_to);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (rule.图片来源) {\r\n        d.forEach(it => {\r\n            if (it.vod_pic && it.vod_pic.startsWith('http')) {\r\n                it.vod_pic = it.vod_pic + rule.图片来源;\r\n            }\r\n        });\r\n    }\r\n    // print(d);\r\n    if (d.length > 0) {\r\n        print(d.slice(0, 2));\r\n    }\r\n    let pagecount = 0;\r\n    if (rule.pagecount && typeof (rule.pagecount) === 'object' && rule.pagecount.hasOwnProperty(MY_CATE)) {\r\n        print(`MY_CATE:${MY_CATE},pagecount:${JSON.stringify(rule.pagecount)}`);\r\n        pagecount = parseInt(rule.pagecount[MY_CATE]);\r\n    }\r\n    let nodata = {\r\n        list: [{\r\n            vod_name: '无数据,防无限请求',\r\n            vod_id: 'no_data',\r\n            vod_remarks: '不要点,会崩的',\r\n            vod_pic: 'https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/404.jpg'\r\n        }],\r\n        total: 1, pagecount: 1, page: 1, limit: 1\r\n    };\r\n    let vod = d.length < 1 ? JSON.stringify(nodata) : JSON.stringify({\r\n        'page': parseInt(cateObj.pg),\r\n        'pagecount': pagecount || 999,\r\n        'limit': 20,\r\n        'total': 999,\r\n        'list': d,\r\n    });\r\n    // print(vod);\r\n    return vod\r\n}\r\n\r\n/**\r\n * 搜索列表数据解析\r\n * @param searchObj\r\n * @returns {string}\r\n */\r\nfunction searchParse(searchObj) {\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    let d = [];\r\n    if (!searchObj.searchUrl) {\r\n        return '{}'\r\n    }\r\n    let p = searchObj.搜索 === '*' && rule.一级 ? rule.一级 : searchObj.搜索;\r\n    if (!p || typeof (p) !== 'string') {\r\n        return '{}'\r\n    }\r\n    p = p.trim();\r\n    let pp = rule.一级 ? rule.一级.split(';') : [];\r\n    let url = searchObj.searchUrl.replaceAll('**', searchObj.wd);\r\n    if (searchObj.pg === 1 && url.includes('[') && url.includes(']') && !url.includes('#')) {\r\n        url = url.split('[')[1].split(']')[0];\r\n    } else if (searchObj.pg > 1 && url.includes('[') && url.includes(']') && !url.includes('#')) {\r\n        url = url.split('[')[0];\r\n    }\r\n\r\n    if (/fypage/.test(url)) {\r\n        if (url.includes('(') && url.includes(')')) {\r\n            let url_rep = url.match(/.*?\\((.*)\\)/)[1];\r\n            // console.log(url_rep);\r\n            let cnt_page = url_rep.replaceAll('fypage', searchObj.pg);\r\n            // console.log(cnt_page);\r\n            let cnt_pg = eval(cnt_page);\r\n            // console.log(cnt_pg);\r\n            url = url.replaceAll(url_rep, cnt_pg).replaceAll('(', '').replaceAll(')', '');\r\n        } else {\r\n            url = url.replaceAll('fypage', searchObj.pg);\r\n        }\r\n    }\r\n\r\n    MY_URL = url;\r\n    console.log(MY_URL);\r\n    // log(searchObj.搜索);\r\n    // setItem('MY_URL',MY_URL);\r\n    if (p.startsWith('js:')) {\r\n        const TYPE = 'search';\r\n        const MY_PAGE = searchObj.pg;\r\n        const KEY = searchObj.wd;\r\n        var input = MY_URL;\r\n        var detailUrl = rule.detailUrl || '';\r\n        eval(p.trim().replace('js:', ''));\r\n        d = VODS;\r\n    } else {\r\n        p = p.split(';');\r\n        if (p.length < 5) {\r\n            return '{}'\r\n        }\r\n        let p0 = getPP(p, 0, pp, 0);\r\n        let _ps = parseTags.getParse(p0);\r\n        _pdfa = _ps.pdfa;\r\n        _pdfh = _ps.pdfh;\r\n        _pd = _ps.pd;\r\n        let is_json = p0.startsWith('json:');\r\n        p0 = p0.replace(/^(jsp:|json:|jq:)/, '');\r\n        // print('1381 p0:'+p0);\r\n        try {\r\n            let req_method = MY_URL.split(';').length > 1 ? MY_URL.split(';')[1].toLowerCase() : 'get';\r\n            let html;\r\n            if (req_method === 'post') {\r\n                let rurls = MY_URL.split(';')[0].split('#')\r\n                let rurl = rurls[0]\r\n                let params = rurls.length > 1 ? rurls[1] : '';\r\n                print(`post=》rurl:${rurl},params:${params}`);\r\n                // let new_dict = {};\r\n                // let new_tmp = params.split('&');\r\n                // new_tmp.forEach(i=>{\r\n                //     new_dict[i.split('=')[0]] = i.split('=')[1];\r\n                // });\r\n                // html = post(rurl,{body:new_dict});\r\n                let _fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n                let postData = {body: params};\r\n                Object.assign(_fetch_params, postData);\r\n                html = post(rurl, _fetch_params);\r\n            } else if (req_method === 'postjson') {\r\n                let rurls = MY_URL.split(';')[0].split('#')\r\n                let rurl = rurls[0]\r\n                let params = rurls.length > 1 ? rurls[1] : '';\r\n                print(`postjson-》rurl:${rurl},params:${params}`);\r\n                try {\r\n                    params = JSON.parse(params);\r\n                } catch (e) {\r\n                    params = '{}'\r\n                }\r\n                let _fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n                let postData = {body: params};\r\n                Object.assign(_fetch_params, postData);\r\n                html = post(rurl, _fetch_params);\r\n            } else {\r\n                html = getHtml(MY_URL);\r\n            }\r\n            if (html) {\r\n                if (/系统安全验证|输入验证码/.test(html)) {\r\n                    let cookie = verifyCode(MY_URL);\r\n                    if (cookie) {\r\n                        console.log(`本次成功过验证,cookie:${cookie}`);\r\n                        setItem(RULE_CK, cookie);\r\n                    } else {\r\n                        console.log(`本次自动过搜索验证失败,cookie:${cookie}`);\r\n                    }\r\n                    // obj.headers['Cookie'] = cookie;\r\n                    html = getHtml(MY_URL);\r\n                }\r\n                if (!html.includes(searchObj.wd)) {\r\n                    console.log('搜索结果源码未包含关键字,疑似搜索失败,正为您打印结果源码');\r\n                    console.log(html);\r\n                }\r\n                if (is_json) {\r\n                    // console.log(html);\r\n                    html = dealJson(html);\r\n                    // console.log(JSON.stringify(html));\r\n                }\r\n                // console.log(html);\r\n                let list = _pdfa(html, p0);\r\n                // print(list.length);\r\n                // print(list);\r\n                let p1 = getPP(p, 1, pp, 1);\r\n                let p2 = getPP(p, 2, pp, 2);\r\n                let p3 = getPP(p, 3, pp, 3);\r\n                let p4 = getPP(p, 4, pp, 4);\r\n                let p5 = getPP(p, 5, pp, 5);\r\n                list.forEach(it => {\r\n                    let links = p4.split('+').map(_p4 => {\r\n                        return !rule.detailUrl ? _pd(it, _p4, MY_URL) : _pdfh(it, _p4)\r\n                    });\r\n                    let link = links.join('$');\r\n                    let content;\r\n                    if (p.length > 5 && p[5]) {\r\n                        content = _pdfh(it, p5);\r\n                    } else {\r\n                        content = '';\r\n                    }\r\n                    let vod_id = link;\r\n                    let vod_name = _pdfh(it, p1).replace(/\\n|\\t/g, '').trim();\r\n                    let vod_pic = _pd(it, p2, MY_URL);\r\n                    if (rule.二级 === '*') {\r\n                        vod_id = vod_id + '@@' + vod_name + '@@' + vod_pic;\r\n                    }\r\n                    let ob = {\r\n                        'vod_id': vod_id,\r\n                        'vod_name': vod_name,\r\n                        'vod_pic': vod_pic,\r\n                        'vod_remarks': _pdfh(it, p3).replace(/\\n|\\t/g, '').trim(),\r\n                        'vod_content': content.replace(/\\n|\\t/g, '').trim(),\r\n                    };\r\n                    d.push(ob);\r\n                });\r\n\r\n            }\r\n        } catch (e) {\r\n            print('搜索发生错误:' + e.message);\r\n            return '{}'\r\n        }\r\n    }\r\n    if (rule.图片替换) {\r\n        if (rule.图片替换.startsWith('js:')) {\r\n            d.forEach(it => {\r\n                try {\r\n                    var input = it.vod_pic;\r\n                    eval(rule.图片替换.trim().replace('js:', ''));\r\n                    it.vod_pic = input;\r\n                } catch (e) {\r\n                    log(`图片:${it.vod_pic}替换错误:${e.message}`);\r\n                }\r\n            });\r\n        } else if (rule.图片替换.includes('=>')) {\r\n            let replace_from = rule.图片替换.split('=>')[0];\r\n            let replace_to = rule.图片替换.split('=>')[1];\r\n            d.forEach(it => {\r\n                if (it.vod_pic && it.vod_pic.startsWith('http')) {\r\n                    it.vod_pic = it.vod_pic.replace(replace_from, replace_to);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (rule.图片来源) {\r\n        d.forEach(it => {\r\n            if (it.vod_pic && it.vod_pic.startsWith('http')) {\r\n                it.vod_pic = it.vod_pic + rule.图片来源;\r\n            }\r\n        });\r\n    }\r\n    // print(d);\r\n    return JSON.stringify({\r\n        'page': parseInt(searchObj.pg),\r\n        'pagecount': 10,\r\n        'limit': 20,\r\n        'total': 100,\r\n        'list': d,\r\n    });\r\n}\r\n\r\n/**\r\n * 二级详情页数据解析\r\n * @param detailObj\r\n * @returns {string}\r\n */\r\nfunction detailParse(detailObj) {\r\n    let t1 = (new Date()).getTime();\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    let orId = detailObj.orId;\r\n    let vod_name = '片名';\r\n    let vod_pic = '';\r\n    let vod_id = orId;\r\n    if (rule.二级 === '*') {\r\n        // vod_id = orId.split('@@')[0]; // 千万不能分割\r\n        let extra = orId.split('@@');\r\n        vod_name = extra.length > 1 ? extra[1] : vod_name;\r\n        vod_pic = extra.length > 2 ? extra[2] : vod_pic;\r\n    }\r\n    // print(vod_pic);\r\n    let vod = {\r\n        vod_id: vod_id, //\"id\",\r\n        vod_name: vod_name,\r\n        vod_pic: vod_pic,\r\n        type_name: \"类型\",\r\n        vod_year: \"年份\",\r\n        vod_area: \"地区\",\r\n        vod_remarks: \"更新信息\",\r\n        vod_actor: \"主演\",\r\n        vod_director: \"导演\",\r\n        vod_content: \"简介\"\r\n    };\r\n    let p = detailObj.二级;\r\n    let url = detailObj.url;\r\n    let detailUrl = detailObj.detailUrl;\r\n    let fyclass = detailObj.fyclass;\r\n    let tab_exclude = detailObj.tab_exclude;\r\n    let html = detailObj.html || '';\r\n    MY_URL = url;\r\n    if (detailObj.二级访问前) {\r\n        try {\r\n            print(`尝试在二级访问前执行代码:${detailObj.二级访问前}`);\r\n            eval(detailObj.二级访问前.trim().replace('js:', ''));\r\n        } catch (e) {\r\n            print(`二级访问前执行代码出现错误:${e.message}`)\r\n        }\r\n    }\r\n    // console.log(MY_URL);\r\n    // setItem('MY_URL',MY_URL);\r\n    if (p === '*') {\r\n        vod.vod_play_from = '道长在线';\r\n        vod.vod_remarks = detailUrl;\r\n        vod.vod_actor = '没有二级,只有一级链接直接嗅探播放';\r\n        vod.vod_content = MY_URL;\r\n        vod.vod_play_url = '嗅探播放$' + MY_URL.split('@@')[0];\r\n    } else if (typeof (p) === 'string' && p.trim().startsWith('js:')) {\r\n        const TYPE = 'detail';\r\n        var input = MY_URL;\r\n        var play_url = '';\r\n        eval(p.trim().replace('js:', ''));\r\n        vod = VOD;\r\n        console.log(JSON.stringify(vod));\r\n    } else if (p && typeof (p) === 'object') {\r\n        let tt1 = (new Date()).getTime();\r\n        if (!html) {\r\n            html = getHtml(MY_URL);\r\n        }\r\n        print(`二级${MY_URL}仅获取源码耗时:${(new Date()).getTime() - tt1}毫秒`);\r\n        let _ps;\r\n        if (p.is_json) {\r\n            print('二级是json');\r\n            _ps = parseTags.json;\r\n            html = dealJson(html);\r\n        } else if (p.is_jsp) {\r\n            print('二级是jsp');\r\n            _ps = parseTags.jsp;\r\n        } else if (p.is_jq) {\r\n            print('二级是jq');\r\n            _ps = parseTags.jq;\r\n        } else {\r\n            print('二级默认jq');\r\n            _ps = parseTags.jq;\r\n            // print('二级默认jsp');\r\n            // _ps = parseTags.jsp;\r\n        }\r\n        let tt2 = (new Date()).getTime();\r\n        print(`二级${MY_URL}获取并装载源码耗时:${tt2 - tt1}毫秒`);\r\n        _pdfa = _ps.pdfa;\r\n        _pdfh = _ps.pdfh;\r\n        _pd = _ps.pd;\r\n        if (p.title) {\r\n            let p1 = p.title.split(';');\r\n            vod.vod_name = _pdfh(html, p1[0]).replace(/\\n|\\t/g, '').trim();\r\n            let type_name = p1.length > 1 ? _pdfh(html, p1[1]).replace(/\\n|\\t/g, '').replace(/ /g, '').trim() : '';\r\n            vod.type_name = type_name || vod.type_name;\r\n        }\r\n        if (p.desc) {\r\n            try {\r\n                let p1 = p.desc.split(';');\r\n                vod.vod_remarks = _pdfh(html, p1[0]).replace(/\\n|\\t/g, '').trim();\r\n                vod.vod_year = p1.length > 1 ? _pdfh(html, p1[1]).replace(/\\n|\\t/g, '').trim() : '';\r\n                vod.vod_area = p1.length > 2 ? _pdfh(html, p1[2]).replace(/\\n|\\t/g, '').trim() : '';\r\n                // vod.vod_actor = p1.length > 3 ? _pdfh(html, p1[3]).replaceAll('\\n', ' ').trim():'';\r\n                vod.vod_actor = p1.length > 3 ? _pdfh(html, p1[3]).replace(/\\n|\\t/g, '').trim() : '';\r\n                vod.vod_director = p1.length > 4 ? _pdfh(html, p1[4]).replace(/\\n|\\t/g, '').trim() : '';\r\n            } catch (e) {\r\n\r\n            }\r\n        }\r\n        if (p.content) {\r\n            try {\r\n                let p1 = p.content.split(';');\r\n                vod.vod_content = _pdfh(html, p1[0]).replace(/\\n|\\t/g, '').trim();\r\n            } catch (e) {\r\n            }\r\n        }\r\n        if (p.img) {\r\n            try {\r\n                let p1 = p.img.split(';');\r\n                vod.vod_pic = _pd(html, p1[0], MY_URL);\r\n            } catch (e) {\r\n            }\r\n        }\r\n\r\n        let vod_play_from = '$$$';\r\n        let playFrom = [];\r\n        if (p.重定向 && p.重定向.startsWith('js:')) {\r\n            print('开始执行重定向代码:' + p.重定向);\r\n            html = eval(p.重定向.replace('js:', ''));\r\n        }\r\n\r\n// console.log(2);\r\n        if (p.tabs) {\r\n            if (p.tabs.startsWith('js:')) {\r\n                print('开始执行tabs代码:' + p.tabs);\r\n                var input = MY_URL;\r\n                eval(p.tabs.replace('js:', ''));\r\n                playFrom = TABS;\r\n            } else {\r\n                let p_tab = p.tabs.split(';')[0];\r\n                // console.log(p_tab);\r\n                let vHeader = _pdfa(html, p_tab);\r\n                console.log(vHeader.length);\r\n                let tab_text = p.tab_text || 'body&&Text';\r\n                // print('tab_text:'+tab_text);\r\n                let new_map = {};\r\n                for (let v of vHeader) {\r\n                    let v_title = _pdfh(v, tab_text).trim();\r\n                    if (!v_title) {\r\n                        v_title = '线路空'\r\n                    }\r\n                    console.log(v_title);\r\n                    if (tab_exclude && (new RegExp(tab_exclude)).test(v_title)) {\r\n                        continue;\r\n                    }\r\n                    if (!new_map.hasOwnProperty(v_title)) {\r\n                        new_map[v_title] = 1;\r\n                    } else {\r\n                        new_map[v_title] += 1;\r\n                    }\r\n                    if (new_map[v_title] > 1) {\r\n                        v_title += Number(new_map[v_title] - 1);\r\n                    }\r\n                    playFrom.push(v_title);\r\n                }\r\n            }\r\n            console.log(JSON.stringify(playFrom));\r\n        } else {\r\n            playFrom = ['道长在线']\r\n        }\r\n        vod.vod_play_from = playFrom.join(vod_play_from);\r\n\r\n// console.log(3);\r\n        let vod_play_url = '$$$';\r\n        let vod_tab_list = [];\r\n        if (p.lists) {\r\n            if (p.lists.startsWith('js:')) {\r\n                print('开始执行lists代码:' + p.lists);\r\n                try {\r\n                    var input = MY_URL;\r\n                    var play_url = '';\r\n                    eval(p.lists.replace('js:', ''));\r\n                    for (let i in LISTS) {\r\n                        if (LISTS.hasOwnProperty(i)) {\r\n                            // print(i);\r\n                            try {\r\n                                LISTS[i] = LISTS[i].map(it => it.split('$').slice(0, 2).join('$'));\r\n                            } catch (e) {\r\n                                print('格式化LISTS发生错误:' + e.message);\r\n                            }\r\n                        }\r\n                    }\r\n                    vod_play_url = LISTS.map(it => it.join('#')).join(vod_play_url);\r\n                } catch (e) {\r\n                    print('js执行lists: 发生错误:' + e.message);\r\n                }\r\n\r\n            } else {\r\n                let list_text = p.list_text || 'body&&Text';\r\n                let list_url = p.list_url || 'a&&href';\r\n                let list_url_prefix = p.list_url_prefix || '';\r\n                // print('list_text:'+list_text);\r\n                // print('list_url:'+list_url);\r\n                // print('list_parse:'+p.lists);\r\n                let is_tab_js = p.tabs.trim().startsWith('js:');\r\n                for (let i = 0; i < playFrom.length; i++) {\r\n                    let tab_name = playFrom[i];\r\n                    let tab_ext = p.tabs.split(';').length > 1 && !is_tab_js ? p.tabs.split(';')[1] : '';\r\n                    let p1 = p.lists.replaceAll('#idv', tab_name).replaceAll('#id', i);\r\n                    tab_ext = tab_ext.replaceAll('#idv', tab_name).replaceAll('#id', i);\r\n                    let tabName = tab_ext ? _pdfh(html, tab_ext) : tab_name;\r\n                    console.log(tabName);\r\n                    // print('tab_ext:'+tab_ext);\r\n                    let new_vod_list = [];\r\n                    let tt1 = (new Date()).getTime();\r\n                    // print('pdfl:'+typeof (pdfl));\r\n                    if (typeof (pdfl) === 'function') {\r\n                        new_vod_list = pdfl(html, p1, list_text, list_url, MY_URL);\r\n                        if (list_url_prefix) {\r\n                            new_vod_list = new_vod_list.map(it => it.split('$')[0] + '$' + list_url_prefix + it.split('$').slice(1).join('$'));\r\n                        }\r\n                    } else {\r\n                        let vodList = [];\r\n                        try {\r\n                            vodList = _pdfa(html, p1);\r\n                            console.log('len(vodList):' + vodList.length);\r\n                        } catch (e) {\r\n                            // console.log(e.message);\r\n                        }\r\n                        for (let i = 0; i < vodList.length; i++) {\r\n                            let it = vodList[i];\r\n                            new_vod_list.push(_pdfh(it, list_text).trim() + '$' + list_url_prefix + _pd(it, list_url, MY_URL));\r\n                        }\r\n                    }\r\n                    if (new_vod_list.length > 0) {\r\n                        new_vod_list = forceOrder(new_vod_list, '', x => x.split('$')[0]);\r\n                        console.log(`drpy影响性能代码共计列表数循环次数:${new_vod_list.length},耗时:${(new Date()).getTime() - tt1}毫秒`);\r\n                    }\r\n                    // print(new_vod_list);\r\n                    let vlist = new_vod_list.join('#');\r\n                    vod_tab_list.push(vlist);\r\n                }\r\n                vod_play_url = vod_tab_list.join(vod_play_url);\r\n            }\r\n        }\r\n        vod.vod_play_url = vod_play_url;\r\n    }\r\n    if (rule.图片替换 && rule.图片替换.includes('=>')) {\r\n        let replace_from = rule.图片替换.split('=>')[0];\r\n        let replace_to = rule.图片替换.split('=>')[1];\r\n        vod.vod_pic = vod.vod_pic.replace(replace_from, replace_to);\r\n    }\r\n    if (rule.图片来源 && vod.vod_pic && vod.vod_pic.startsWith('http')) {\r\n        vod.vod_pic = vod.vod_pic + rule.图片来源;\r\n    }\r\n    if (!vod.vod_id || (vod_id.includes('$') && vod.vod_id !== vod_id)) {\r\n        vod.vod_id = vod_id;\r\n    }\r\n    let t2 = (new Date()).getTime();\r\n    console.log(`加载二级界面${MY_URL}耗时:${t2 - t1}毫秒`);\r\n    // print(vod);\r\n    try {\r\n        vod = vodDeal(vod);\r\n    } catch (e) {\r\n        console.log(`vodDeal发生错误:${e.message}`);\r\n    }\r\n    // print(vod);\r\n    return JSON.stringify({\r\n        list: [vod]\r\n    })\r\n}\r\n\r\n/**\r\n * 获取二级待返回的播放线路没处理时的索引关系\r\n * @param vod\r\n * @returns {{}}\r\n */\r\nfunction get_tab_index(vod) {\r\n    let obj = {};\r\n    vod.vod_play_from.split('$$$').forEach((it, index) => {\r\n        obj[it] = index;\r\n    });\r\n    return obj\r\n}\r\n\r\n/**\r\n * 处理待返回的vod数据|线路去除,排序,重命名\r\n * @param vod\r\n * @returns {*}\r\n */\r\nfunction vodDeal(vod) {\r\n    let vod_play_from = vod.vod_play_from.split('$$$');\r\n    let vod_play_url = vod.vod_play_url.split('$$$');\r\n\r\n    // 移除指定线路后的列表\r\n    let tab_removed_list = vod_play_from;\r\n    // 排序后的线路列表\r\n    let tab_ordered_list = vod_play_from;\r\n    // 线路重命名后的列表\r\n    let tab_renamed_list = vod_play_from;\r\n    // 定义实际要返回线路\r\n    let tab_list = vod_play_from;\r\n    // 选集列表根据线路排序\r\n    let play_ordered_list = vod_play_url;\r\n\r\n    // 判断有移除线路或者线路排序\r\n    if ((rule.tab_remove && rule.tab_remove.length > 0) || (rule.tab_order && rule.tab_order.length > 0)) {\r\n        // 获取原来线路的索引下标\r\n        let tab_index_dict = get_tab_index(vod);\r\n\r\n        if (rule.tab_remove && rule.tab_remove.length > 0) {\r\n            tab_removed_list = vod_play_from.filter(it => !rule.tab_remove.includes(it));\r\n            tab_list = tab_removed_list;\r\n        }\r\n\r\n        if (rule.tab_order && rule.tab_order.length > 0) {\r\n            let tab_order = rule.tab_order;\r\n            tab_ordered_list = tab_removed_list.sort((a, b) => {\r\n                return (tab_order.indexOf(a) === -1 ? 9999 : tab_order.indexOf(a)) - (tab_order.indexOf(b) === -1 ? 9999 : tab_order.indexOf(b))\r\n            });\r\n            tab_list = tab_ordered_list;\r\n        }\r\n        play_ordered_list = tab_list.map(it => vod_play_url[tab_index_dict[it]]);\r\n    }\r\n\r\n    if (rule.tab_rename && typeof (rule.tab_rename) === 'object' & Object.keys(rule.tab_rename).length > 0) {\r\n        tab_renamed_list = tab_list.map(it => rule.tab_rename[it] || it);\r\n        tab_list = tab_renamed_list;\r\n    }\r\n    vod.vod_play_from = tab_list.join('$$$');\r\n    vod.vod_play_url = play_ordered_list.join('$$$');\r\n    return vod\r\n}\r\n\r\n/**\r\n * 判断是否需要解析\r\n * @param url\r\n * @returns {number|number}\r\n */\r\nfunction tellIsJx(url) {\r\n    try {\r\n        let is_vip = !/\\.(m3u8|mp4|m4a)$/.test(url.split('?')[0]) && 是否正版(url);\r\n        return is_vip ? 1 : 0\r\n    } catch (e) {\r\n        return 1\r\n    }\r\n}\r\n\r\n/**\r\n * 选集播放点击事件解析\r\n * @param playObj\r\n * @returns {string}\r\n */\r\nfunction playParse(playObj) {\r\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\r\n    MY_URL = playObj.url;\r\n    var MY_FLAG = playObj.flag;\r\n    if (!/http/.test(MY_URL)) {\r\n        try {\r\n            MY_URL = base64Decode(MY_URL);\r\n        } catch (e) {\r\n        }\r\n    }\r\n    MY_URL = decodeURIComponent(MY_URL);\r\n    var input = MY_URL;//注入给免嗅js\r\n    var flag = MY_FLAG;//注入播放线路名称给免嗅js\r\n    let common_play = {\r\n        parse: SPECIAL_URL.test(input) || /^(push:)/.test(input) ? 0 : 1,\r\n        url: input,\r\n        flag: flag,\r\n        // url:urlencode(input),\r\n        jx: tellIsJx(input)\r\n    };\r\n    let lazy_play;\r\n    if (!rule.play_parse || !rule.lazy) {\r\n        lazy_play = common_play;\r\n    } else if (rule.play_parse && rule.lazy && typeof (rule.lazy) === 'string') {\r\n        try {\r\n            let lazy_code = rule.lazy.trim();\r\n            if (lazy_code.startsWith('js:')) {\r\n                lazy_code = lazy_code.replace('js:', '').trim();\r\n            }\r\n            print('开始执行js免嗅=>' + lazy_code);\r\n            eval(lazy_code);\r\n            lazy_play = typeof (input) === 'object' ? input : {\r\n                parse: SPECIAL_URL.test(input) || /^(push:)/.test(input) ? 0 : 1,\r\n                jx: tellIsJx(input),\r\n                url: input\r\n            };\r\n        } catch (e) {\r\n            print('js免嗅错误:' + e.message);\r\n            lazy_play = common_play;\r\n        }\r\n    } else {\r\n        lazy_play = common_play;\r\n    }\r\n    // print('play_json:'+typeof(rule.play_json));\r\n    // console.log(Array.isArray(rule.play_json));\r\n    if (Array.isArray(rule.play_json) && rule.play_json.length > 0) { // 数组情况判断长度大于0\r\n        let web_url = lazy_play.url;\r\n        for (let pjson of rule.play_json) {\r\n            if (pjson.re && (pjson.re === '*' || web_url.match(new RegExp(pjson.re)))) {\r\n                if (pjson.json && typeof (pjson.json) === 'object') {\r\n                    let base_json = pjson.json;\r\n                    // print('开始合并:');\r\n                    // print(base_json);\r\n                    lazy_play = Object.assign(lazy_play, base_json);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else if (rule.play_json && !Array.isArray(rule.play_json)) { // 其他情况 非[] 判断true/false\r\n        let base_json = {\r\n            jx: 1,\r\n            parse: 1,\r\n        };\r\n        lazy_play = Object.assign(lazy_play, base_json);\r\n    } else if (!rule.play_json) { // 不解析传0\r\n        let base_json = {\r\n            jx: 0,\r\n            parse: 1,\r\n        };\r\n        lazy_play = Object.assign(lazy_play, base_json);\r\n    }\r\n    console.log(JSON.stringify(lazy_play));\r\n    return JSON.stringify(lazy_play);\r\n}\r\n\r\n/**\r\n * 本地代理解析规则\r\n * @param params\r\n */\r\nfunction proxyParse(proxyObj) {\r\n    var input = proxyObj.params;\r\n    if (proxyObj.proxy_rule) {\r\n        log('准备执行本地代理规则:\\n' + proxyObj.proxy_rule);\r\n        try {\r\n            eval(proxyObj.proxy_rule);\r\n            if (input && input !== proxyObj.params && Array.isArray(input) && input.length >= 3) {\r\n                return input\r\n            } else {\r\n                return [404, 'text/plain', 'Not Found']\r\n            }\r\n        } catch (e) {\r\n            return [500, 'text/plain', '代理规则错误:' + e.message]\r\n        }\r\n\r\n    } else {\r\n        return [404, 'text/plain', 'Not Found']\r\n    }\r\n}\r\n\r\n/**\r\n * 辅助嗅探解析规则\r\n * @param isVideoObj\r\n * @returns {boolean}\r\n */\r\nfunction isVideoParse(isVideoObj) {\r\n    var input = isVideoObj.url;\r\n    if (!isVideoObj.t) { // t为假代表默认传的正则字符串\r\n        let re_matcher = new RegExp(isVideoObj.isVideo, 'i');  // /g匹配多个,/i不区分大小写,/m匹配多行\r\n        return re_matcher.test(input);\r\n    } else {\r\n        // 执行js\r\n        try {\r\n            eval(isVideoObj.isVideo);\r\n            if (typeof (input) === 'boolean') {\r\n                return input\r\n            } else {\r\n                return false\r\n            }\r\n        } catch (e) {\r\n            log('执行嗅探规则发生错误:' + e.message);\r\n            return false\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 获取加密前的原始的js源文本\r\n * @param js_code\r\n */\r\nfunction getOriginalJs(js_code) {\r\n    let current_match = /var rule|[\\u4E00-\\u9FA5]+|function|let |var |const |\\(|\\)|\"|'/;\r\n    if (current_match.test(js_code)) {\r\n        return js_code\r\n    }\r\n    let rsa_private_key = 'MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqin/jUpqM6+fgYP/oMqj9zcdHMM0mEZXLeTyixIJWP53lzJV2N2E3OP6BBpUmq2O1a9aLnTIbADBaTulTNiOnVGoNG58umBnupnbmmF8iARbDp2mTzdMMeEgLdrfXS6Y3VvazKYALP8EhEQykQVarexR78vRq7ltY3quXx7cgI0ROfZz5Sw3UOLQJ+VoWmwIxu9AMEZLVzFDQN93hzuzs3tNyHK6xspBGB7zGbwCg+TKi0JeqPDrXxYUpAz1cQ/MO+Da0WgvkXnvrry8NQROHejdLVOAslgr6vYthH9bKbsGyNY3H+P12kcxo9RAcVveONnZbcMyxjtF5dWblaernAgMBAAECggEAGdEHlSEPFmAr5PKqKrtoi6tYDHXdyHKHC5tZy4YV+Pp+a6gxxAiUJejx1hRqBcWSPYeKne35BM9dgn5JofgjI5SKzVsuGL6bxl3ayAOu+xXRHWM9f0t8NHoM5fdd0zC3g88dX3fb01geY2QSVtcxSJpEOpNH3twgZe6naT2pgiq1S4okpkpldJPo5GYWGKMCHSLnKGyhwS76gF8bTPLoay9Jxk70uv6BDUMlA4ICENjmsYtd3oirWwLwYMEJbSFMlyJvB7hjOjR/4RpT4FPnlSsIpuRtkCYXD4jdhxGlvpXREw97UF2wwnEUnfgiZJ2FT/MWmvGGoaV/CfboLsLZuQKBgQDTNZdJrs8dbijynHZuuRwvXvwC03GDpEJO6c1tbZ1s9wjRyOZjBbQFRjDgFeWs9/T1aNBLUrgsQL9c9nzgUziXjr1Nmu52I0Mwxi13Km/q3mT+aQfdgNdu6ojsI5apQQHnN/9yMhF6sNHg63YOpH+b+1bGRCtr1XubuLlumKKscwKBgQDOtQ2lQjMtwsqJmyiyRLiUOChtvQ5XI7B2mhKCGi8kZ+WEAbNQcmThPesVzW+puER6D4Ar4hgsh9gCeuTaOzbRfZ+RLn3Aksu2WJEzfs6UrGvm6DU1INn0z/tPYRAwPX7sxoZZGxqML/z+/yQdf2DREoPdClcDa2Lmf1KpHdB+vQKBgBXFCVHz7a8n4pqXG/HvrIMJdEpKRwH9lUQS/zSPPtGzaLpOzchZFyQQBwuh1imM6Te+VPHeldMh3VeUpGxux39/m+160adlnRBS7O7CdgSsZZZ/dusS06HAFNraFDZf1/VgJTk9BeYygX+AZYu+0tReBKSs9BjKSVJUqPBIVUQXAoGBAJcZ7J6oVMcXxHxwqoAeEhtvLcaCU9BJK36XQ/5M67ceJ72mjJC6/plUbNukMAMNyyi62gO6I9exearecRpB/OGIhjNXm99Ar59dAM9228X8gGfryLFMkWcO/fNZzb6lxXmJ6b2LPY3KqpMwqRLTAU/zy+ax30eFoWdDHYa4X6e1AoGAfa8asVGOJ8GL9dlWufEeFkDEDKO9ww5GdnpN+wqLwePWqeJhWCHad7bge6SnlylJp5aZXl1+YaBTtOskC4Whq9TP2J+dNIgxsaF5EFZQJr8Xv+lY9lu0CruYOh9nTNF9x3nubxJgaSid/7yRPfAGnsJRiknB5bsrCvgsFQFjJVs=';\r\n    let decode_content = '';\r\n\r\n    function aes_decrypt(data) {\r\n        let key = CryptoJS.enc.Hex.parse(\"686A64686E780A0A0A0A0A0A0A0A0A0A\");\r\n        let iv = CryptoJS.enc.Hex.parse(\"647A797964730A0A0A0A0A0A0A0A0A0A\");\r\n        let encrypted = CryptoJS.AES.decrypt({\r\n            ciphertext: CryptoJS.enc.Base64.parse(data)\r\n        }, key, {\r\n            iv: iv,\r\n            mode: CryptoJS.mode.CBC,\r\n            padding: CryptoJS.pad.Pkcs7\r\n        }).toString(CryptoJS.enc.Utf8);\r\n        return encrypted;\r\n    }\r\n\r\n    let error_log = false;\r\n\r\n    function logger(text) {\r\n        if (error_log) {\r\n            log(text);\r\n        }\r\n    }\r\n\r\n    let decode_funcs = [\r\n        (text) => {\r\n            try {\r\n                return ungzip(text)\r\n            } catch (e) {\r\n                logger('非gzip加密');\r\n                return ''\r\n            }\r\n        },\r\n        (text) => {\r\n            try {\r\n                return base64Decode(text)\r\n            } catch (e) {\r\n                logger('非b64加密');\r\n                return ''\r\n            }\r\n        },\r\n        (text) => {\r\n            try {\r\n                return aes_decrypt(text)\r\n            } catch (e) {\r\n                logger('非aes加密');\r\n                return ''\r\n            }\r\n        },\r\n        (text) => {\r\n            try {\r\n                return RSA.decode(text, rsa_private_key, null)\r\n            } catch (e) {\r\n                logger('非rsa加密');\r\n                return ''\r\n            }\r\n        },\r\n        // (text)=>{try {return NODERSA.decryptRSAWithPrivateKey(text, RSA.getPrivateKey(rsa_private_key).replace(/RSA /g,''), {options: {environment: \"browser\", encryptionScheme: 'pkcs1',b:'1024'}});} catch (e) {log(e.message);return ''}},\r\n    ]\r\n    let func_index = 0\r\n    while (!current_match.test(decode_content)) {\r\n        decode_content = decode_funcs[func_index](js_code);\r\n        func_index++;\r\n        if (func_index >= decode_funcs.length) {\r\n            break;\r\n        }\r\n    }\r\n    return decode_content\r\n}\r\n\r\n/**\r\n * 执行main函数\r\n * 示例  function main(text){return gzip(text)}\r\n * @param main_func_code\r\n * @param arg\r\n */\r\nfunction runMain(main_func_code, arg) {\r\n    let mainFunc = function () {\r\n        return ''\r\n    };\r\n    try {\r\n        eval(main_func_code + '\\nmainFunc=main;');\r\n        return mainFunc(arg);\r\n    } catch (e) {\r\n        log(`执行main_funct发生了错误:${e.message}`);\r\n        return ''\r\n    }\r\n}\r\n\r\n/**\r\n * js源预处理特定返回对象中的函数\r\n * @param ext\r\n */\r\nfunction init(ext) {\r\n    console.log('init');\r\n    // init前重置rule和fetch_params\r\n    rule = {};\r\n    rule_fetch_params = {};\r\n    fetch_params = null;\r\n    try {\r\n        // make shared jsContext happy muban不能import,不然会造成换源继承后变量被篡改\r\n        // if (typeof (globalThis.mubanJs) === 'undefined') {\r\n        //     let mubanJs = request('https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/js/模板.js', { 'User-Agent': MOBILE_UA });\r\n        //     mubanJs = mubanJs.replace('export default', '(function() {return muban;}()) // export default');\r\n        //     // console.log(mubanJs);\r\n        //     globalThis.mubanJs = mubanJs;\r\n        // }\r\n        // let muban = eval(globalThis.mubanJs);\r\n\r\n        let muban = 模板.getMubans();\r\n        // print(typeof (muban));\r\n        // print(muban);\r\n        if (typeof ext == 'object') {\r\n            rule = ext;\r\n        } else if (typeof ext == 'string') {\r\n            if (ext.startsWith('http') || ext.startsWith('file://')) {\r\n                let query = getQuery(ext); // 获取链接传参\r\n                let js = request(ext, {'method': 'GET'});\r\n                if (js) {\r\n                    js = getOriginalJs(js);\r\n                    // eval(js.replace('var rule', 'rule'));\r\n                    // eval(\"(function(){'use strict';\"+js.replace('var rule', 'rule')+\"})()\");\r\n                    eval(\"(function(){\" + js.replace('var rule', 'rule') + \"})()\");\r\n                }\r\n                if (query.type === 'url' && query.params) { // 指定type是链接并且传了params支持简写如 ./xx.json\r\n                    rule.params = urljoin(ext, query.params);\r\n                } else if (query.params) { // 没指定type直接视为字符串\r\n                    rule.params = query.params;\r\n                }\r\n            } else {\r\n                ext = getOriginalJs(ext);\r\n                // eval(ext.replace('var rule', 'rule'));\r\n                // eval(\"(function(){'use strict';\"+ext.replace('var rule', 'rule')+\"})()\");\r\n                eval(\"(function(){\" + ext.replace('var rule', 'rule') + \"})()\");\r\n            }\r\n        } else {\r\n            console.log(`规则加载失败,不支持的规则类型:${typeof ext}`);\r\n            return\r\n        }\r\n        rule.host = (rule.host || '').rstrip('/');\r\n        HOST = rule.host;\r\n        if (rule.hostJs) {\r\n            console.log(`检测到hostJs,准备执行...`);\r\n            try {\r\n                eval(rule.hostJs);\r\n                rule.host = HOST.rstrip('/');\r\n            } catch (e) {\r\n                console.log(`执行${rule.hostJs}获取host发生错误:` + e.message);\r\n            }\r\n        }\r\n        if (rule['模板'] === '自动') {\r\n            try {\r\n                let host_headers = rule['headers'] || {};\r\n                let host_html = getCode(HOST, {headers: host_headers});\r\n                let match_muban = '';\r\n                let muban_keys = Object.keys(muban).filter(it => !/默认|短视2/.test(it));\r\n                for (let muban_key of muban_keys) {\r\n                    try {\r\n                        let host_data = JSON.parse(home({}, host_html, muban[muban_key].class_parse));\r\n                        if (host_data.class && host_data.class.length > 0) {\r\n                            match_muban = muban_key;\r\n                            console.log(`自动匹配模板:【${muban_key}】`);\r\n                            break;\r\n                        }\r\n                    } catch (e) {\r\n                        // @ts-ignore\r\n                        console.log(`自动匹配模板:【${muban_key}】错误:${e.message}`);\r\n                    }\r\n                }\r\n                if (match_muban) {\r\n                    muban['自动'] = muban[match_muban];\r\n                    if (rule['模板修改'] && rule['模板修改'].startsWith('js:')) {\r\n                        // 模板修改:$js.toString(()=>{ muban.自动.class_parse = ''});\r\n                        eval(rule['模板修改'].replace('js:', '').trim());\r\n                    }\r\n                } else {\r\n                    delete rule['模板']\r\n                }\r\n            } catch (e) {\r\n                delete rule['模板']\r\n            }\r\n        }\r\n        if (rule.模板 && muban.hasOwnProperty(rule.模板)) {\r\n            print('继承模板:' + rule.模板);\r\n            rule = Object.assign(muban[rule.模板], rule);\r\n        }\r\n        /** 处理一下 rule规则关键字段没传递的情况 **/\r\n        let rule_cate_excludes = (rule.cate_exclude || '').split('|').filter(it => it.trim());\r\n        let rule_tab_excludes = (rule.tab_exclude || '').split('|').filter(it => it.trim());\r\n        rule_cate_excludes = rule_cate_excludes.concat(CATE_EXCLUDE.split('|').filter(it => it.trim()));\r\n        rule_tab_excludes = rule_tab_excludes.concat(TAB_EXCLUDE.split('|').filter(it => it.trim()));\r\n\r\n        rule.cate_exclude = rule_cate_excludes.join('|');\r\n        rule.tab_exclude = rule_tab_excludes.join('|');\r\n\r\n        rule.类型 = rule.类型 || '影视'; // 影视|听书|漫画|小说\r\n        rule.url = rule.url || '';\r\n        rule.double = rule.double || false;\r\n        rule.homeUrl = rule.homeUrl || '';\r\n        rule.detailUrl = rule.detailUrl || '';\r\n        rule.searchUrl = rule.searchUrl || '';\r\n        rule.homeUrl = rule.host && rule.homeUrl ? urljoin(rule.host, rule.homeUrl) : (rule.homeUrl || rule.host);\r\n        rule.homeUrl = cheerio.jinja2(rule.homeUrl, {rule: rule});\r\n        rule.detailUrl = rule.host && rule.detailUrl ? urljoin(rule.host, rule.detailUrl) : rule.detailUrl;\r\n        rule.二级访问前 = rule.二级访问前 || '';\r\n        if (rule.url.includes('[') && rule.url.includes(']')) {\r\n            let u1 = rule.url.split('[')[0]\r\n            let u2 = rule.url.split('[')[1].split(']')[0]\r\n            rule.url = rule.host && rule.url ? urljoin(rule.host, u1) + '[' + urljoin(rule.host, u2) + ']' : rule.url;\r\n        } else {\r\n            rule.url = rule.host && rule.url ? urljoin(rule.host, rule.url) : rule.url;\r\n        }\r\n        if (rule.searchUrl.includes('[') && rule.searchUrl.includes(']') && !rule.searchUrl.includes('#')) {\r\n            let u1 = rule.searchUrl.split('[')[0]\r\n            let u2 = rule.searchUrl.split('[')[1].split(']')[0]\r\n            rule.searchUrl = rule.host && rule.searchUrl ? urljoin(rule.host, u1) + '[' + urljoin(rule.host, u2) + ']' : rule.searchUrl;\r\n        } else {\r\n            rule.searchUrl = rule.host && rule.searchUrl ? urljoin(rule.host, rule.searchUrl) : rule.searchUrl;\r\n        }\r\n\r\n        rule.timeout = rule.timeout || 5000;\r\n        rule.encoding = rule.编码 || rule.encoding || 'utf-8';\r\n        rule.search_encoding = rule.搜索编码 || rule.search_encoding || '';\r\n        rule.图片来源 = rule.图片来源 || '';\r\n        rule.图片替换 = rule.图片替换 || '';\r\n        rule.play_json = rule.hasOwnProperty('play_json') ? rule.play_json : [];\r\n        rule.pagecount = rule.hasOwnProperty('pagecount') ? rule.pagecount : {};\r\n        rule.proxy_rule = rule.hasOwnProperty('proxy_rule') ? rule.proxy_rule : '';\r\n        if (!rule.hasOwnProperty('sniffer')) { // 默认关闭辅助嗅探\r\n            rule.sniffer = false;\r\n        }\r\n        rule.sniffer = rule.hasOwnProperty('sniffer') ? rule.sniffer : '';\r\n        rule.sniffer = !!(rule.sniffer && rule.sniffer !== '0' && rule.sniffer !== 'false');\r\n\r\n        rule.isVideo = rule.hasOwnProperty('isVideo') ? rule.isVideo : '';\r\n        if (rule.sniffer && !rule.isVideo) { // 默认辅助嗅探自动增强嗅探规则\r\n            rule.isVideo = 'http((?!http).){12,}?\\\\.(m3u8|mp4|flv|avi|mkv|rm|wmv|mpg|m4a|mp3)\\\\?.*|http((?!http).){12,}\\\\.(m3u8|mp4|flv|avi|mkv|rm|wmv|mpg|m4a|mp3)|http((?!http).)*?video/tos*|http((?!http).)*?obj/tos*';\r\n        }\r\n\r\n        rule.tab_remove = rule.hasOwnProperty('tab_remove') ? rule.tab_remove : [];\r\n        rule.tab_order = rule.hasOwnProperty('tab_order') ? rule.tab_order : [];\r\n        rule.tab_rename = rule.hasOwnProperty('tab_rename') ? rule.tab_rename : {};\r\n\r\n        if (rule.headers && typeof (rule.headers) === 'object') {\r\n            try {\r\n                let header_keys = Object.keys(rule.headers);\r\n                for (let k of header_keys) {\r\n                    if (k.toLowerCase() === 'user-agent') {\r\n                        let v = rule.headers[k];\r\n                        console.log(v);\r\n                        if (['MOBILE_UA', 'PC_UA', 'UC_UA', 'IOS_UA', 'UA'].includes(v)) {\r\n                            rule.headers[k] = eval(v);\r\n                        }\r\n                    } else if (k.toLowerCase() === 'cookie') {\r\n                        let v = rule.headers[k];\r\n                        if (v && v.startsWith('http')) {\r\n                            console.log(v);\r\n                            try {\r\n                                v = fetch(v);\r\n                                console.log(v);\r\n                                rule.headers[k] = v;\r\n                            } catch (e) {\r\n                                console.log(`从${v}获取cookie发生错误:` + e.message);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.log('处理headers发生错误:' + e.message);\r\n            }\r\n        }\r\n        // print(rule.headers);\r\n        rule_fetch_params = {'headers': rule.headers || false, 'timeout': rule.timeout, 'encoding': rule.encoding};\r\n        oheaders = rule.headers || {};\r\n        RKEY = typeof (key) !== 'undefined' && key ? key : 'drpy_' + (rule.title || rule.host);\r\n        pre(); // 预处理\r\n        init_test();\r\n    } catch (e) {\r\n        console.log('init_test发生错误:' + e.message);\r\n    }\r\n}\r\n\r\nlet homeHtmlCache = undefined;\r\n\r\n/**\r\n * js源获取首页分类和筛选特定返回对象中的函数\r\n * @param filter 筛选条件字典对象\r\n * @param home_html 指定了源码。无需内部再请求\r\n * @param class_parse 自动匹配传入的模板的动态分类\r\n * @returns {string}\r\n */\r\nfunction home(filter, home_html, class_parse) {\r\n    console.log(\"home\");\r\n    home_html = home_html || '';\r\n    class_parse = class_parse || '';\r\n    if (typeof (rule.filter) === 'string' && rule.filter.trim().length > 0) {\r\n        try {\r\n            let filter_json = ungzip(rule.filter.trim());\r\n            rule.filter = JSON.parse(filter_json);\r\n        } catch (e) {\r\n            rule.filter = {};\r\n        }\r\n    }\r\n    let homeObj = {\r\n        filter: rule.filter || false,\r\n        MY_URL: rule.homeUrl,\r\n        class_name: rule.class_name || '',\r\n        class_url: rule.class_url || '',\r\n        class_parse: class_parse || rule.class_parse || '',\r\n        cate_exclude: rule.cate_exclude,\r\n        home_html: home_html,\r\n    };\r\n    return homeParse(homeObj);\r\n}\r\n\r\n/**\r\n * js源获取首页推荐数据列表特定返回对象中的函数\r\n * @param params\r\n * @returns {string}\r\n */\r\nfunction homeVod(params) {\r\n    console.log(\"homeVod\");\r\n    let homeVodObj = {\r\n        推荐: rule.推荐,\r\n        double: rule.double,\r\n        homeUrl: rule.homeUrl,\r\n        detailUrl: rule.detailUrl\r\n    };\r\n    return homeVodParse(homeVodObj)\r\n    // return \"{}\";\r\n}\r\n\r\n/**\r\n * js源获取分类页一级数据列表特定返回对象中的函数\r\n * @param tid 分类id\r\n * @param pg 页数\r\n * @param filter 当前选中的筛选条件\r\n * @param extend 扩展\r\n * @returns {string}\r\n */\r\nfunction category(tid, pg, filter, extend) {\r\n    let cateObj = {\r\n        url: rule.url,\r\n        一级: rule.一级,\r\n        tid: tid,\r\n        pg: parseInt(pg),\r\n        filter: filter,\r\n        extend: extend\r\n    };\r\n    // console.log(JSON.stringify(extend));\r\n    return categoryParse(cateObj)\r\n}\r\n\r\n/**\r\n * js源获取二级详情页数据特定返回对象中的函数\r\n * @param vod_url 一级列表中的vod_id或者是带分类的自拼接 vod_id 如 fyclass$vod_id\r\n * @returns {string}\r\n */\r\nfunction detail(vod_url) {\r\n    let orId = vod_url;\r\n    let fyclass = '';\r\n    log('orId:' + orId);\r\n    if (vod_url.indexOf('$') > -1) {\r\n        let tmp = vod_url.split('$');\r\n        fyclass = tmp[0];\r\n        vod_url = tmp[1];\r\n    }\r\n    let detailUrl = vod_url.split('@@')[0];\r\n    let url;\r\n    if (!detailUrl.startsWith('http') && !detailUrl.includes('/')) {\r\n        url = rule.detailUrl.replaceAll('fyid', detailUrl).replaceAll('fyclass', fyclass);\r\n    } else if (detailUrl.includes('/')) {\r\n        url = urljoin(rule.homeUrl, detailUrl);\r\n    } else {\r\n        url = detailUrl\r\n    }\r\n    let detailObj = {\r\n        orId: orId,\r\n        url: url,\r\n        二级: rule.二级,\r\n        二级访问前: rule.二级访问前,\r\n        detailUrl: detailUrl,\r\n        fyclass: fyclass,\r\n        tab_exclude: rule.tab_exclude,\r\n    }\r\n    return detailParse(detailObj)\r\n}\r\n\r\n/**\r\n * js源选集按钮播放点击事件特定返回对象中的函数\r\n * @param flag 线路名\r\n * @param id 播放按钮的链接\r\n * @param flags 全局配置的flags是否需要解析的标识列表\r\n * @returns {string}\r\n */\r\nfunction play(flag, id, flags) {\r\n    let playObj = {\r\n        url: id,\r\n        flag: flag,\r\n        flags: flags\r\n    }\r\n    return playParse(playObj);\r\n}\r\n\r\n/**\r\n * js源搜索返回的数据列表特定返回对象中的函数\r\n * @param wd 搜索关键字\r\n * @param quick 是否来自快速搜索\r\n * @returns {string}\r\n */\r\nfunction search(wd, quick, pg) {\r\n    if (rule.search_encoding) {\r\n        if (rule.search_encoding.toLowerCase() !== 'utf-8') {\r\n            // 按搜索编码进行编码\r\n            wd = encodeStr(wd, rule.search_encoding);\r\n        }\r\n    } else if (rule.encoding && rule.encoding.toLowerCase() !== 'utf-8') {\r\n        // 按全局编码进行编码\r\n        wd = encodeStr(wd, rule.encoding);\r\n    }\r\n    let searchObj = {\r\n        searchUrl: rule.searchUrl,\r\n        搜索: rule.搜索,\r\n        wd: wd,\r\n        //pg: pg,\r\n        pg: pg || 1,\r\n        quick: quick,\r\n    };\r\n    // console.log(JSON.stringify(searchObj));\r\n    return searchParse(searchObj)\r\n}\r\n\r\n/**\r\n * js源本地代理返回的数据列表特定返回对象中的函数\r\n * @param params 代理链接参数比如 /proxy?do=js&url=https://wwww.baidu.com => params就是 {do:'js','url':'https://wwww.baidu.com'}\r\n * @returns {*}\r\n */\r\nfunction proxy(params) {\r\n    if (rule.proxy_rule && rule.proxy_rule.trim()) {\r\n        rule.proxy_rule = rule.proxy_rule.trim();\r\n    }\r\n    if (rule.proxy_rule.startsWith('js:')) {\r\n        rule.proxy_rule = rule.proxy_rule.replace('js:', '');\r\n    }\r\n    let proxyObj = {\r\n        params: params,\r\n        proxy_rule: rule.proxy_rule\r\n    };\r\n    return proxyParse(proxyObj)\r\n}\r\n\r\n\r\n/**\r\n * 是否启用辅助嗅探功能,启用后可以根据isVideo函数进行手动识别为视频的链接地址。默认为false\r\n * @returns {*|boolean|boolean}\r\n */\r\nfunction sniffer() {\r\n    let enable_sniffer = rule.sniffer || false;\r\n    if (enable_sniffer) {\r\n        // log('准备执行辅助嗅探代理规则:\\n'+rule.isVideo);\r\n        log('开始执行辅助嗅探代理规则...');\r\n    }\r\n    return enable_sniffer\r\n}\r\n\r\n/**\r\n * 启用辅助嗅探功能后根据次函数返回的值识别地址是否为视频，返回true/false\r\n * @param url\r\n */\r\nfunction isVideo(url) {\r\n    let t = 0;\r\n    let is_video;\r\n    if (rule.isVideo && rule.isVideo.trim()) {\r\n        is_video = rule.isVideo.trim();\r\n    }\r\n    if (is_video.startsWith('js:')) {\r\n        is_video = is_video.replace('js:', '');\r\n        t = 1;\r\n    }\r\n    let isVideoObj = {\r\n        url: url,\r\n        isVideo: is_video,\r\n        t: t,\r\n    };\r\n    let result = isVideoParse(isVideoObj);\r\n    if (result) {\r\n        log('成功执行辅助嗅探规则并检测到视频地址:\\n' + rule.isVideo);\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * 获取规则\r\n * @returns {{}}\r\n */\r\nfunction getRule(key) {\r\n    return key ? rule[key] || '' : rule\r\n}\r\n\r\nfunction DRPY() {//导出函数\r\n    return {\r\n        runMain: runMain,\r\n        getRule: getRule,\r\n        init: init,\r\n        home: home,\r\n        homeVod: homeVod,\r\n        category: category,\r\n        detail: detail,\r\n        play: play,\r\n        search: search,\r\n        proxy: proxy,\r\n        sniffer: sniffer,\r\n        isVideo: isVideo,\r\n        fixAdM3u8Ai: fixAdM3u8Ai,\r\n    }\r\n}\r\n\r\n/**\r\n * 导出函数无法简写成下面的形式:\r\n\r\n export default {\r\n  ...DRPY,\r\n  DRPY\r\n }\r\n\r\n */\r\n\r\n// 导出函数对象\r\n$.exports = {\r\n    runMain,\r\n    getRule,\r\n    init,\r\n    home,\r\n    homeVod,\r\n    category,\r\n    detail,\r\n    play,\r\n    search,\r\n    proxy,\r\n    sniffer,\r\n    isVideo,\r\n    fixAdM3u8Ai,\r\n    DRPY,\r\n}"}],"title":"LIBVIO🎬","author":"逐风者","version":2021092907,"type":"video","url":"https://www.libvio.cc/type/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nrequire(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:\nrequire(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://tv.libvio.cc/search/**----------fypage---.html","titleColor":"#ff228be6","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n/*\nvar lazy = $('').lazyRule((MY_HOME) => {\n    try {\n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n        var url = html.url\n\n        if (html.encrypt == '1') {\n            url = unescape(url);\n        } else if (html.encrypt == '2') {\n            url = unescape((url));\n        } else if (html.encrypt == '3') {\n            url = url\n        }\n        log(url)\n        if (/m3u8|mp4|uc|baidu/.test(url)) {\n            return url\n        } else if (/quark/.test(url)) {\n            return \"hiker://page/quarkList?rule=Quark.简&page=fypage&realurl=\" + encodeURIComponent(url);\n        } else if (/quark/.test(url)) {\n            return \"hiker://page/aliyun?rule=云盘君.简&page=fypage&realurl=\" + encodeURIComponent(input);\n        } else {\n            var jx = MY_HOME + request(MY_HOME + '/static/player/' + html.from + '.js').match(/src=\"(.*?)'/)[1]\n            log(jx)\n            var play = request(jx + url, {\n                headers: {\n                    'Referer': MY_URL\n                }\n            }).match(/var urls = '(.*?)'/)[1];\n            log(play)\n            return play\n        }\n    } catch (e) {\n        return 'video://' + input\n    }\n}, MY_HOME)*/\nvar 线路列表 = 'body&&.stui-pannel__head';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});\ntoString(() => {\n    rule.tab_exclude = '猜你喜欢';\n})","pages":"[{\"col_type\":\"movie_3\",\"name\":\"drpy2.js\",\"path\":\"drpy2.js\",\"rule\":\"const testPath = module.modulePath.slice(0, module.modulePath.lastIndexOf(\\\"/\\\")) + \\\"/\\\";\\r\\nconst {\\r\\n    gbkTool\\r\\n} = $.require(testPath + 'gbk.js');\\r\\nconst 模板 = $.require(testPath + \\\"模板.js\\\");\\r\\nconst pako = $.require(testPath + \\\"pako.min.js\\\");\\r\\nconst NODERSA = $.require(testPath + \\\"node-rsa.js\\\");\\r\\nconst JSEncrypt = $.require(testPath + \\\"jsencrypt.js\\\");\\r\\nconst JINJA = $.require(testPath+\\\"jinja.min.js\\\");\\r\\nconst JP = $.require(testPath+\\\"jsonpathplus.min.js\\\");\\r\\nconst cheerio = {\\r\\n    jinja2(template, obj) {\\r\\n        return JINJA.render(template, obj);\\r\\n    },\\r\\n    jp(path, json) {\\r\\n        return JP.JSONPath({\\r\\n            path,\\r\\n            json\\r\\n        })[0];\\r\\n    }\\r\\n}\\r\\n// import cheerio from \\\"https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/cheerio.min.js\\\";\\r\\n// import \\\"https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/crypto-js.js\\\";\\r\\n// import 模板 from\\\"https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/js/模板.js\\\";\\r\\n// import {gbkTool} from 'https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/gbk.js'\\r\\n\\r\\nfunction init_test() {\\r\\n    // console.log(typeof(CryptoJS));\\r\\n    console.log(\\\"init_test_start\\\");\\r\\n    // print(模板);\\r\\n    // print(typeof(模板.getMubans));\\r\\n    console.log(\\\"当前版本号:\\\" + VERSION);\\r\\n    console.log('本地代理地址:' + getProxyUrl());\\r\\n    console.log(RKEY);\\r\\n    // ocr_demo_test();\\r\\n    // rsa_demo_test();\\r\\n\\r\\n    // console.log('Uint8Array:'+typeof(Uint8Array)+' '+'Uint16Array:'+typeof(Uint16Array));\\r\\n    // console.log('encodeURIComponent:'+typeof(encodeURIComponent)+' '+'decodeURIComponent:'+typeof(decodeURIComponent));\\r\\n    // console.log('atob:'+typeof(atob)+' '+'btoa:'+typeof(btoa));\\r\\n    // log('typeof (JSEncrypt):'+typeof (JSEncrypt));\\r\\n    // log('typeof (pako):'+typeof (pako));\\r\\n    // let b64_str = btoa('hello hipy');\\r\\n    // let str = atob(b64_str);\\r\\n    // console.log(`btoa加密文本:${b64_str},atob解密文本:${str}`)\\r\\n    // let gzip_str = gzip('{\\\"a\\\":\\\"电影\\\",\\\"b\\\":\\\"电影\\\",\\\"c\\\":\\\"电影\\\",\\\"d\\\":\\\"电影\\\",\\\"e\\\":\\\"电影\\\",\\\"f\\\":\\\"电影\\\"}');\\r\\n    // let ungzip_str = ungzip(gzip_str);\\r\\n    // console.log(`gzip加密文本:${gzip_str},长度:${gzip_str.length},ungzip解密文本:${ungzip_str},长度:${ungzip_str.length}`);\\r\\n    // let a = {\\\"1\\\":[{\\\"key\\\":\\\"类型\\\",\\\"name\\\":\\\"类型\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"Netflix\\\",\\\"v\\\":\\\"NETFLIX\\\"},{\\\"n\\\":\\\"剧情\\\",\\\"v\\\":\\\"剧情\\\"},{\\\"n\\\":\\\"喜剧\\\",\\\"v\\\":\\\"喜剧\\\"},{\\\"n\\\":\\\"动作\\\",\\\"v\\\":\\\"动作\\\"},{\\\"n\\\":\\\"爱情\\\",\\\"v\\\":\\\"爱情\\\"},{\\\"n\\\":\\\"恐怖\\\",\\\"v\\\":\\\"恐怖\\\"},{\\\"n\\\":\\\"惊悚\\\",\\\"v\\\":\\\"惊悚\\\"},{\\\"n\\\":\\\"犯罪\\\",\\\"v\\\":\\\"犯罪\\\"},{\\\"n\\\":\\\"科幻\\\",\\\"v\\\":\\\"科幻\\\"},{\\\"n\\\":\\\"悬疑\\\",\\\"v\\\":\\\"悬疑\\\"},{\\\"n\\\":\\\"奇幻\\\",\\\"v\\\":\\\"奇幻\\\"},{\\\"n\\\":\\\"冒险\\\",\\\"v\\\":\\\"冒险\\\"},{\\\"n\\\":\\\"战争\\\",\\\"v\\\":\\\"战争\\\"},{\\\"n\\\":\\\"历史\\\",\\\"v\\\":\\\"历史\\\"},{\\\"n\\\":\\\"古装\\\",\\\"v\\\":\\\"古装\\\"},{\\\"n\\\":\\\"家庭\\\",\\\"v\\\":\\\"家庭\\\"},{\\\"n\\\":\\\"传记\\\",\\\"v\\\":\\\"传记\\\"},{\\\"n\\\":\\\"武侠\\\",\\\"v\\\":\\\"武侠\\\"},{\\\"n\\\":\\\"歌舞\\\",\\\"v\\\":\\\"歌舞\\\"},{\\\"n\\\":\\\"短片\\\",\\\"v\\\":\\\"短片\\\"},{\\\"n\\\":\\\"动画\\\",\\\"v\\\":\\\"动画\\\"},{\\\"n\\\":\\\"儿童\\\",\\\"v\\\":\\\"儿童\\\"},{\\\"n\\\":\\\"职场\\\",\\\"v\\\":\\\"职场\\\"}]},{\\\"key\\\":\\\"地区\\\",\\\"name\\\":\\\"地区\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"大陆\\\",\\\"v\\\":\\\"中国大陆\\\"},{\\\"n\\\":\\\"香港\\\",\\\"v\\\":\\\"中国香港\\\"},{\\\"n\\\":\\\"台湾\\\",\\\"v\\\":\\\"中国台湾\\\"},{\\\"n\\\":\\\"美国\\\",\\\"v\\\":\\\"美国\\\"},{\\\"n\\\":\\\"日本\\\",\\\"v\\\":\\\"日本\\\"},{\\\"n\\\":\\\"韩国\\\",\\\"v\\\":\\\"韩国\\\"},{\\\"n\\\":\\\"英国\\\",\\\"v\\\":\\\"英国\\\"},{\\\"n\\\":\\\"法国\\\",\\\"v\\\":\\\"法国\\\"},{\\\"n\\\":\\\"德国\\\",\\\"v\\\":\\\"德国\\\"},{\\\"n\\\":\\\"印度\\\",\\\"v\\\":\\\"印度\\\"},{\\\"n\\\":\\\"泰国\\\",\\\"v\\\":\\\"泰国\\\"},{\\\"n\\\":\\\"丹麦\\\",\\\"v\\\":\\\"丹麦\\\"},{\\\"n\\\":\\\"瑞典\\\",\\\"v\\\":\\\"瑞典\\\"},{\\\"n\\\":\\\"巴西\\\",\\\"v\\\":\\\"巴西\\\"},{\\\"n\\\":\\\"加拿大\\\",\\\"v\\\":\\\"加拿大\\\"},{\\\"n\\\":\\\"俄罗斯\\\",\\\"v\\\":\\\"俄罗斯\\\"},{\\\"n\\\":\\\"意大利\\\",\\\"v\\\":\\\"意大利\\\"},{\\\"n\\\":\\\"比利时\\\",\\\"v\\\":\\\"比利时\\\"},{\\\"n\\\":\\\"爱尔兰\\\",\\\"v\\\":\\\"爱尔兰\\\"},{\\\"n\\\":\\\"西班牙\\\",\\\"v\\\":\\\"西班牙\\\"},{\\\"n\\\":\\\"澳大利亚\\\",\\\"v\\\":\\\"澳大利亚\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"语言\\\",\\\"name\\\":\\\"语言\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"国语\\\",\\\"v\\\":\\\"国语\\\"},{\\\"n\\\":\\\"粤语\\\",\\\"v\\\":\\\"粤语\\\"},{\\\"n\\\":\\\"英语\\\",\\\"v\\\":\\\"英语\\\"},{\\\"n\\\":\\\"日语\\\",\\\"v\\\":\\\"日语\\\"},{\\\"n\\\":\\\"韩语\\\",\\\"v\\\":\\\"韩语\\\"},{\\\"n\\\":\\\"法语\\\",\\\"v\\\":\\\"法语\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"年份\\\",\\\"name\\\":\\\"年份\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"2024\\\",\\\"v\\\":\\\"2024\\\"},{\\\"n\\\":\\\"2023\\\",\\\"v\\\":\\\"2023\\\"},{\\\"n\\\":\\\"2022\\\",\\\"v\\\":\\\"2022\\\"},{\\\"n\\\":\\\"2021\\\",\\\"v\\\":\\\"2021\\\"},{\\\"n\\\":\\\"2020\\\",\\\"v\\\":\\\"2020\\\"},{\\\"n\\\":\\\"10年代\\\",\\\"v\\\":\\\"2010_2019\\\"},{\\\"n\\\":\\\"00年代\\\",\\\"v\\\":\\\"2000_2009\\\"},{\\\"n\\\":\\\"90年代\\\",\\\"v\\\":\\\"1990_1999\\\"},{\\\"n\\\":\\\"80年代\\\",\\\"v\\\":\\\"1980_1989\\\"},{\\\"n\\\":\\\"更早\\\",\\\"v\\\":\\\"0_1979\\\"}]},{\\\"key\\\":\\\"排序\\\",\\\"name\\\":\\\"排序\\\",\\\"value\\\":[{\\\"n\\\":\\\"综合\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"最新\\\",\\\"v\\\":\\\"2\\\"},{\\\"n\\\":\\\"最热\\\",\\\"v\\\":\\\"3\\\"},{\\\"n\\\":\\\"评分\\\",\\\"v\\\":\\\"4\\\"}]}],\\\"2\\\":[{\\\"key\\\":\\\"类型\\\",\\\"name\\\":\\\"类型\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"Netflix\\\",\\\"v\\\":\\\"Netflix\\\"},{\\\"n\\\":\\\"剧情\\\",\\\"v\\\":\\\"剧情\\\"},{\\\"n\\\":\\\"爱情\\\",\\\"v\\\":\\\"爱情\\\"},{\\\"n\\\":\\\"喜剧\\\",\\\"v\\\":\\\"喜剧\\\"},{\\\"n\\\":\\\"犯罪\\\",\\\"v\\\":\\\"犯罪\\\"},{\\\"n\\\":\\\"悬疑\\\",\\\"v\\\":\\\"悬疑\\\"},{\\\"n\\\":\\\"古装\\\",\\\"v\\\":\\\"古装\\\"},{\\\"n\\\":\\\"动作\\\",\\\"v\\\":\\\"动作\\\"},{\\\"n\\\":\\\"家庭\\\",\\\"v\\\":\\\"家庭\\\"},{\\\"n\\\":\\\"惊悚\\\",\\\"v\\\":\\\"惊悚\\\"},{\\\"n\\\":\\\"奇幻\\\",\\\"v\\\":\\\"奇幻\\\"},{\\\"n\\\":\\\"美剧\\\",\\\"v\\\":\\\"美剧\\\"},{\\\"n\\\":\\\"科幻\\\",\\\"v\\\":\\\"科幻\\\"},{\\\"n\\\":\\\"历史\\\",\\\"v\\\":\\\"历史\\\"},{\\\"n\\\":\\\"战争\\\",\\\"v\\\":\\\"战争\\\"},{\\\"n\\\":\\\"韩剧\\\",\\\"v\\\":\\\"韩剧\\\"},{\\\"n\\\":\\\"武侠\\\",\\\"v\\\":\\\"武侠\\\"},{\\\"n\\\":\\\"言情\\\",\\\"v\\\":\\\"言情\\\"},{\\\"n\\\":\\\"恐怖\\\",\\\"v\\\":\\\"恐怖\\\"},{\\\"n\\\":\\\"冒险\\\",\\\"v\\\":\\\"冒险\\\"},{\\\"n\\\":\\\"都市\\\",\\\"v\\\":\\\"都市\\\"},{\\\"n\\\":\\\"职场\\\",\\\"v\\\":\\\"职场\\\"}]},{\\\"key\\\":\\\"地区\\\",\\\"name\\\":\\\"地区\\\",\\\"value\\\":[{\\\"n\\\":\\\"地区\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"大陆\\\",\\\"v\\\":\\\"中国大陆\\\"},{\\\"n\\\":\\\"香港\\\",\\\"v\\\":\\\"中国香港\\\"},{\\\"n\\\":\\\"韩国\\\",\\\"v\\\":\\\"韩国\\\"},{\\\"n\\\":\\\"美国\\\",\\\"v\\\":\\\"美国\\\"},{\\\"n\\\":\\\"日本\\\",\\\"v\\\":\\\"日本\\\"},{\\\"n\\\":\\\"法国\\\",\\\"v\\\":\\\"法国\\\"},{\\\"n\\\":\\\"英国\\\",\\\"v\\\":\\\"英国\\\"},{\\\"n\\\":\\\"德国\\\",\\\"v\\\":\\\"德国\\\"},{\\\"n\\\":\\\"台湾\\\",\\\"v\\\":\\\"中国台湾\\\"},{\\\"n\\\":\\\"泰国\\\",\\\"v\\\":\\\"泰国\\\"},{\\\"n\\\":\\\"印度\\\",\\\"v\\\":\\\"印度\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"语言\\\",\\\"name\\\":\\\"语言\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"国语\\\",\\\"v\\\":\\\"国语\\\"},{\\\"n\\\":\\\"粤语\\\",\\\"v\\\":\\\"粤语\\\"},{\\\"n\\\":\\\"英语\\\",\\\"v\\\":\\\"英语\\\"},{\\\"n\\\":\\\"日语\\\",\\\"v\\\":\\\"日语\\\"},{\\\"n\\\":\\\"韩语\\\",\\\"v\\\":\\\"韩语\\\"},{\\\"n\\\":\\\"法语\\\",\\\"v\\\":\\\"法语\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"年份\\\",\\\"name\\\":\\\"年份\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"2024\\\",\\\"v\\\":\\\"2024\\\"},{\\\"n\\\":\\\"2023\\\",\\\"v\\\":\\\"2023\\\"},{\\\"n\\\":\\\"2022\\\",\\\"v\\\":\\\"2022\\\"},{\\\"n\\\":\\\"2021\\\",\\\"v\\\":\\\"2021\\\"},{\\\"n\\\":\\\"2020\\\",\\\"v\\\":\\\"2020\\\"},{\\\"n\\\":\\\"10年代\\\",\\\"v\\\":\\\"2010_2019\\\"},{\\\"n\\\":\\\"00年代\\\",\\\"v\\\":\\\"2000_2009\\\"},{\\\"n\\\":\\\"90年代\\\",\\\"v\\\":\\\"1990_1999\\\"},{\\\"n\\\":\\\"80年代\\\",\\\"v\\\":\\\"1980_1989\\\"},{\\\"n\\\":\\\"更早\\\",\\\"v\\\":\\\"0_1979\\\"}]},{\\\"key\\\":\\\"排序\\\",\\\"name\\\":\\\"排序\\\",\\\"value\\\":[{\\\"n\\\":\\\"综合\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"最新\\\",\\\"v\\\":\\\"2\\\"},{\\\"n\\\":\\\"最热\\\",\\\"v\\\":\\\"3\\\"},{\\\"n\\\":\\\"评分\\\",\\\"v\\\":\\\"4\\\"}]}],\\\"3\\\":[{\\\"key\\\":\\\"类型\\\",\\\"name\\\":\\\"类型\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"Netflix\\\",\\\"v\\\":\\\"Netflix\\\"},{\\\"n\\\":\\\"动态漫画\\\",\\\"v\\\":\\\"动态漫画\\\"},{\\\"n\\\":\\\"剧情\\\",\\\"v\\\":\\\"剧情\\\"},{\\\"n\\\":\\\"动画\\\",\\\"v\\\":\\\"动画\\\"},{\\\"n\\\":\\\"喜剧\\\",\\\"v\\\":\\\"喜剧\\\"},{\\\"n\\\":\\\"冒险\\\",\\\"v\\\":\\\"冒险\\\"},{\\\"n\\\":\\\"动作\\\",\\\"v\\\":\\\"动作\\\"},{\\\"n\\\":\\\"奇幻\\\",\\\"v\\\":\\\"奇幻\\\"},{\\\"n\\\":\\\"科幻\\\",\\\"v\\\":\\\"科幻\\\"},{\\\"n\\\":\\\"儿童\\\",\\\"v\\\":\\\"儿童\\\"},{\\\"n\\\":\\\"搞笑\\\",\\\"v\\\":\\\"搞笑\\\"},{\\\"n\\\":\\\"爱情\\\",\\\"v\\\":\\\"爱情\\\"},{\\\"n\\\":\\\"家庭\\\",\\\"v\\\":\\\"家庭\\\"},{\\\"n\\\":\\\"短片\\\",\\\"v\\\":\\\"短片\\\"},{\\\"n\\\":\\\"热血\\\",\\\"v\\\":\\\"热血\\\"},{\\\"n\\\":\\\"益智\\\",\\\"v\\\":\\\"益智\\\"},{\\\"n\\\":\\\"悬疑\\\",\\\"v\\\":\\\"悬疑\\\"},{\\\"n\\\":\\\"经典\\\",\\\"v\\\":\\\"经典\\\"},{\\\"n\\\":\\\"校园\\\",\\\"v\\\":\\\"校园\\\"},{\\\"n\\\":\\\"Anime\\\",\\\"v\\\":\\\"Anime\\\"},{\\\"n\\\":\\\"运动\\\",\\\"v\\\":\\\"运动\\\"},{\\\"n\\\":\\\"亲子\\\",\\\"v\\\":\\\"亲子\\\"},{\\\"n\\\":\\\"青春\\\",\\\"v\\\":\\\"青春\\\"},{\\\"n\\\":\\\"恋爱\\\",\\\"v\\\":\\\"恋爱\\\"},{\\\"n\\\":\\\"武侠\\\",\\\"v\\\":\\\"武侠\\\"},{\\\"n\\\":\\\"惊悚\\\",\\\"v\\\":\\\"惊悚\\\"}]},{\\\"key\\\":\\\"地区\\\",\\\"name\\\":\\\"地区\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"日本\\\",\\\"v\\\":\\\"日本\\\"},{\\\"n\\\":\\\"大陆\\\",\\\"v\\\":\\\"中国大陆\\\"},{\\\"n\\\":\\\"台湾\\\",\\\"v\\\":\\\"中国台湾\\\"},{\\\"n\\\":\\\"美国\\\",\\\"v\\\":\\\"美国\\\"},{\\\"n\\\":\\\"香港\\\",\\\"v\\\":\\\"中国香港\\\"},{\\\"n\\\":\\\"韩国\\\",\\\"v\\\":\\\"韩国\\\"},{\\\"n\\\":\\\"英国\\\",\\\"v\\\":\\\"英国\\\"},{\\\"n\\\":\\\"法国\\\",\\\"v\\\":\\\"法国\\\"},{\\\"n\\\":\\\"德国\\\",\\\"v\\\":\\\"德国\\\"},{\\\"n\\\":\\\"印度\\\",\\\"v\\\":\\\"印度\\\"},{\\\"n\\\":\\\"泰国\\\",\\\"v\\\":\\\"泰国\\\"},{\\\"n\\\":\\\"丹麦\\\",\\\"v\\\":\\\"丹麦\\\"},{\\\"n\\\":\\\"瑞典\\\",\\\"v\\\":\\\"瑞典\\\"},{\\\"n\\\":\\\"巴西\\\",\\\"v\\\":\\\"巴西\\\"},{\\\"n\\\":\\\"加拿大\\\",\\\"v\\\":\\\"加拿大\\\"},{\\\"n\\\":\\\"俄罗斯\\\",\\\"v\\\":\\\"俄罗斯\\\"},{\\\"n\\\":\\\"意大利\\\",\\\"v\\\":\\\"意大利\\\"},{\\\"n\\\":\\\"比利时\\\",\\\"v\\\":\\\"比利时\\\"},{\\\"n\\\":\\\"爱尔兰\\\",\\\"v\\\":\\\"爱尔兰\\\"},{\\\"n\\\":\\\"西班牙\\\",\\\"v\\\":\\\"西班牙\\\"},{\\\"n\\\":\\\"澳大利亚\\\",\\\"v\\\":\\\"澳大利亚\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"语言\\\",\\\"name\\\":\\\"语言\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"国语\\\",\\\"v\\\":\\\"国语\\\"},{\\\"n\\\":\\\"粤语\\\",\\\"v\\\":\\\"粤语\\\"},{\\\"n\\\":\\\"英语\\\",\\\"v\\\":\\\"英语\\\"},{\\\"n\\\":\\\"日语\\\",\\\"v\\\":\\\"日语\\\"},{\\\"n\\\":\\\"韩语\\\",\\\"v\\\":\\\"韩语\\\"},{\\\"n\\\":\\\"法语\\\",\\\"v\\\":\\\"法语\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"年份\\\",\\\"name\\\":\\\"年份\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"2024\\\",\\\"v\\\":\\\"2024\\\"},{\\\"n\\\":\\\"2023\\\",\\\"v\\\":\\\"2023\\\"},{\\\"n\\\":\\\"2022\\\",\\\"v\\\":\\\"2022\\\"},{\\\"n\\\":\\\"2021\\\",\\\"v\\\":\\\"2021\\\"},{\\\"n\\\":\\\"2020\\\",\\\"v\\\":\\\"2020\\\"},{\\\"n\\\":\\\"10年代\\\",\\\"v\\\":\\\"2010_2019\\\"},{\\\"n\\\":\\\"00年代\\\",\\\"v\\\":\\\"2000_2009\\\"},{\\\"n\\\":\\\"90年代\\\",\\\"v\\\":\\\"1990_1999\\\"},{\\\"n\\\":\\\"80年代\\\",\\\"v\\\":\\\"1980_1989\\\"},{\\\"n\\\":\\\"更早\\\",\\\"v\\\":\\\"0_1979\\\"}]},{\\\"key\\\":\\\"排序\\\",\\\"name\\\":\\\"排序\\\",\\\"value\\\":[{\\\"n\\\":\\\"综合\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"最新\\\",\\\"v\\\":\\\"2\\\"},{\\\"n\\\":\\\"最热\\\",\\\"v\\\":\\\"3\\\"},{\\\"n\\\":\\\"评分\\\",\\\"v\\\":\\\"4\\\"}]}],\\\"4\\\":[{\\\"key\\\":\\\"类型\\\",\\\"name\\\":\\\"类型\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"纪录\\\",\\\"v\\\":\\\"纪录\\\"},{\\\"n\\\":\\\"真人秀\\\",\\\"v\\\":\\\"真人秀\\\"},{\\\"n\\\":\\\"记录\\\",\\\"v\\\":\\\"记录\\\"},{\\\"n\\\":\\\"脱口秀\\\",\\\"v\\\":\\\"脱口秀\\\"},{\\\"n\\\":\\\"剧情\\\",\\\"v\\\":\\\"剧情\\\"},{\\\"n\\\":\\\"历史\\\",\\\"v\\\":\\\"历史\\\"},{\\\"n\\\":\\\"喜剧\\\",\\\"v\\\":\\\"喜剧\\\"},{\\\"n\\\":\\\"传记\\\",\\\"v\\\":\\\"传记\\\"},{\\\"n\\\":\\\"相声\\\",\\\"v\\\":\\\"相声\\\"},{\\\"n\\\":\\\"节目\\\",\\\"v\\\":\\\"节目\\\"},{\\\"n\\\":\\\"歌舞\\\",\\\"v\\\":\\\"歌舞\\\"},{\\\"n\\\":\\\"冒险\\\",\\\"v\\\":\\\"冒险\\\"},{\\\"n\\\":\\\"运动\\\",\\\"v\\\":\\\"运动\\\"},{\\\"n\\\":\\\"Season\\\",\\\"v\\\":\\\"Season\\\"},{\\\"n\\\":\\\"犯罪\\\",\\\"v\\\":\\\"犯罪\\\"},{\\\"n\\\":\\\"短片\\\",\\\"v\\\":\\\"短片\\\"},{\\\"n\\\":\\\"搞笑\\\",\\\"v\\\":\\\"搞笑\\\"},{\\\"n\\\":\\\"晚会\\\",\\\"v\\\":\\\"晚会\\\"}]},{\\\"key\\\":\\\"地区\\\",\\\"name\\\":\\\"地区\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"大陆\\\",\\\"v\\\":\\\"中国大陆\\\"},{\\\"n\\\":\\\"香港\\\",\\\"v\\\":\\\"中国香港\\\"},{\\\"n\\\":\\\"台湾\\\",\\\"v\\\":\\\"中国台湾\\\"},{\\\"n\\\":\\\"美国\\\",\\\"v\\\":\\\"美国\\\"},{\\\"n\\\":\\\"日本\\\",\\\"v\\\":\\\"日本\\\"},{\\\"n\\\":\\\"韩国\\\",\\\"v\\\":\\\"韩国\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"语言\\\",\\\"name\\\":\\\"语言\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"国语\\\",\\\"v\\\":\\\"国语\\\"},{\\\"n\\\":\\\"粤语\\\",\\\"v\\\":\\\"粤语\\\"},{\\\"n\\\":\\\"英语\\\",\\\"v\\\":\\\"英语\\\"},{\\\"n\\\":\\\"日语\\\",\\\"v\\\":\\\"日语\\\"},{\\\"n\\\":\\\"韩语\\\",\\\"v\\\":\\\"韩语\\\"},{\\\"n\\\":\\\"法语\\\",\\\"v\\\":\\\"法语\\\"},{\\\"n\\\":\\\"其他\\\",\\\"v\\\":\\\"其他\\\"}]},{\\\"key\\\":\\\"年份\\\",\\\"name\\\":\\\"年份\\\",\\\"value\\\":[{\\\"n\\\":\\\"全部\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"2024\\\",\\\"v\\\":\\\"2024\\\"},{\\\"n\\\":\\\"2023\\\",\\\"v\\\":\\\"2023\\\"},{\\\"n\\\":\\\"2022\\\",\\\"v\\\":\\\"2022\\\"},{\\\"n\\\":\\\"2021\\\",\\\"v\\\":\\\"2021\\\"},{\\\"n\\\":\\\"2020\\\",\\\"v\\\":\\\"2020\\\"},{\\\"n\\\":\\\"10年代\\\",\\\"v\\\":\\\"2010_2019\\\"},{\\\"n\\\":\\\"00年代\\\",\\\"v\\\":\\\"2000_2009\\\"},{\\\"n\\\":\\\"90年代\\\",\\\"v\\\":\\\"1990_1999\\\"},{\\\"n\\\":\\\"80年代\\\",\\\"v\\\":\\\"1980_1989\\\"},{\\\"n\\\":\\\"更早\\\",\\\"v\\\":\\\"0_1979\\\"}]},{\\\"key\\\":\\\"排序\\\",\\\"name\\\":\\\"排序\\\",\\\"value\\\":[{\\\"n\\\":\\\"综合\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"最新\\\",\\\"v\\\":\\\"2\\\"},{\\\"n\\\":\\\"最热\\\",\\\"v\\\":\\\"3\\\"},{\\\"n\\\":\\\"评分\\\",\\\"v\\\":\\\"4\\\"}]}],\\\"6\\\":[{\\\"key\\\":\\\"类型\\\",\\\"name\\\":\\\"类型\\\",\\\"value\\\":[{\\\"n\\\":\\\"类型\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"逆袭\\\",\\\"v\\\":\\\"逆袭\\\"},{\\\"n\\\":\\\"甜宠\\\",\\\"v\\\":\\\"甜宠\\\"},{\\\"n\\\":\\\"虐恋\\\",\\\"v\\\":\\\"虐恋\\\"},{\\\"n\\\":\\\"穿越\\\",\\\"v\\\":\\\"穿越\\\"},{\\\"n\\\":\\\"重生\\\",\\\"v\\\":\\\"重生\\\"},{\\\"n\\\":\\\"剧情\\\",\\\"v\\\":\\\"剧情\\\"},{\\\"n\\\":\\\"科幻\\\",\\\"v\\\":\\\"科幻\\\"},{\\\"n\\\":\\\"武侠\\\",\\\"v\\\":\\\"武侠\\\"},{\\\"n\\\":\\\"爱情\\\",\\\"v\\\":\\\"爱情\\\"},{\\\"n\\\":\\\"动作\\\",\\\"v\\\":\\\"动作\\\"},{\\\"n\\\":\\\"战争\\\",\\\"v\\\":\\\"战争\\\"},{\\\"n\\\":\\\"冒险\\\",\\\"v\\\":\\\"冒险\\\"},{\\\"n\\\":\\\"其它\\\",\\\"v\\\":\\\"其它\\\"}]},{\\\"key\\\":\\\"排序\\\",\\\"name\\\":\\\"排序\\\",\\\"value\\\":[{\\\"n\\\":\\\"综合\\\",\\\"v\\\":\\\"\\\"},{\\\"n\\\":\\\"最新\\\",\\\"v\\\":\\\"2\\\"},{\\\"n\\\":\\\"最热\\\",\\\"v\\\":\\\"3\\\"}]}]};\\r\\n    // log(gzip(JSON.stringify(a)));\\r\\n\\r\\n    console.log(JSON.stringify(rule));\\r\\n    console.log(\\\"init_test_end\\\");\\r\\n\\r\\n\\r\\n    // log('typeof (JSEncrypt):'+typeof (JSEncrypt));\\r\\n    // let publicKey = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwEc7wBMtYKkxvrQNI3+ITBZwAkPkGvsv4TsAHFskKGZWz9eYl3scivhmlEfWHlEkdyb0m82CmB1qAgef+pD4cZu+Cdmm2e9lnExhLwm8cBgpkAen9QRNdjojZgxM0W+JcReH4W6pw+uFXiLRn4AIQkDftWGNLg6wlNS+39Z/RvP9zyATJLZ9AKDdHp62XMxEK1KZvWBuIg+Oa5UzgA9jy+2XyIqwhBtO8tPbUl21t2pvTzHoLUjSkPNm2LurcUk6+jQ2r6aiS2CN1NXIucPJU6mkuIQ821SjvkYPtIdRMntW4y2u4cyiqVEEQwlzWVMHh+/vfrWAQr9fgjDuYYtvPQIDAQAB';\\r\\n    // let privateKey  = 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDARzvAEy1gqTG+tA0jf4hMFnACQ+Qa+y/hOwAcWyQoZlbP15iXexyK+GaUR9YeUSR3JvSbzYKYHWoCB5/6kPhxm74J2abZ72WcTGEvCbxwGCmQB6f1BE12OiNmDEzRb4lxF4fhbqnD64VeItGfgAhCQN+1YY0uDrCU1L7f1n9G8/3PIBMktn0AoN0enrZczEQrUpm9YG4iD45rlTOAD2PL7ZfIirCEG07y09tSXbW3am9PMegtSNKQ82bYu6txSTr6NDavpqJLYI3U1ci5w8lTqaS4hDzbVKO+Rg+0h1Eye1bjLa7hzKKpUQRDCXNZUweH7+9+tYBCv1+CMO5hi289AgMBAAECggEBAIRbRJUWXmEwdq64kGbELlV6CIZ2p3mvOSlIjO34Cy7IK7AMz9xOgbpj/XDK9miOIJTouu7ZC7GcZdGZ4BUCYBMMS0fKjGFuurpZlXhkslNTPqEHtCUkXhIpOR7RDrwIlErGEOIsZC4aXQcM3tF1t7mroJLh4OY4dHMu82lv5NM4hhFMNvHzXVvrPXeTzw26gddHVG/ke0WUYOcB5j3cPp8xaVp7JV8bdxtGtkqIfBLY/dIczzJu/3F3cBpU2nNwt8uVUF/w/HKlr7j8FqqFHXWh182beU0n5AIdRyRJBrRUAEhdtsUnvJOVBDqzZa+9DJ5395F7V8KRlQptxETdhCECgYEA4x/2HM9fnVIhG6wTbEt1LhGTKYb/igMAHLqquEMfRsB44tobI8gVNwR3qJQY/nKXxcQemQV29PcdqpENCKyXUXGD8SI1UPg15rHFBI8CIqlCXfzJybdHjmzlhaA9I5lofIVh+5MW7WkvHZoRy7NeDMhHUuaiveuqC4OJ8n+dD2kCgYEA2LkmUVef3WkBBwUBRdkyoog3DMwR+/ubb0ncJVYy3ItYVJltQ4HqmrRiJc8xBAoFnG8rbiqDnmTnDR3WbuxU1G2hml09fqId+rQds2UfESswCXHU43A4f77m1XyA6PprBxpozVIcmK69N4rR9jOXflLWo3O+p2ipUbmNpId7+rUCgYBSpcbBJRT+AmzZzPwkZDD32p1ady114zGfQq3s7z/qVw+mPQezNZPCuXVxerK9pKVl6b/Ynwxyh5nb/3xms6c8k7oXfQM5u5ihof63cfKs+jqUSPCE3pTDVw0OWwjkc2Z6KW9GRHgLXEMw2mevYE3RCPArUpHV2nO+TNddzuIwQQKBgQDOZwdnUNygMfEYjlu3+jOPN8u2FGTMZ8SRKPbRWFb4VH27lKPLN2AIFuOivsEf56uQYRAry7GumMq0Y0ZmPg5Mglz2dvaqNBv5OLFQuW3tHAST+iWWtroYb+fISts7B8QG79AAO8OgZksvKrbslBYj6SEiaomZRsR7YQzVNXOOQQKBgQCovElZ50c8ZJ6m9D9fw3Nes7u9vshpyyac5tt4tZ7yfU4l5pWGrIUqCE703qZp4NAqEvlZUCJbj9kkysaj/2MfFb2b9jSvdNB+V/YW9Cwg+5TziYoOcQzN1z2u4p4goTAv0S+pTNSr3qWaTUI4TXUXQajif45Fexv+MrP5AAXQyw=='\\r\\n    // // let text = '你好';\\r\\n    // let text = '[{\\\"vod_name\\\":\\\"兔小贝原创儿歌\\\",\\\"vod_pic\\\":\\\"https://resource-cdn.tuxiaobei.com/video-album/FnQ8ieJHgsbgCKWXNBg4uoOmKgG5.jpg\\\",\\\"vod_remarks\\\":\\\"共229首\\\",\\\"vod_content\\\":\\\"\\\",\\\"vod_id\\\":\\\"/subject/17@@兔小贝原创儿歌@@https://resource-cdn.tuxiaobei.com/video-album/FnQ8ieJHgsbgCKWXNBg4uoOmKgG5.jpg\\\"},{\\\"vod_name\\\":\\\"英文儿歌\\\",\\\"vod_pic\\\":\\\"https://resource-cdn.tuxiaobei.com/video-album/Fqjpx2H_-QaYNAYn2MekRuDpeyUv.jpg\\\",\\\"vod_remarks\\\":\\\"共10首\\\",\\\"vod_content\\\":\\\"\\\",\\\"vod_id\\\":\\\"/subject/23@@英文儿歌@@https://resource-cdn.tuxiaobei.com/video-album/Fqjpx2H_-QaYNAYn2MekRuDpeyUv.jpg\\\"}]';\\r\\n    // let str = RSA.encode(text, publicKey);\\r\\n    // console.log(\\\"加密数据：\\\" + str);\\r\\n    // let str1 = 'Wa2c/868VOm0PgpGG2s2aMrDbGOlJRdZXlSGswjFgywd3nZNB7ND8kVMdNB/OsNFoQXJXSJMvPaE73BH7rs8fz54JGdYQK+qTgfQRqQZvomCjbzseSR4bm4NOrtIOOslL3WqxlzOuU0M1P1eERmkLEVU2WSyc3RGtJro3b3MOWYCNdKMoZdncfOHJndkl4wm9V3GGc3uH98hs6OxLvBWgXoW9jZQ3n0vR2FtS2KYrPGuSuKGkxlt9Kw5TD6nri142NOimz05WK55Xe04YUQ1VZd51t0wzJGXolWgfzIQaK2zzhk5Zjlm+IQJxXqEWiJ2+O6TJ+lIttvsDSaUflcDXQ==';\\r\\n    // let str2 = 'R86mW9DzBw05pxBSh9ECh1stXxINmnudgZBbzU/cz1EcFgrEgdk0Zk4ruAiJZB2fP5c7d3gMmN8+Dv19IfARWSzw85xCEjUhpdcMJ0jn6ZE5H+muadND9LzjeVisojqwYxot3YVdKof7HMhPFN8QR0jfzqhjmnGFTlY1jMXzJK0MSOLNRLDar480CdKNb/cxALC8+xKIlhM9E4B31t8J4rNMUWSCAr49lbZ3jx3PxieBpTQUdDJz96AttR93Pc+c51wrxh0Ch/Mt4Rs09HGMXwIpNV+CxsGwSGRQUlyJo2k3d0WqsVzpz6S8A4VGEMTRLGI3IjEt+eWt7wM3nAXarg==';\\r\\n    // let str3 = 'D4eOsRqua+jYA5+ZOR9PLI2PExKjKfArQfv9/wGeG50bQSjWypShJPY6RQfO+rghyf0juzHIUSxqH91OxinhCFkONaF2Vod2QVyphyn9eh73dAcEFKIFFKGXoPCjbMWrr3p4d+hgVrHzrFeGqkRq8JFOvG2L5XDxVfWbV8KmUA0DKuz6QwWg7P4kesy+C7BbLALy5W/wfZchD3gnsBvx/pjFoe11VfAify9isLxg9a15jj52xr6lzQ9kge9C2JcV8yq85bFKaUpJWgobzz+BSIv3lVMU6vgcldmOrhkyiETpFGFGGF00DphGCEoK6uAyyNDh7+Jn8P17zf/DW1wV3A==';\\r\\n    // let uncrypted = RSA.decode(str, privateKey);\\r\\n    // log('解密数据:'+uncrypted);\\r\\n    // uncrypted = RSA.decode(str1, privateKey);\\r\\n    // log('解密数据1:'+uncrypted);\\r\\n    // uncrypted = RSA.decode(str2, privateKey);\\r\\n    // log('解密数据2:'+uncrypted);\\r\\n    // uncrypted = RSA.decode(str3, privateKey);\\r\\n    // log('解密数据3:'+uncrypted);\\r\\n\\r\\n    // log('rsax:'+typeof(rsax));\\r\\n    // log('rsaX:'+typeof(rsaX));\\r\\n    // let data = base64Encode('你好');\\r\\n    // let publicKey = 'dzyyds';\\r\\n    // console.log(typeof (RSA.encode));\\r\\n    // let encryptBase64Data = RSA.encode(data,publicKey);\\r\\n    // log('encryptBase64Data:'+encryptBase64Data);\\r\\n    // let str = RSA.decode(data,publicKey);\\r\\n    // log('str:'+str);\\r\\n}\\r\\n\\r\\n/**\\r\\n * 验证码ocr识别的测试案例\\r\\n */\\r\\nfunction ocr_demo_test() {\\r\\n    // 这张图片为4113的验证码\\r\\n    let img_base64 = `iVBORw0KGgoAAAANSUhEUgAAAIAAAAAoBAMAAADEX+97AAAAG1BMVEXz+/4thQTa7N6QwIFFkyNeokKozqDB3b93sWHFR+MEAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABN0lEQVRIie2TQU+DQBCFt9vScvQpxR4xrcSjJCZ67JDGXsX+AdR4B3vpsSYm/m2HXaRLmuySepR3Gdidb/btDAjRq5dT96eCMlfBuzi1QLZUoZy2yz5sOvI+9iomaPEZ6nWnEtxqIyiM1RcAy44GNDhBXUjot/VVNweV1ah68FqWRyjKIOqAcyYF6rGcmpYnHzGt3fycNoMw0d3/THFu7hFSJ/8OXO6iTM8/KSg09obAzIHLO250LgQ0txOZSfgrV4Exdw98uGycJ0ErAeExZGhOmFHV9zHO6qVSj0MpLq7xZON56o++MjlsEgfVhbQWWME+xQX7J4V6zfi9A1Ly9rP1BvEXp+BbVJ/M77n+wfOIDVp51pZ4iBxvmj9AGrtvry6emwfKnVkW+ZRKd5ZNMvob36vXP9YPDmQki8QiCFAAAAAASUVORK5CYII=`;\\r\\n    // 更换api-可以通过这个代码换掉默认的ocr接口\\r\\n    OcrApi.api = OCR_API;\\r\\n    let code = OcrApi.classification(img_base64);\\r\\n    log('测试验证码图片的ocr识别结果为:' + code);\\r\\n}\\r\\n\\r\\n/**\\r\\n * rsa加解密的全方位测试案例\\r\\n */\\r\\nfunction rsa_demo_test() {\\r\\n    let t1 = new Date().getTime();\\r\\n    let pkcs1_public = `\\r\\n-----BEGIN RSA PUBLIC KEY-----\\r\\nMEgCQQCrI0pQ/ERRpJ3Ou190XJedFq846nDYP52rOtXyDxlFK5D3p6JJu2RwsKwy\\r\\nlsQ9xY0xYPpRZUZKMEeR7e9gmRNLAgMBAAE=\\r\\n-----END RSA PUBLIC KEY-----\\r\\n`.trim();\\r\\n\\r\\n    let pkcs1_public_pem = `\\r\\nMEgCQQCrI0pQ/ERRpJ3Ou190XJedFq846nDYP52rOtXyDxlFK5D3p6JJu2RwsKwy\\r\\nlsQ9xY0xYPpRZUZKMEeR7e9gmRNLAgMBAAE=\\r\\n`.trim();\\r\\n\\r\\n    let pkcs8_public = `\\r\\n-----BEGIN PUBLIC KEY-----\\r\\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKsjSlD8RFGknc67X3Rcl50WrzjqcNg/\\r\\nnas61fIPGUUrkPenokm7ZHCwrDKWxD3FjTFg+lFlRkowR5Ht72CZE0sCAwEAAQ==\\r\\n-----END PUBLIC KEY-----`.trim();\\r\\n\\r\\n    let pkcs8_public_pem = `\\r\\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKsjSlD8RFGknc67X3Rcl50WrzjqcNg/\\r\\nnas61fIPGUUrkPenokm7ZHCwrDKWxD3FjTFg+lFlRkowR5Ht72CZE0sCAwEAAQ==\\r\\n`.trim();\\r\\n\\r\\n    let pkcs1_private = `\\r\\n-----BEGIN RSA PRIVATE KEY-----\\r\\nMIIBOAIBAAJBAKsjSlD8RFGknc67X3Rcl50WrzjqcNg/nas61fIPGUUrkPenokm7\\r\\nZHCwrDKWxD3FjTFg+lFlRkowR5Ht72CZE0sCAwEAAQI/b6OV1z65UokQaMvSeRXt\\r\\n0Yv6wiYtduQI9qpq5nzy/ytaqsbBfClNTi/HifKPKxlRouWFkc518EQI8LBxoarJ\\r\\nAiEA4DaONMplV8PQNa3TKn2F+SDEvLOCjdL0kHKdN90Ti28CIQDDZnTBaHgZwZbA\\r\\nhS7Bbf5yvwjWMhO6Y7l04/Qm7R+35QIgPuQuqXIoUSD080mp1N5WyRW++atksIF+\\r\\n5lGv9e6GP/MCICnj8y/rl6Pd7tXDN6zcSeqLrfdNsREKhB3dKOCXgW9JAiAFYtFS\\r\\nEJNBXVRTK42SNsZ2hJ/9xLwOwnH2epT8Q43s3Q==\\r\\n-----END RSA PRIVATE KEY-----\\r\\n`.trim()\\r\\n\\r\\n    let pkcs8_private = `\\r\\n-----BEGIN PRIVATE KEY-----\\r\\nMIIBUgIBADANBgkqhkiG9w0BAQEFAASCATwwggE4AgEAAkEAqyNKUPxEUaSdzrtf\\r\\ndFyXnRavOOpw2D+dqzrV8g8ZRSuQ96eiSbtkcLCsMpbEPcWNMWD6UWVGSjBHke3v\\r\\nYJkTSwIDAQABAj9vo5XXPrlSiRBoy9J5Fe3Ri/rCJi125Aj2qmrmfPL/K1qqxsF8\\r\\nKU1OL8eJ8o8rGVGi5YWRznXwRAjwsHGhqskCIQDgNo40ymVXw9A1rdMqfYX5IMS8\\r\\ns4KN0vSQcp033ROLbwIhAMNmdMFoeBnBlsCFLsFt/nK/CNYyE7pjuXTj9CbtH7fl\\r\\nAiA+5C6pcihRIPTzSanU3lbJFb75q2SwgX7mUa/17oY/8wIgKePzL+uXo93u1cM3\\r\\nrNxJ6out902xEQqEHd0o4JeBb0kCIAVi0VIQk0FdVFMrjZI2xnaEn/3EvA7CcfZ6\\r\\nlPxDjezd\\r\\n-----END PRIVATE KEY-----\\r\\n`.trim()\\r\\n\\r\\n    let data = `\\r\\nNodeRsa\\r\\n这是node-rsa 现在修改集成在drpy里使用`.trim();\\r\\n\\r\\n    let encryptedWithPublic = NODERSA.encryptRSAWithPublicKey(data, pkcs1_public, {\\r\\n        // PublicFormat: \\\"pkcs1-public-pem\\\",\\r\\n        outputEncoding: \\\"base64\\\",\\r\\n        options: {environment: \\\"browser\\\", encryptionScheme: 'pkcs1_oaep'},\\r\\n    });\\r\\n    console.log(\\\"公钥加密\\\");\\r\\n    console.log(encryptedWithPublic);\\r\\n\\r\\n\\r\\n    let decryptedWithPrivate = NODERSA.decryptRSAWithPrivateKey(encryptedWithPublic, pkcs1_private, {\\r\\n        // PublicFormat: \\\"pkcs1-private\\\",\\r\\n        // outEncoding: \\\"hex\\\"\\r\\n        options: {environment: \\\"browser\\\", encryptionScheme: 'pkcs1_oaep'},\\r\\n    });\\r\\n    console.log(\\\"私钥解密\\\");\\r\\n    console.log(decryptedWithPrivate);\\r\\n\\r\\n\\r\\n// https://www.btool.cn/rsa-sign\\r\\n    let pkcs1_sha256_sign = NODERSA.sign(\\\"1\\\", pkcs1_private, {\\r\\n        outputEncoding: \\\"base64\\\",\\r\\n        options: {environment: \\\"browser\\\", encryptionScheme: 'pkcs1', signingScheme: \\\"pkcs1-sha256\\\"},\\r\\n    });\\r\\n    console.log(\\\"pkcs1_sha256_sign\\\");\\r\\n    console.log(pkcs1_sha256_sign);\\r\\n\\r\\n    let pkcs1_sha256_sign_verify = NODERSA.verify(\\\"1\\\", \\\"Oulx2QrgeipKYBtqEDqFb2s/+ndk2cGQxO4CkhU7iBM1vyNmmvqubpsmeoUuN3waGrYZLknSEdwBkfv0tUMpFQ==\\\", pkcs1_private, {\\r\\n        options: {environment: \\\"browser\\\", encryptionScheme: 'pkcs1', signingScheme: \\\"pkcs1-sha256\\\"},\\r\\n    });\\r\\n    console.log(\\\"pkcs1_sha256_sign_verify\\\");\\r\\n    console.log(pkcs1_sha256_sign_verify);\\r\\n\\r\\n    let pkcs1_oaep_sha256 = NODERSA.encryptRSAWithPublicKey(data, `-----BEGIN RSA PUBLIC KEY-----\\r\\nMIIBCgKCAQEA5KOq1gRNyllLNWKQy8sGpZE3Q1ULLSmzZw+eaAhj9lvqn7IsT1du\\r\\nSYn08FfoOA2qMwtz+1O2l1mgzNoSVCyVpVabnTG+C9XKeZXAnJHd8aYA7l7Sxhdm\\r\\nkte+iymYZ0ZBPzijo8938iugtVvqi9UgDmnY3u/NlQDqiL5BGqSxSTd/Sgmy3zD8\\r\\nPYzEa3wD9vehQ5fZZ45vKIq8GNVh2Z8+IGO85FF1OsN7+b2yGJa/FmDDNn0+HP+m\\r\\nPfI+kYBqEVpo0Ztbc3UdxgFwGC8O1n8AQyriwHnSOtIiuBH62J/7qyC/3LEAApRb\\r\\nDd9YszqzmODjQUddZKHmvc638VW+azc0EwIDAQAB\\r\\n-----END RSA PUBLIC KEY-----\\r\\n`, {\\r\\n        outputEncoding: \\\"base64\\\",\\r\\n        options: {\\r\\n            environment: \\\"browser\\\", encryptionScheme: {\\r\\n                scheme: \\\"pkcs1_oaep\\\",\\r\\n                hash: \\\"sha256\\\",\\r\\n            },\\r\\n        }\\r\\n        // options: { environment: \\\"browser\\\", encryptionScheme: 'pkcs1' },\\r\\n    });\\r\\n    console.log(\\\"pkcs1_oaep_sha256\\\");\\r\\n    console.log(pkcs1_oaep_sha256);\\r\\n\\r\\n    decryptedWithPrivate = NODERSA.decryptRSAWithPrivateKey(\\\"kSZesAAyYh2hdsQnYMdGqb6gKAzTauBKouvBzWcc4+F8RvGd0nwO6mVkUMVilPgUuNxjEauHayHiY8gI3Py45UI3+km0rSGyHrS6dHiHgCkMejXHieglYzAB0IxX3Jkm4z/66bdB/D+GFy0oct5fGCMI1UHPjEAYOsazJDa8lBFNbjiWFeb/qiZtIx3vGM7KYPAZzyRf/zPbbQ8zy9xOmRuOl5nnIxgo0Okp3KO/RIPO4GZOSBA8f2lx1UtNwwrXAMpcNavtoqHVcjJ/9lcotXYQFrn5b299pSIRf2gVm8ZJ31SK6Z8cc14nKtvgnmsgClDzIXJ1o1RcDK+knVAySg==\\\", `-----BEGIN RSA PRIVATE KEY-----\\r\\nMIIEpAIBAAKCAQEA5KOq1gRNyllLNWKQy8sGpZE3Q1ULLSmzZw+eaAhj9lvqn7Is\\r\\nT1duSYn08FfoOA2qMwtz+1O2l1mgzNoSVCyVpVabnTG+C9XKeZXAnJHd8aYA7l7S\\r\\nxhdmkte+iymYZ0ZBPzijo8938iugtVvqi9UgDmnY3u/NlQDqiL5BGqSxSTd/Sgmy\\r\\n3zD8PYzEa3wD9vehQ5fZZ45vKIq8GNVh2Z8+IGO85FF1OsN7+b2yGJa/FmDDNn0+\\r\\nHP+mPfI+kYBqEVpo0Ztbc3UdxgFwGC8O1n8AQyriwHnSOtIiuBH62J/7qyC/3LEA\\r\\nApRbDd9YszqzmODjQUddZKHmvc638VW+azc0EwIDAQABAoIBADZ/QGgUzInvsLp/\\r\\nzO2WbfYm39o/uhNAvk9RbLt1TIZbMFhyOpeKynHi3Swwd9xsfWX/U9zS/lGi/m31\\r\\niKrhmaW4OA1G3vqpMcK7TBbFufYwUEaA+ZJX344euH8pIfdzyneMQ4z3Far2dS7l\\r\\nQsmjuilVV2kEFadveXewiYoVOWCu00w6bN8wy2SIHlQn+kIL6HQhWz12iKKflIKu\\r\\neGRdzLHsKmBt6WbY1Wuhx7HU0fAKdlBDPxCHNlI+kybUYE9o5C2vJiaVM5wqJBgZ\\r\\n8Dz8kt1QbLJ910JoLXkLVQ8uC8NJKQwFtqQjTGPnEq0+wbgz6Ij599rKZkwW/xq9\\r\\nl6KoUiECgYEA6Ah42tVdkNW047f03xVYXFH96RgorHRS36mR8Y+ONUq1fwKidovC\\r\\nWjwVujt4OPf3l1W6iyn/F6cu/bsmvPrSc3HTN0B1V31QK4OjgetxQ2PSbTldH02J\\r\\nNPzkt+v+cPxXpx/P5mgt7Weefw5txU547KubGrHUV5rBKFtIx9pj16MCgYEA/EF0\\r\\no19+D24DZAPwlDS5VbEd7FStnwY4oQ5PqbuNOSbSJLMWU0AqzXcRokp8UTyCZ0X3\\r\\nATkS1REq97kShCuR+npTR6a6DlY7sdpPI1SMLNajgB2tkx0EOzX+PfNIbHUd4jpJ\\r\\nI0ZMAHv/OOtkzQHDaeTWBTrzsWm6/nTiykfduNECgYEA46AMD4HpPECqKAs66e5i\\r\\ntI6q7JSKskObWVdcmQEfnSAhVOwcvPb2Ptda6UuV8S0xcwDi88rLOUUFUFzc79+P\\r\\nvTkY38cYVi/VChsluDpk7ptqv0PbGu5Rf+3n4pZdEjI7OvR2W64wAAn67uIUxc7p\\r\\nyiO/ET0K9rYWb6S9jXGtKMkCgYEA2kPAqoO7zZoBMQ7/oR0lp/HC1HRIbiqx4RlC\\r\\n8Lgpb+QZPEwA6zPAVVvLVENi4d+bbcRp/xLlKpraNNJcJSSWAMbLPFoU7sbKjA87\\r\\nHnTPfRSTEA2d3Ibk3F7Rh8TzS3Ti0JZiJjVzGZAwu41iAMifzwaD8K6boUy80eNN\\r\\nQH2CaaECgYBUsLYvC/MiYg3w+LGOONuQongoVUXjGqnw2bjVa9RK7lwRdXPUqJ51\\r\\nMpVO98IkoLvGSI/0sGNP3GKNhC+eMGjJAVwFyEuOn+JsmMv9Y9uStIVi5tIHIhKw\\r\\nm7mp8il0kaftHdSxTbspG3tZ2fjIiFIZkLEOmRpd7ogWumgOajzUdA==\\r\\n-----END RSA PRIVATE KEY-----`, {\\r\\n        // PublicFormat: \\\"pkcs1-private\\\",\\r\\n        // outEncoding: \\\"hex\\\"\\r\\n        options: {environment: \\\"browser\\\", encryptionScheme: 'pkcs1_oaep'},\\r\\n    });\\r\\n    console.log('decryptedWithPrivate');\\r\\n    console.log(decryptedWithPrivate);\\r\\n\\r\\n\\r\\n    (() => {\\r\\n        let key = new NODERSA.NodeRSA({b: 1024});\\r\\n        key.setOptions({encryptionScheme: 'pkcs1'})\\r\\n        let text = `你好drpy node-ras`;\\r\\n        let encrypted = key.encrypt(text, 'base64');\\r\\n        console.log('encrypted: ', encrypted);\\r\\n        const decrypted = key.decrypt(encrypted, 'utf8');\\r\\n        console.log('decrypted: ', decrypted);\\r\\n    })();\\r\\n    let t2 = new Date().getTime();\\r\\n    console.log('rsa_demo_test 测试耗时:' + (t2 - t1) + '毫秒');\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * 执行预处理代码\\r\\n */\\r\\nfunction pre() {\\r\\n    if (typeof (rule.预处理) === 'string' && rule.预处理 && rule.预处理.trim()) {\\r\\n        let code = rule.预处理.trim();\\r\\n        console.log(\\\"执行预处理代码:\\\" + code);\\r\\n        if (code.startsWith('js:')) {\\r\\n            code = code.replace('js:', '');\\r\\n        }\\r\\n        try {\\r\\n            // code里可以进行get 或者 post请求cookie并改变rule.headers 里的cookie\\r\\n            //  直接操作 rule_fetch_params 这个变量 .headers.Cookie\\r\\n            eval(code);\\r\\n        } catch (e) {\\r\\n            console.log('预处理执行失败:' + e.message);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlet rule = {};\\r\\nlet vercode = typeof (pdfl) === 'function' ? 'drpy2.1' : 'drpy2';\\r\\nconst VERSION = vercode + ' 3.9.50beta29 20240613';\\r\\n/** 已知问题记录\\r\\n * 1.影魔的jinjia2引擎不支持 {{fl}}对象直接渲染 (有能力解决的话尽量解决下，支持对象直接渲染字符串转义,如果加了|safe就不转义)[影魔牛逼，最新的文件发现这问题已经解决了]\\r\\n * Array.prototype.append = Array.prototype.push; 这种js执行后有毛病,for in 循环列表会把属性给打印出来 (这个大毛病需要重点排除一下)\\r\\n * 2.import es6py.js但是里面的函数没有被装载进来.比如drpy规则报错setResult2 is undefiend(合并文件了可以不管了)\\r\\n * 3.无法重复导入cheerio(怎么解决drpy和parseTag里都需要导入cheerio的问题) 无法在副文件导入cheerio (现在是全部放在drpy一个文件里了,凑合解决?)\\r\\n * 4.有个错误不知道哪儿来的 executeScript: com.quickjs.JSObject$Undefined cannot be cast to java.lang.String 在 点击选集播放打印init_test_end后面打印(貌似不影响使用)\\r\\n * 5.需要实现 stringify 函数,比起JSON.strifngify函数,它会原封不动保留中文不会编码unicode\\r\\n * 6.base64Encode,base64Decode,md5函数还没有实现 (抄影魔代码实现了)\\r\\n * 7.eval(getCryptoJS());还没有实现 (可以空实现了,以后遇到能忽略)\\r\\n * done:  jsp:{pdfa,pdfh,pd},json:{pdfa,pdfh,pd},jq:{pdfa,pdfh,pd}\\r\\n * 8.req函数不支持传递字符串的data参数 {'content-type':'text/plain'} 类型数据，因此无法直接调用alist的ocr接口\\r\\n *  * 电脑看日志调试\\r\\n adb tcpip 5555\\r\\n adb connect 192.168.10.192\\r\\n adb devices -l\\r\\n adb logcat -c\\r\\n adb logcat | grep -i QuickJS\\r\\n adb logcat -c -b events\\r\\n adb logcat -c -b main -b events -b radio -b system\\r\\n adb logcat > 2.log DRPY:E | grep -i QuickJS\\r\\n * **/\\r\\n\\r\\n\\r\\n/*** 以下是内置变量和解析方法 **/\\r\\nconst MOBILE_UA = 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.91 Mobile Safari/537.36';\\r\\nconst PC_UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36';\\r\\nconst UA = 'Mozilla/5.0';\\r\\nconst UC_UA = 'Mozilla/5.0 (Linux; U; Android 9; zh-CN; MI 9 Build/PKQ1.181121.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.5.5.1035 Mobile Safari/537.36';\\r\\nconst IOS_UA = 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1';\\r\\nconst RULE_CK = 'cookie'; // 源cookie的key值\\r\\n// const KEY = typeof(key)!=='undefined'&&key?key:'drpy_' + (rule.title || rule.host); // 源的唯一标识\\r\\nconst CATE_EXCLUDE = '首页|留言|APP|下载|资讯|新闻|动态';\\r\\nconst TAB_EXCLUDE = '猜你|喜欢|下载|剧情|榜|评论';\\r\\nconst OCR_RETRY = 3;//ocr验证重试次数\\r\\n// const OCR_API = 'http://drpy.nokia.press:8028/ocr/drpy/text';//ocr在线识别接口\\r\\nconst OCR_API = 'https://api.nn.ci/ocr/b64/text';//ocr在线识别接口\\r\\nif (typeof (MY_URL) === 'undefined') {\\r\\n    var MY_URL; // 全局注入变量,pd函数需要\\r\\n}\\r\\nvar HOST;\\r\\nvar RKEY; // 源的唯一标识\\r\\nvar fetch;\\r\\nvar print;\\r\\nvar log;\\r\\nvar rule_fetch_params;\\r\\nvar fetch_params; // 每个位置单独的\\r\\nvar oheaders;\\r\\n// var play_url; // 二级详情页注入变量,为了适配js模式0 (不在这里定义了,直接二级里定义了个空字符串)\\r\\nvar _pdfh;\\r\\nvar _pdfa;\\r\\nvar _pd;\\r\\n// const DOM_CHECK_ATTR = ['url', 'src', 'href', 'data-original', 'data-src'];\\r\\nconst DOM_CHECK_ATTR = /(url|src|href|-original|-src|-play|-url|style)$/;\\r\\n// 过滤特殊链接,不走urlJoin\\r\\nconst SPECIAL_URL = /^(ftp|magnet|thunder|ws):/;\\r\\nconst NOADD_INDEX = /:eq|:lt|:gt|:first|:last|^body$|^#/;  // 不自动加eq下标索引\\r\\nconst URLJOIN_ATTR = /(url|src|href|-original|-src|-play|-url|style)$|^(data-|url-|src-)/;  // 需要自动urljoin的属性\\r\\nconst SELECT_REGEX = /:eq|:lt|:gt|#/g;\\r\\nconst SELECT_REGEX_A = /:eq|:lt|:gt/g;\\r\\n\\r\\n// 增加$js工具，支持$js.toString(()=>{});\\r\\nconst $js = {\\r\\n    toString(func) {\\r\\n        let strfun = func.toString();\\r\\n        return strfun.replace(/^\\\\(\\\\)(\\\\s+)?=>(\\\\s+)?\\\\{/, \\\"js:\\\").replace(/\\\\}$/, '');\\r\\n    }\\r\\n};\\r\\n\\r\\nfunction window_b64() {\\r\\n    let b64map = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n    let base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\\r\\n\\r\\n    function btoa(str) {\\r\\n        var out, i, len;\\r\\n        var c1, c2, c3;\\r\\n        len = str.length;\\r\\n        i = 0;\\r\\n        out = \\\"\\\";\\r\\n        while (i < len) {\\r\\n            c1 = str.charCodeAt(i++) & 0xff;\\r\\n            if (i == len) {\\r\\n                out += b64map.charAt(c1 >> 2);\\r\\n                out += b64map.charAt((c1 & 0x3) << 4);\\r\\n                out += \\\"==\\\";\\r\\n                break;\\r\\n            }\\r\\n            c2 = str.charCodeAt(i++);\\r\\n            if (i == len) {\\r\\n                out += b64map.charAt(c1 >> 2);\\r\\n                out += b64map.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\\r\\n                out += b64map.charAt((c2 & 0xF) << 2);\\r\\n                out += \\\"=\\\";\\r\\n                break;\\r\\n            }\\r\\n            c3 = str.charCodeAt(i++);\\r\\n            out += b64map.charAt(c1 >> 2);\\r\\n            out += b64map.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\\r\\n            out += b64map.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));\\r\\n            out += b64map.charAt(c3 & 0x3F);\\r\\n        }\\r\\n        return out;\\r\\n    }\\r\\n\\r\\n    function atob(str) {\\r\\n        var c1, c2, c3, c4;\\r\\n        var i, len, out;\\r\\n        len = str.length;\\r\\n        i = 0;\\r\\n        out = \\\"\\\";\\r\\n        while (i < len) {\\r\\n            do {\\r\\n                c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\\r\\n            } while (i < len && c1 == -1);\\r\\n            if (c1 == -1) break;\\r\\n            do {\\r\\n                c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\\r\\n            } while (i < len && c2 == -1);\\r\\n            if (c2 == -1) break;\\r\\n            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\\r\\n            do {\\r\\n                c3 = str.charCodeAt(i++) & 0xff;\\r\\n                if (c3 == 61) return out;\\r\\n                c3 = base64DecodeChars[c3];\\r\\n            } while (i < len && c3 == -1);\\r\\n            if (c3 == -1) break;\\r\\n            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\\r\\n            do {\\r\\n                c4 = str.charCodeAt(i++) & 0xff;\\r\\n                if (c4 == 61) return out;\\r\\n                c4 = base64DecodeChars[c4];\\r\\n            } while (i < len && c4 == -1);\\r\\n            if (c4 == -1) break;\\r\\n            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);\\r\\n        }\\r\\n        return out;\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        atob,\\r\\n        btoa\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n es6py扩展\\r\\n */\\r\\nif (typeof atob != 'function' || typeof btoa != 'function') {\\r\\n    var {atob, btoa} = window_b64();\\r\\n}\\r\\n\\r\\nif (typeof Object.assign != 'function') {\\r\\n    Object.assign = function () {\\r\\n        let target = arguments[0];\\r\\n        for (let i = 1; i < arguments.length; i++) {\\r\\n            let source = arguments[i];\\r\\n            for (let key in source) {\\r\\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\\r\\n                    target[key] = source[key];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return target;\\r\\n    };\\r\\n}\\r\\nif (!String.prototype.includes) {\\r\\n    String.prototype.includes = function (search, start) {\\r\\n        if (typeof start !== 'number') {\\r\\n            start = 0;\\r\\n        }\\r\\n\\r\\n        if (start + search.length > this.length) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return this.indexOf(search, start) !== -1;\\r\\n        }\\r\\n    };\\r\\n}\\r\\n\\r\\nif (!Array.prototype.includes) {\\r\\n    Object.defineProperty(Array.prototype, 'includes', {\\r\\n        value: function (searchElement, fromIndex) {\\r\\n\\r\\n            if (this == null) {//this是空或者未定义，抛出错误\\r\\n                throw new TypeError('\\\"this\\\" is null or not defined');\\r\\n            }\\r\\n\\r\\n            var o = Object(this);//将this转变成对象\\r\\n            var len = o.length >>> 0;//无符号右移0位，获取对象length属性，如果未定义就会变成0\\r\\n\\r\\n            if (len === 0) {//length为0直接返回false未找到目标值\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            var n = fromIndex | 0;//查找起始索引\\r\\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);//计算正确起始索引，因为有可能是负值\\r\\n\\r\\n            while (k < len) {//从起始索引处开始循环\\r\\n                if (o[k] === searchElement) {//如果某一位置与寻找目标相等，返回true，找到了\\r\\n                    return true;\\r\\n                }\\r\\n                k++;\\r\\n            }\\r\\n            return false;//未找到，返回false\\r\\n        },\\r\\n        enumerable: false\\r\\n    });\\r\\n}\\r\\nif (typeof String.prototype.startsWith != 'function') {\\r\\n    String.prototype.startsWith = function (prefix) {\\r\\n        return this.slice(0, prefix.length) === prefix;\\r\\n    };\\r\\n}\\r\\nif (typeof String.prototype.endsWith != 'function') {\\r\\n    String.prototype.endsWith = function (suffix) {\\r\\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\\r\\n    };\\r\\n}\\r\\nObject.defineProperty(Object.prototype, 'myValues', {\\r\\n    value: function (obj) {\\r\\n        if (obj == null) {\\r\\n            throw new TypeError(\\\"Cannot convert undefined or null to object\\\");\\r\\n        }\\r\\n        var res = []\\r\\n        for (var k in obj) {\\r\\n            if (obj.hasOwnProperty(k)) {//需判断是否是本身的属性\\r\\n                res.push(obj[k]);\\r\\n            }\\r\\n        }\\r\\n        return res;\\r\\n    },\\r\\n    enumerable: false\\r\\n});\\r\\nif (typeof Object.prototype.values != 'function') {\\r\\n    Object.defineProperty(Object.prototype, 'values', {\\r\\n        value: function (obj) {\\r\\n            if (obj == null) {\\r\\n                throw new TypeError(\\\"Cannot convert undefined or null to object\\\");\\r\\n            }\\r\\n            var res = []\\r\\n            for (var k in obj) {\\r\\n                if (obj.hasOwnProperty(k)) {//需判断是否是本身的属性\\r\\n                    res.push(obj[k]);\\r\\n                }\\r\\n            }\\r\\n            return res;\\r\\n        },\\r\\n        enumerable: false\\r\\n    });\\r\\n}\\r\\nif (typeof Array.prototype.join != 'function') {\\r\\n    Object.defineProperty(Array.prototype, 'join', {\\r\\n        value: function (emoji) {\\r\\n            // emoji = emoji||',';\\r\\n            emoji = emoji || '';\\r\\n            let self = this;\\r\\n            let str = \\\"\\\";\\r\\n            let i = 0;\\r\\n            if (!Array.isArray(self)) {\\r\\n                throw String(self) + 'is not Array'\\r\\n            }\\r\\n            if (self.length === 0) {\\r\\n                return ''\\r\\n            }\\r\\n            if (self.length === 1) {\\r\\n                return String(self[0])\\r\\n            }\\r\\n            i = 1;\\r\\n            str = this[0];\\r\\n            for (; i < self.length; i++) {\\r\\n                str += String(emoji) + String(self[i]);\\r\\n            }\\r\\n            return str;\\r\\n        },\\r\\n        enumerable: false\\r\\n    });\\r\\n}\\r\\nif (typeof Array.prototype.toReversed != 'function') {\\r\\n    Object.defineProperty(Array.prototype, 'toReversed', {\\r\\n        value: function () {\\r\\n            const clonedList = this.slice();\\r\\n            // 倒序新数组\\r\\n            const reversedList = clonedList.reverse();\\r\\n            return reversedList;\\r\\n        },\\r\\n        enumerable: false\\r\\n    });\\r\\n}\\r\\n\\r\\nObject.defineProperty(Array.prototype, 'append', {\\r\\n    value: Array.prototype.push,\\r\\n    enumerable: false\\r\\n});\\r\\nObject.defineProperty(String.prototype, 'strip', {\\r\\n    value: String.prototype.trim,\\r\\n    enumerable: false\\r\\n});\\r\\nObject.defineProperty(String.prototype, 'rstrip', {\\r\\n    value: function (chars) {\\r\\n        let regex = new RegExp(chars + \\\"$\\\");\\r\\n        return this.replace(regex, \\\"\\\");\\r\\n    },\\r\\n    enumerable: false\\r\\n});\\r\\n\\r\\nfunction 是否正版(vipUrl) {\\r\\n    let flag = new RegExp('qq\\\\.com|iqiyi\\\\.com|youku\\\\.com|mgtv\\\\.com|bilibili\\\\.com|sohu\\\\.com|ixigua\\\\.com|pptv\\\\.com|miguvideo\\\\.com|le\\\\.com|1905\\\\.com|fun\\\\.tv');\\r\\n    return flag.test(vipUrl);\\r\\n}\\r\\n\\r\\nfunction urlDeal(vipUrl) {\\r\\n    if (!vipUrl) {\\r\\n        return ''\\r\\n    }\\r\\n    if (!是否正版(vipUrl)) {\\r\\n        return vipUrl\\r\\n    }\\r\\n    if (!/miguvideo/.test(vipUrl)) {\\r\\n        vipUrl = vipUrl.split('#')[0].split('?')[0];\\r\\n    }\\r\\n    return vipUrl\\r\\n}\\r\\n\\r\\nfunction setResult(d) {\\r\\n    if (!Array.isArray(d)) {\\r\\n        return []\\r\\n    }\\r\\n    VODS = [];\\r\\n    // print(d);\\r\\n    d.forEach(function (it) {\\r\\n        let obj = {\\r\\n            vod_id: it.url || '',\\r\\n            vod_name: it.title || '',\\r\\n            vod_remarks: it.desc || '',\\r\\n            vod_content: it.content || '',\\r\\n            vod_pic: it.pic_url || it.img || '',\\r\\n        };\\r\\n        let keys = Object.keys(it);\\r\\n        if (keys.includes('tname')) {\\r\\n            obj.type_name = it.tname || '';\\r\\n        }\\r\\n        if (keys.includes('tid')) {\\r\\n            obj.type_id = it.tid || '';\\r\\n        }\\r\\n        if (keys.includes('year')) {\\r\\n            obj.vod_year = it.year || '';\\r\\n        }\\r\\n        if (keys.includes('actor')) {\\r\\n            obj.vod_actor = it.actor || '';\\r\\n        }\\r\\n        if (keys.includes('director')) {\\r\\n            obj.vod_director = it.director || '';\\r\\n        }\\r\\n        if (keys.includes('area')) {\\r\\n            obj.vod_area = it.area || '';\\r\\n        }\\r\\n        VODS.push(obj);\\r\\n    });\\r\\n    return VODS\\r\\n}\\r\\n\\r\\nfunction setResult2(res) {\\r\\n    VODS = res.list || [];\\r\\n    return VODS\\r\\n}\\r\\n\\r\\nfunction setHomeResult(res) {\\r\\n    if (!res || typeof (res) !== 'object') {\\r\\n        return []\\r\\n    }\\r\\n    return setResult(res.list);\\r\\n}\\r\\n\\r\\n// 猫了个咪\\r\\nfunction rc(js) {\\r\\n    if (js === 'maomi_aes.js') {\\r\\n        var a = CryptoJS.enc.Utf8.parse(\\\"625222f9149e961d\\\");\\r\\n        var t = CryptoJS.enc.Utf8.parse(\\\"5efdtf6060e2o330\\\");\\r\\n        return {\\r\\n            De: function (word) {\\r\\n                word = CryptoJS.enc.Hex.parse(word)\\r\\n                return CryptoJS.AES.decrypt(CryptoJS.enc.Base64.stringify(word), a, {\\r\\n                    iv: t,\\r\\n                    mode: CryptoJS.mode.CBC,\\r\\n                    padding: CryptoJS.pad.Pkcs7\\r\\n                }).toString(CryptoJS.enc.Utf8)\\r\\n            },\\r\\n            En: function (word) {\\r\\n                // print(a);\\r\\n                // print(word);\\r\\n                var Encrypted = CryptoJS.AES.encrypt(word, a, {\\r\\n                    iv: t,\\r\\n                    mode: CryptoJS.mode.CBC,\\r\\n                    padding: CryptoJS.pad.Pkcs7\\r\\n                });\\r\\n                return Encrypted.ciphertext.toString();\\r\\n            }\\r\\n        };\\r\\n    }\\r\\n    return {};\\r\\n}\\r\\n\\r\\n// 千万不要用for in 推荐 forEach (for in 会打乱顺序)\\r\\n//猫函数\\r\\nfunction maoss(jxurl, ref, key) {\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    eval(getCryptoJS());\\r\\n    try {\\r\\n        var getVideoInfo = function (text) {\\r\\n            return CryptoJS.AES.decrypt(text, key, {iv: iv, padding: CryptoJS.pad.Pkcs7}).toString(CryptoJS.enc.Utf8);\\r\\n        };\\r\\n        var token_key = key == undefined ? 'dvyYRQlnPRCMdQSe' : key;\\r\\n        if (ref) {\\r\\n            var html = request(jxurl, {\\r\\n                headers: {\\r\\n                    'Referer': ref\\r\\n                }\\r\\n            });\\r\\n        } else {\\r\\n            var html = request(jxurl);\\r\\n        }\\r\\n        // print(html);\\r\\n        if (html.indexOf('&btwaf=') != -1) {\\r\\n            html = request(jxurl + '&btwaf' + html.match(/&btwaf(.*?)\\\"/)[1], {\\r\\n                headers: {\\r\\n                    'Referer': ref\\r\\n                }\\r\\n            })\\r\\n        }\\r\\n        var token_iv = html.split('_token = \\\"')[1].split('\\\"')[0];\\r\\n        var key = CryptoJS.enc.Utf8.parse(token_key);\\r\\n        var iv = CryptoJS.enc.Utf8.parse(token_iv);\\r\\n        // log(\\\"iv:\\\"+iv);\\r\\n        //  log(html);\\r\\n        // print(key);\\r\\n        // print(iv);\\r\\n        eval(html.match(/var config = {[\\\\s\\\\S]*?}/)[0] + '');\\r\\n        // config.url = config.url.replace(/,/g,'');\\r\\n        // print(config.url);\\r\\n        if (!config.url.startsWith('http')) {\\r\\n            //config.url = decodeURIComponent(AES(config.url, key, iv));\\r\\n            config.url = CryptoJS.AES.decrypt(config.url, key, {\\r\\n                iv: iv,\\r\\n                padding: CryptoJS.pad.Pkcs7\\r\\n            }).toString(CryptoJS.enc.Utf8)\\r\\n        }\\r\\n        return config.url;\\r\\n    } catch (e) {\\r\\n        return '';\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 将base64编码进行url编译\\r\\n * @param str\\r\\n * @returns {string}\\r\\n */\\r\\nfunction urlencode(str) {\\r\\n    str = (str + '').toString();\\r\\n    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\\\(/g, '%28').replace(/\\\\)/g, '%29').replace(/\\\\*/g, '%2A').replace(/%20/g, '+');\\r\\n}\\r\\n\\r\\n/**\\r\\n * url编码,同 encodeURI\\r\\n * @param str\\r\\n * @returns {string}\\r\\n */\\r\\nfunction encodeUrl(str) {\\r\\n    if (typeof (encodeURI) == 'function') {\\r\\n        return encodeURI(str)\\r\\n    } else {\\r\\n        str = (str + '').toString();\\r\\n        return encodeURIComponent(str).replace(/%2F/g, '/').replace(/%3F/g, '?').replace(/%3A/g, ':').replace(/%40/g, '@').replace(/%3D/g, '=').replace(/%3A/g, ':').replace(/%2C/g, ',').replace(/%2B/g, '+').replace(/%24/g, '$');\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction base64Encode(text) {\\r\\n    return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(text));\\r\\n    // return text\\r\\n}\\r\\n\\r\\nfunction base64Decode(text) {\\r\\n    return CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(text));\\r\\n    // return text\\r\\n}\\r\\n\\r\\nfunction md5(text) {\\r\\n    return CryptoJS.MD5(text).toString();\\r\\n}\\r\\n\\r\\nfunction uint8ArrayToBase64(uint8Array) {\\r\\n    let binaryString = String.fromCharCode.apply(null, Array.from(uint8Array));\\r\\n    return btoa(binaryString);\\r\\n}\\r\\n\\r\\nfunction Utf8ArrayToStr(array) {\\r\\n    var out, i, len, c;\\r\\n    var char2, char3;\\r\\n    out = \\\"\\\";\\r\\n    len = array.length;\\r\\n    i = 0;\\r\\n    while (i < len) {\\r\\n        c = array[i++];\\r\\n        switch (c >> 4) {\\r\\n            case 0:\\r\\n            case 1:\\r\\n            case 2:\\r\\n            case 3:\\r\\n            case 4:\\r\\n            case 5:\\r\\n            case 6:\\r\\n            case 7:\\r\\n                out += String.fromCharCode(c);\\r\\n                break;\\r\\n            case 12:\\r\\n            case 13:\\r\\n                char2 = array[i++];\\r\\n                out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));\\r\\n                break;\\r\\n            case 14:\\r\\n                char2 = array[i++];\\r\\n                char3 = array[i++];\\r\\n                out += String.fromCharCode(\\r\\n                    ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\\r\\n                );\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return out;\\r\\n}\\r\\n\\r\\n/**\\r\\n * gzip压缩base64|压缩率80%+\\r\\n * @param str\\r\\n * @returns {string}\\r\\n */\\r\\nfunction gzip(str) {\\r\\n    let arr = pako.gzip(str, {\\r\\n        to: 'string'\\r\\n    });\\r\\n    return uint8ArrayToBase64(arr)\\r\\n}\\r\\n\\r\\n/**\\r\\n * gzip解压base64数据\\r\\n * @param b64Data\\r\\n * @returns {string}\\r\\n */\\r\\nfunction ungzip(b64Data) {\\r\\n    let strData = atob(b64Data);\\r\\n    const charData = strData.split('').map(function (x) {\\r\\n        return x.charCodeAt(0);\\r\\n    });\\r\\n    const binData = new Uint8Array(charData);\\r\\n    const data = pako.inflate(binData);\\r\\n    return Utf8ArrayToStr(data);\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字符串按指定编码\\r\\n * @param input\\r\\n * @param encoding\\r\\n * @returns {*}\\r\\n */\\r\\nfunction encodeStr(input, encoding) {\\r\\n    encoding = encoding || 'gbk';\\r\\n    if (encoding.startsWith('gb')) {\\r\\n        const strTool = gbkTool();\\r\\n        input = strTool.encode(input);\\r\\n    }\\r\\n    return input\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字符串指定解码\\r\\n * @param input\\r\\n * @param encoding\\r\\n * @returns {*}\\r\\n */\\r\\nfunction decodeStr(input, encoding) {\\r\\n    encoding = encoding || 'gbk';\\r\\n    if (encoding.startsWith('gb')) {\\r\\n        const strTool = gbkTool();\\r\\n        input = strTool.decode(input);\\r\\n    }\\r\\n    return input\\r\\n}\\r\\n\\r\\nfunction getCryptoJS() {\\r\\n    // return request('https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/libs/crypto-hiker.js');\\r\\n    return 'console.log(\\\"CryptoJS已装载\\\");'\\r\\n}\\r\\n\\r\\n// 封装的RSA加解密类\\r\\nconst RSA = {\\r\\n    decode: function (data, key, option) {\\r\\n        option = option || {};\\r\\n        if (typeof (JSEncrypt) === 'function') {\\r\\n            let chunkSize = option.chunkSize || 117; // 默认分段长度为117\\r\\n            let privateKey = this.getPrivateKey(key); // 获取私钥\\r\\n            const decryptor = new JSEncrypt(); //创建解密对象实例\\r\\n            decryptor.setPrivateKey(privateKey); //设置秘钥\\r\\n            let uncrypted = '';\\r\\n            // uncrypted = decryptor.decrypt(data);\\r\\n            uncrypted = decryptor.decryptUnicodeLong(data);\\r\\n            return uncrypted;\\r\\n        } else {\\r\\n            return false\\r\\n        }\\r\\n    },\\r\\n    encode: function (data, key, option) {\\r\\n        option = option || {};\\r\\n        if (typeof (JSEncrypt) === 'function') {\\r\\n            let chunkSize = option.chunkSize || 117; // 默认分段长度为117\\r\\n            let publicKey = this.getPublicKey(key); // 获取公钥\\r\\n            const encryptor = new JSEncrypt();\\r\\n            encryptor.setPublicKey(publicKey); // 设置公钥\\r\\n            let encrypted = ''; // 加密结果\\r\\n            // const textLen = data.length; // 待加密文本长度\\r\\n            // let offset = 0; // 分段偏移量\\r\\n            // // 分段加密\\r\\n            // while (offset < textLen) {\\r\\n            //     let chunk = data.slice(offset, chunkSize); // 提取分段数据\\r\\n            //     let enc = encryptor.encrypt(chunk); // 加密分段数据\\r\\n            //     encrypted += enc; // 连接加密结果\\r\\n            //     offset += chunkSize; // 更新偏移量\\r\\n            // }\\r\\n            encrypted = encryptor.encryptUnicodeLong(data);\\r\\n            return encrypted\\r\\n        } else {\\r\\n            return false\\r\\n        }\\r\\n    },\\r\\n    fixKey(key, prefix, endfix) {\\r\\n        if (!key.includes(prefix)) {\\r\\n            key = prefix + key;\\r\\n        }\\r\\n        if (!key.includes(endfix)) {\\r\\n            key += endfix\\r\\n        }\\r\\n        return key\\r\\n    },\\r\\n    getPrivateKey(key) {\\r\\n        let prefix = '-----BEGIN RSA PRIVATE KEY-----';\\r\\n        let endfix = '-----END RSA PRIVATE KEY-----';\\r\\n        return this.fixKey(key, prefix, endfix);\\r\\n    },\\r\\n    getPublicKey(key) {\\r\\n        let prefix = '-----BEGIN PUBLIC KEY-----';\\r\\n        let endfix = '-----END PUBLIC KEY-----';\\r\\n        return this.fixKey(key, prefix, endfix);\\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * 获取壳子返回的代理地址\\r\\n * @returns {string|*}\\r\\n */\\r\\nfunction getProxyUrl() {\\r\\n    if (typeof (getProxy) === 'function') {//判断壳子里有getProxy函数就执行取返回结果。否则取默认的本地\\r\\n        return getProxy(true)\\r\\n    } else {\\r\\n        return 'http://127.0.0.1:9978/proxy?do=js'\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 根据正则处理原始m3u8里的广告ts片段，自动修复相对链接\\r\\n * @param m3u8_text m3u8原始文本，里面是最末级的只含ts片段的。不支持嵌套m3u8链接\\r\\n * @param m3u8_url m3u8原始地址\\r\\n * @param ad_remove 正则表达式如: reg:/video/adjump(.*?)ts\\r\\n * @returns {string|DocumentFragment|*|string}\\r\\n */\\r\\nfunction fixAdM3u8(m3u8_text, m3u8_url, ad_remove) {\\r\\n    if ((!m3u8_text && !m3u8_url) || (!m3u8_text && m3u8_url && !m3u8_url.startsWith('http'))) {\\r\\n        return ''\\r\\n    }\\r\\n    if (!m3u8_text) {\\r\\n        log('m3u8_url:' + m3u8_url);\\r\\n        m3u8_text = request(m3u8_url);\\r\\n    }\\r\\n    log('len(m3u8_text):' + m3u8_text.length);\\r\\n    if (!ad_remove) {\\r\\n        return m3u8_text\\r\\n    }\\r\\n    if (ad_remove.startsWith('reg:')) {\\r\\n        ad_remove = ad_remove.slice(4)\\r\\n    } else if (ad_remove.startsWith('js:')) {\\r\\n        ad_remove = ad_remove.slice(3)\\r\\n    }\\r\\n    let m3u8_start = m3u8_text.slice(0, m3u8_text.indexOf('#EXTINF')).trim();\\r\\n    let m3u8_body = m3u8_text.slice(m3u8_text.indexOf('#EXTINF'), m3u8_text.indexOf('#EXT-X-ENDLIST')).trim();\\r\\n    let m3u8_end = m3u8_text.slice(m3u8_text.indexOf('#EXT-X-ENDLIST')).trim();\\r\\n    let murls = [];\\r\\n    let m3_body_list = m3u8_body.split('\\\\n');\\r\\n    let m3_len = m3_body_list.length;\\r\\n    let i = 0;\\r\\n    while (i < m3_len) {\\r\\n        let mi = m3_body_list[i];\\r\\n        let mi_1 = m3_body_list[i + 1];\\r\\n        if (mi.startsWith('#EXTINF')) {\\r\\n            murls.push([mi, mi_1].join('&'));\\r\\n            i += 2\\r\\n        } else if (mi.startsWith('#EXT-X-DISCONTINUITY')) {\\r\\n            let mi_2 = m3_body_list[i + 2];\\r\\n            murls.push([mi, mi_1, mi_2].join('&'));\\r\\n            i += 3\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    let new_m3u8_body = [];\\r\\n    for (let murl of murls) {\\r\\n        if (ad_remove && new RegExp(ad_remove).test(murl)) {\\r\\n\\r\\n        } else {\\r\\n            let murl_list = murl.split('&');\\r\\n            if (!murl_list[murl_list.length - 1].startsWith('http') && m3u8_url.startsWith('http')) {\\r\\n                murl_list[murl_list.length - 1] = urljoin(m3u8_url, murl_list[murl_list.length - 1]);\\r\\n            }\\r\\n            murl_list.forEach((it) => {\\r\\n                new_m3u8_body.push(it);\\r\\n            });\\r\\n        }\\r\\n\\r\\n    }\\r\\n    new_m3u8_body = new_m3u8_body.join('\\\\n').trim();\\r\\n    m3u8_text = [m3u8_start, new_m3u8_body, m3u8_end].join('\\\\n').trim();\\r\\n    return m3u8_text\\r\\n}\\r\\n\\r\\n/**\\r\\n *  智能对比去除广告。支持嵌套m3u8。只需要传入播放地址\\r\\n * @param m3u8_url m3u8播放地址\\r\\n * @param headers 自定义访问m3u8的请求头,可以不传\\r\\n * @returns {string}\\r\\n */\\r\\nfunction fixAdM3u8Ai(m3u8_url, headers) {\\r\\n    let ts = new Date().getTime();\\r\\n    let option = headers ? {headers: headers} : {};\\r\\n\\r\\n    function b(s1, s2) {\\r\\n        let i = 0;\\r\\n        while (i < s1.length) {\\r\\n            if (s1[i] !== s2[i]) {\\r\\n                break\\r\\n            }\\r\\n            i++\\r\\n        }\\r\\n        return i;\\r\\n    }\\r\\n\\r\\n    function reverseString(str) {\\r\\n        return str.split('').reverse().join('');\\r\\n    }\\r\\n\\r\\n    //log('播放的地址：' + m3u8_url);\\r\\n    let m3u8 = request(m3u8_url, option);\\r\\n    //log('m3u8处理前:' + m3u8);\\r\\n    m3u8 = m3u8.trim().split('\\\\n').map(it => it.startsWith('#') ? it : urljoin(m3u8_url, it)).join('\\\\n');\\r\\n    //log('m3u8处理后:============:' + m3u8);\\r\\n    // 获取嵌套m3u8地址\\r\\n    m3u8 = m3u8.replace(/\\\\n\\\\n/ig, '\\\\n');//删除多余的换行符\\r\\n    let last_url = m3u8.split('\\\\n').slice(-1)[0];\\r\\n    if (last_url.length < 5) {\\r\\n        last_url = m3u8.split('\\\\n').slice(-2)[0];\\r\\n    }\\r\\n\\r\\n    if (last_url.includes('.m3u8') && last_url !== m3u8_url) {\\r\\n        m3u8_url = urljoin2(m3u8_url, last_url);\\r\\n        log('嵌套的m3u8_url:' + m3u8_url);\\r\\n        m3u8 = request(m3u8_url, option);\\r\\n    }\\r\\n    //log('----处理有广告的地址----');\\r\\n    let s = m3u8.trim().split('\\\\n').filter(it => it.trim()).join('\\\\n');\\r\\n    let ss = s.split('\\\\n')\\r\\n    //找出第一条播放地址\\r\\n    let firststr = ss.find(x => !x.startsWith('#'));\\r\\n    let maxl = 0;//最大相同字符\\r\\n    let firststrlen = firststr.length;\\r\\n    //log('字符串长度：' + firststrlen);\\r\\n    let ml = Math.round(ss.length / 2).toString().length;//取数据的长度的位数\\r\\n    //log('数据条数的长度：' + ml);\\r\\n    //找出最后一条播放地址\\r\\n    let maxc = 0;\\r\\n    let laststr = ss.toReversed().find((x) => {\\r\\n        if (!x.startsWith('#')) {\\r\\n            let k = b(reverseString(firststr), reverseString(x));\\r\\n            maxl = b(firststr, x);\\r\\n            maxc++;\\r\\n            if (firststrlen - maxl <= ml + k || maxc > 10) {\\r\\n                return true\\r\\n            }\\r\\n        }\\r\\n        return false\\r\\n    });\\r\\n    log('最后一条切片：' + laststr);\\r\\n    //log('最小相同字符长度：' + maxl);\\r\\n    let ad_urls = [];\\r\\n    for (let i = 0; i < ss.length; i++) {\\r\\n        let s = ss[i];\\r\\n        if (!s.startsWith('#')) {\\r\\n            if (b(firststr, s) < maxl) {\\r\\n                ad_urls.push(s); // 广告地址加入列表\\r\\n                ss.splice(i - 1, 2);\\r\\n                i = i - 2;\\r\\n            } else {\\r\\n                ss[i] = urljoin(m3u8_url, s);\\r\\n            }\\r\\n        } else {\\r\\n            ss[i] = s.replace(/URI=\\\\\\\"(.*)\\\\\\\"/, 'URI=\\\\\\\"' + urljoin(m3u8_url, '$1') + '\\\\\\\"');\\r\\n        }\\r\\n    }\\r\\n    log('处理的m3u8地址:' + m3u8_url);\\r\\n    log('----广告地址----');\\r\\n    log(ad_urls);\\r\\n    m3u8 = ss.join('\\\\n');\\r\\n    //log('处理完成');\\r\\n    log('处理耗时：' + (new Date().getTime() - ts).toString());\\r\\n    return m3u8\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * 强制正序算法\\r\\n * @param lists  待正序列表\\r\\n * @param key 正序键\\r\\n * @param option 单个元素处理函数\\r\\n * @returns {*}\\r\\n */\\r\\nfunction forceOrder(lists, key, option) {\\r\\n    let start = Math.floor(lists.length / 2);\\r\\n    let end = Math.min(lists.length - 1, start + 1);\\r\\n    if (start >= end) {\\r\\n        return lists;\\r\\n    }\\r\\n    let first = lists[start];\\r\\n    let second = lists[end];\\r\\n    if (key) {\\r\\n        try {\\r\\n            first = first[key];\\r\\n            second = second[key];\\r\\n        } catch (e) {\\r\\n        }\\r\\n    }\\r\\n    if (option && typeof (option) === 'function') {\\r\\n        try {\\r\\n            first = option(first);\\r\\n            second = option(second);\\r\\n        } catch (e) {\\r\\n        }\\r\\n    }\\r\\n    first += '';\\r\\n    second += '';\\r\\n    // console.log(first,second);\\r\\n    if (first.match(/(\\\\d+)/) && second.match(/(\\\\d+)/)) {\\r\\n        let num1 = Number(first.match(/(\\\\d+)/)[1]);\\r\\n        let num2 = Number(second.match(/(\\\\d+)/)[1]);\\r\\n        if (num1 > num2) {\\r\\n            lists.reverse();\\r\\n        }\\r\\n    }\\r\\n    return lists\\r\\n}\\r\\n\\r\\nlet VODS = [];// 一级或者搜索需要的数据列表\\r\\nlet VOD = {};// 二级的单个数据\\r\\nlet TABS = [];// 二级的自定义线路列表 如: TABS=['道长在线','道长在线2']\\r\\nlet LISTS = [];// 二级的自定义选集播放列表 如: LISTS=[['第1集$http://1.mp4','第2集$http://2.mp4'],['第3集$http://1.mp4','第4集$http://2.mp4']]\\r\\n\\r\\n/**\\r\\n * 获取链接的query请求转为js的object字典对象\\r\\n * @param url\\r\\n * @returns {{}}\\r\\n */\\r\\nfunction getQuery(url) {\\r\\n    try {\\r\\n        if (url.indexOf('?') > -1) {\\r\\n            url = url.slice(url.indexOf('?') + 1);\\r\\n        }\\r\\n        let arr = url.split(\\\"#\\\")[0].split(\\\"&\\\");\\r\\n        const resObj = {};\\r\\n        arr.forEach(item => {\\r\\n            let arr1 = item.split(\\\"=\\\");\\r\\n            let key = arr1[0];\\r\\n            let value = arr1.slice(1).join('=');\\r\\n            resObj[key] = value;\\r\\n        });\\r\\n        return resObj;\\r\\n    } catch (err) {\\r\\n        log('getQuery发生错误:' + e.message)\\r\\n        return {};\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n *  url拼接\\r\\n * @param fromPath 初始当前页面url\\r\\n * @param nowPath 相对当前页面url\\r\\n * @returns {*}\\r\\n */\\r\\nfunction urljoin(fromPath, nowPath) {\\r\\n    fromPath = fromPath || '';\\r\\n    nowPath = nowPath || '';\\r\\n    return joinUrl(fromPath, nowPath);\\r\\n    // try {\\r\\n    //     // import Uri from './uri.min.js';\\r\\n    //     // var Uri = require('./uri.min.js');\\r\\n    //     // eval(request('https://cdn.bootcdn.net/ajax/libs/URI.js/1.19.11/URI.min.js'));\\r\\n    //     // let new_uri = URI(nowPath, fromPath);\\r\\n\\r\\n    //     let new_uri = Uri(nowPath, fromPath);\\r\\n    //     new_uri = new_uri.toString();\\r\\n    //     // console.log(new_uri);\\r\\n    //     // return fromPath + nowPath\\r\\n    //     return new_uri\\r\\n    // }\\r\\n    // catch (e) {\\r\\n    //     console.log('urljoin发生错误:'+e.message);\\r\\n    //     if(nowPath.startsWith('http')){\\r\\n    //         return nowPath\\r\\n    //     }if(nowPath.startsWith('/')){\\r\\n    //         return getHome(fromPath)+nowPath\\r\\n    //     }\\r\\n    //     return fromPath+nowPath\\r\\n    // }\\r\\n}\\r\\n\\r\\nvar urljoin2 = urljoin;\\r\\n\\r\\n// 内置 pdfh,pdfa,pd\\r\\nconst defaultParser = {\\r\\n    pdfh: pdfh,\\r\\n    pdfa: pdfa,\\r\\n    pd: pd,\\r\\n};\\r\\n\\r\\n\\r\\n/**\\r\\n *  pdfh原版优化,能取style属性里的图片链接\\r\\n * @param html 源码\\r\\n * @param parse 解析表达式\\r\\n * @returns {string|*}\\r\\n */\\r\\nfunction pdfh2(html, parse) {\\r\\n    let html2 = html;\\r\\n    try {\\r\\n        if (typeof (html) !== 'string') {\\r\\n            html2 = html.rr(html.ele).toString();\\r\\n        }\\r\\n    } catch (e) {\\r\\n        print('html对象转文本发生了错误:' + e.message);\\r\\n    }\\r\\n    let result = defaultParser.pdfh(html2, parse);\\r\\n    let option = parse.includes('&&') ? parse.split('&&').slice(-1)[0] : parse.split(' ').slice(-1)[0];\\r\\n    if (/style/.test(option.toLowerCase()) && /url\\\\(/.test(result)) {\\r\\n        try {\\r\\n            result = result.match(/url\\\\((.*?)\\\\)/)[1];\\r\\n            // 2023/07/28新增 style取内部链接自动去除首尾单双引号\\r\\n            result = result.replace(/^['|\\\"](.*)['|\\\"]$/, \\\"$1\\\");\\r\\n        } catch (e) {\\r\\n        }\\r\\n    }\\r\\n    return result\\r\\n}\\r\\n\\r\\n/**\\r\\n * pdfa原版优化,可以转换jq的html对象\\r\\n * @param html\\r\\n * @param parse\\r\\n * @returns {*}\\r\\n */\\r\\nfunction pdfa2(html, parse) {\\r\\n    let html2 = html;\\r\\n    try {\\r\\n        if (typeof (html) !== 'string') {\\r\\n            html2 = html.rr(html.ele).toString();\\r\\n        }\\r\\n    } catch (e) {\\r\\n        print('html对象转文本发生了错误:' + e.message);\\r\\n    }\\r\\n    return defaultParser.pdfa(html2, parse);\\r\\n}\\r\\n\\r\\n/**\\r\\n * pd原版方法重写-增加自动urljoin\\r\\n * @param html\\r\\n * @param parse\\r\\n * @param uri\\r\\n * @returns {*}\\r\\n */\\r\\nfunction pd2(html, parse, uri) {\\r\\n    let ret = pdfh2(html, parse);\\r\\n    if (typeof (uri) === 'undefined' || !uri) {\\r\\n        uri = '';\\r\\n    }\\r\\n    if (DOM_CHECK_ATTR.test(parse) && !SPECIAL_URL.test(ret)) {\\r\\n        if (/http/.test(ret)) {\\r\\n            ret = ret.slice(ret.indexOf('http'));\\r\\n        } else {\\r\\n            ret = urljoin(MY_URL, ret)\\r\\n        }\\r\\n    }\\r\\n    // MY_URL = getItem('MY_URL',MY_URL);\\r\\n    // console.log(`规则${RKEY}打印MY_URL:${MY_URL},uri:${uri}`);\\r\\n    return ret\\r\\n}\\r\\n\\r\\nconst parseTags = {\\r\\n    jsp: {\\r\\n        pdfh: pdfh2,\\r\\n        pdfa: pdfa2,\\r\\n        pd: pd2,\\r\\n    },\\r\\n    json: {\\r\\n        pdfh(html, parse) {\\r\\n            if (!parse || !parse.trim()) {\\r\\n                return '';\\r\\n            }\\r\\n            if (typeof (html) === 'string') {\\r\\n                // print('jsonpath:pdfh字符串转dict');\\r\\n                html = JSON.parse(html);\\r\\n            }\\r\\n            parse = parse.trim();\\r\\n            if (!parse.startsWith('$.')) {\\r\\n                parse = '$.' + parse;\\r\\n            }\\r\\n            parse = parse.split('||');\\r\\n            for (let ps of parse) {\\r\\n                let ret = cheerio.jp(ps, html);\\r\\n                if (Array.isArray(ret)) {\\r\\n                    ret = ret[0] || '';\\r\\n                } else {\\r\\n                    ret = ret || ''\\r\\n                }\\r\\n                if (ret && typeof (ret) !== 'string') {\\r\\n                    ret = ret.toString();\\r\\n                }\\r\\n                if (ret) {\\r\\n                    return ret\\r\\n                }\\r\\n            }\\r\\n            return '';\\r\\n        },\\r\\n        pdfa(html, parse) {\\r\\n            if (!parse || !parse.trim()) {\\r\\n                return '';\\r\\n            }\\r\\n            if (typeof (html) === 'string') {\\r\\n                // print('jsonpath:pdfa字符串转dict');\\r\\n                html = JSON.parse(html);\\r\\n            }\\r\\n            parse = parse.trim()\\r\\n            if (!parse.startsWith('$.')) {\\r\\n                parse = '$.' + parse;\\r\\n            }\\r\\n            let ret = cheerio.jp(parse, html);\\r\\n            if (Array.isArray(ret) && Array.isArray(ret[0]) && ret.length === 1) {\\r\\n                return ret[0] || []\\r\\n            }\\r\\n            return ret || []\\r\\n        },\\r\\n        pd(html, parse) {\\r\\n            let ret = parseTags.json.pdfh(html, parse);\\r\\n            if (ret) {\\r\\n                return urljoin(MY_URL, ret);\\r\\n            }\\r\\n            return ret\\r\\n        },\\r\\n    },\\r\\n    jq: {\\r\\n        pdfh(html, parse) {\\r\\n            if (!html || !parse || !parse.trim()) {\\r\\n                return ''\\r\\n            }\\r\\n            parse = parse.trim();\\r\\n            let result = defaultParser.pdfh(html, parse);\\r\\n            // print(`pdfh解析${parse}=>${result}`);\\r\\n            return result;\\r\\n        },\\r\\n        pdfa(html, parse) {\\r\\n            if (!html || !parse || !parse.trim()) {\\r\\n                return [];\\r\\n            }\\r\\n            parse = parse.trim();\\r\\n            let result = defaultParser.pdfa(html, parse);\\r\\n            // print(result);\\r\\n            print(`pdfa解析${parse}=>${result.length}`);\\r\\n            return result;\\r\\n        },\\r\\n        pd(html, parse, base_url) {\\r\\n            if (!html || !parse || !parse.trim()) {\\r\\n                return ''\\r\\n            }\\r\\n            parse = parse.trim();\\r\\n            base_url = base_url || MY_URL;\\r\\n            return defaultParser.pd(html, parse, base_url);\\r\\n        },\\r\\n    },\\r\\n    getParse(p0) {//非js开头的情况自动获取解析标签\\r\\n        if (p0.startsWith('jsp:')) {\\r\\n            return this.jsp\\r\\n        } else if (p0.startsWith('json:')) {\\r\\n            return this.json\\r\\n        } else if (p0.startsWith('jq:')) {\\r\\n            return this.jq\\r\\n        } else {\\r\\n            return this.jq\\r\\n        }\\r\\n    }\\r\\n};\\r\\n\\r\\nconst stringify = JSON.stringify;\\r\\nconst jsp = parseTags.jsp;\\r\\nconst jq = parseTags.jq;\\r\\n\\r\\n/*** 后台需要实现的java方法并注入到js中 ***/\\r\\n\\r\\n/**\\r\\n * 读取本地文件->应用程序目录\\r\\n * @param filePath\\r\\n * @returns {string}\\r\\n */\\r\\nfunction readFile(filePath) {\\r\\n    filePath = filePath || './uri.min.js';\\r\\n    var fd = os.open(filePath);\\r\\n    var buffer = new ArrayBuffer(1024);\\r\\n    var len = os.read(fd, buffer, 0, 1024);\\r\\n    console.log(len);\\r\\n    let text = String.fromCharCode.apply(null, new Uint8Array(buffer));\\r\\n    console.log(text);\\r\\n    return text\\r\\n}\\r\\n\\r\\n/**\\r\\n * 处理返回的json数据\\r\\n * @param html\\r\\n * @returns {*}\\r\\n */\\r\\nfunction dealJson(html) {\\r\\n    try {\\r\\n        // html = html.match(/[\\\\w|\\\\W|\\\\s|\\\\S]*?(\\\\{[\\\\w|\\\\W|\\\\s|\\\\S]*\\\\})/).group[1];\\r\\n        html = html.trim();\\r\\n        if (!((html.startsWith('{') && html.endsWith('}')) || (html.startsWith('[') && html.endsWith(']')))) {\\r\\n            html = '{' + html.match(/.*?\\\\{(.*)\\\\}/m)[1] + '}';\\r\\n        }\\r\\n    } catch (e) {\\r\\n    }\\r\\n    try {\\r\\n        html = JSON.parse(html);\\r\\n    } catch (e) {\\r\\n    }\\r\\n    // console.log(typeof(html));\\r\\n    return html;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 验证码识别逻辑,需要java实现(js没有bytes类型,无法调用后端的传递图片二进制获取验证码文本的接口)\\r\\n * @type {{api: string, classification: (function(*=): string)}}\\r\\n */\\r\\nvar OcrApi = {\\r\\n    api: OCR_API,\\r\\n    classification: function (img) { // img是byte类型,这里不方便搞啊\\r\\n        let code = '';\\r\\n        try {\\r\\n            // let html = request(this.api,{data:{img:img},headers:{'User-Agent':PC_UA},'method':'POST'},true);\\r\\n            // html = JSON.parse(html);\\r\\n            // code = html.url||'';\\r\\n            log('通过drpy_ocr验证码接口过验证...');\\r\\n            let html = '';\\r\\n            if (this.api.endsWith('drpy/text')) {\\r\\n                html = request(this.api, {data: {img: img}, headers: {'User-Agent': PC_UA}, 'method': 'POST'}, true);\\r\\n            } else {\\r\\n                html = post(this.api, {body: img});\\r\\n            }\\r\\n            code = html || '';\\r\\n        } catch (e) {\\r\\n            log(`OCR识别验证码发生错误:${e.message}`)\\r\\n        }\\r\\n        return code\\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * 验证码识别,暂未实现\\r\\n * @param url 验证码图片链接\\r\\n * @returns {string} 验证成功后的cookie\\r\\n */\\r\\nfunction verifyCode(url) {\\r\\n    let cnt = 0;\\r\\n    let host = getHome(url);\\r\\n    let cookie = '';\\r\\n    while (cnt < OCR_RETRY) {\\r\\n        try {\\r\\n            // let obj = {headers:headers,timeout:timeout};\\r\\n            let yzm_url = `${host}/index.php/verify/index.html`;\\r\\n            console.log(`验证码链接:${yzm_url}`);\\r\\n            let hhtml = request(yzm_url, {withHeaders: true, toBase64: true}, true);\\r\\n            let json = JSON.parse(hhtml);\\r\\n            if (!cookie) {\\r\\n                // print(json);\\r\\n                let setCk = Object.keys(json).find(it => it.toLowerCase() === 'set-cookie');\\r\\n                // cookie = json['set-cookie']?json['set-cookie'].split(';')[0]:'';\\r\\n                cookie = setCk ? json[setCk].split(';')[0] : '';\\r\\n            }\\r\\n            // console.log(hhtml);\\r\\n            console.log('cookie:' + cookie);\\r\\n            let img = json.body;\\r\\n            // console.log(img);\\r\\n            let code = OcrApi.classification(img);\\r\\n            console.log(`第${cnt + 1}次验证码识别结果:${code}`);\\r\\n            let submit_url = `${host}/index.php/ajax/verify_check?type=search&verify=${code}`;\\r\\n            console.log(submit_url);\\r\\n            let html = request(submit_url, {headers: {Cookie: cookie}, 'method': 'POST'});\\r\\n            // console.log(html);\\r\\n            html = JSON.parse(html);\\r\\n            if (html.msg === 'ok') {\\r\\n                console.log(`第${cnt + 1}次验证码提交成功`);\\r\\n                return cookie // 需要返回cookie\\r\\n            } else if (html.msg !== 'ok' && cnt + 1 >= OCR_RETRY) {\\r\\n                cookie = ''; // 需要清空返回cookie\\r\\n            }\\r\\n        } catch (e) {\\r\\n            console.log(`第${cnt + 1}次验证码提交失败:${e.message}`);\\r\\n            if (cnt + 1 >= OCR_RETRY) {\\r\\n                cookie = '';\\r\\n            }\\r\\n        }\\r\\n        cnt += 1\\r\\n    }\\r\\n    return cookie\\r\\n}\\r\\n\\r\\n/**\\r\\n * 存在数据库配置表里, key字段对应值value,没有就新增,有就更新,调用此方法会清除key对应的内存缓存\\r\\n * @param k 键\\r\\n * @param v 值\\r\\n */\\r\\nfunction setItem(k, v) {\\r\\n    local.set(RKEY, k, v);\\r\\n    console.log(`规则${RKEY}设置${k} => ${v}`)\\r\\n}\\r\\n\\r\\n/**\\r\\n *  获取数据库配置表对应的key字段的value，没有这个key就返回value默认传参.需要有缓存,第一次获取后会存在内存里\\r\\n * @param k 键\\r\\n * @param v 值\\r\\n * @returns {*}\\r\\n */\\r\\nfunction getItem(k, v) {\\r\\n    return local.get(RKEY, k) || v;\\r\\n}\\r\\n\\r\\n/**\\r\\n *  删除数据库key对应的一条数据,并清除此key对应的内存缓存\\r\\n * @param k\\r\\n */\\r\\nfunction clearItem(k) {\\r\\n    local.delete(RKEY, k);\\r\\n}\\r\\n\\r\\n/*** js自封装的方法 ***/\\r\\n\\r\\n/**\\r\\n * 获取链接的host(带http协议的完整链接)\\r\\n * @param url 任意一个正常完整的Url,自动提取根\\r\\n * @returns {string}\\r\\n */\\r\\nfunction getHome(url) {\\r\\n    if (!url) {\\r\\n        return ''\\r\\n    }\\r\\n    let tmp = url.split('//');\\r\\n    url = tmp[0] + '//' + tmp[1].split('/')[0];\\r\\n    try {\\r\\n        url = decodeURIComponent(url);\\r\\n    } catch (e) {\\r\\n    }\\r\\n    return url\\r\\n}\\r\\n\\r\\n/**\\r\\n * get参数编译链接,类似python params字典自动拼接\\r\\n * @param url 访问链接\\r\\n * @param obj 参数字典\\r\\n * @returns {*}\\r\\n */\\r\\nfunction buildUrl(url, obj) {\\r\\n    obj = obj || {};\\r\\n    if (url.indexOf('?') < 0) {\\r\\n        url += '?'\\r\\n    }\\r\\n    let param_list = [];\\r\\n    let keys = Object.keys(obj);\\r\\n    keys.forEach(it => {\\r\\n        param_list.push(it + '=' + obj[it])\\r\\n    });\\r\\n    let prs = param_list.join('&');\\r\\n    if (keys.length > 0 && !url.endsWith('?')) {\\r\\n        url += '&'\\r\\n    }\\r\\n    url += prs;\\r\\n    return url\\r\\n}\\r\\n\\r\\n/**\\r\\n * 远程依赖执行函数\\r\\n * @param url 远程js地址\\r\\n */\\r\\nfunction $require(url) {\\r\\n    eval(request(url));\\r\\n}\\r\\n\\r\\n/**\\r\\n * 将obj所有key变小写\\r\\n * @param obj\\r\\n */\\r\\nfunction keysToLowerCase(obj) {\\r\\n    return Object.keys(obj).reduce((result, key) => {\\r\\n        const newKey = key.toLowerCase();\\r\\n        result[newKey] = obj[key]; // 如果值也是对象，可以递归调用本函数\\r\\n        return result;\\r\\n    }, {});\\r\\n}\\r\\n\\r\\n/**\\r\\n * 海阔网页请求函数完整封装\\r\\n * @param url 请求链接\\r\\n * @param obj 请求对象 {headers:{},method:'',timeout:5000,body:'',withHeaders:false}\\r\\n * @param ocr_flag 标识此flag是用于请求ocr识别的,自动过滤content-type指定编码\\r\\n * @returns {string|string|DocumentFragment|*}\\r\\n */\\r\\nfunction request(url, obj, ocr_flag) {\\r\\n    ocr_flag = ocr_flag || false;\\r\\n    if (typeof (obj) === 'undefined' || !obj || obj === {}) {\\r\\n        if (!fetch_params || !fetch_params.headers) {\\r\\n            let headers = {\\r\\n                'User-Agent': MOBILE_UA,\\r\\n            };\\r\\n            if (rule.headers) {\\r\\n                Object.assign(headers, rule.headers);\\r\\n            }\\r\\n            if (!fetch_params) {\\r\\n                fetch_params = {};\\r\\n            }\\r\\n            fetch_params.headers = headers;\\r\\n        }\\r\\n        if (!fetch_params.headers.Referer) {\\r\\n            fetch_params.headers.Referer = getHome(url)\\r\\n        }\\r\\n        obj = fetch_params;\\r\\n    } else {\\r\\n        let headers = obj.headers || {};\\r\\n        let keys = Object.keys(headers).map(it => it.toLowerCase());\\r\\n        if (!keys.includes('user-agent')) {\\r\\n            headers['User-Agent'] = MOBILE_UA;\\r\\n            // fetch_params 里存在ua则优先，否则才默认手机UA\\r\\n            if (typeof (fetch_params) === 'object' && fetch_params && fetch_params.headers) {\\r\\n                let fetch_headers = keysToLowerCase(fetch_params.headers);\\r\\n                if (fetch_headers['user-agent']) {\\r\\n                    headers['User-Agent'] = fetch_headers['user-agent'];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (!keys.includes('referer')) {\\r\\n            headers['Referer'] = getHome(url);\\r\\n        }\\r\\n        obj.headers = headers;\\r\\n    }\\r\\n    if (rule.encoding && rule.encoding !== 'utf-8' && !ocr_flag) {\\r\\n        if (!obj.headers.hasOwnProperty('Content-Type') && !obj.headers.hasOwnProperty('content-type')) { // 手动指定了就不管\\r\\n            obj.headers[\\\"Content-Type\\\"] = 'text/html; charset=' + rule.encoding;\\r\\n        }\\r\\n    }\\r\\n    if (typeof (obj.body) != 'undefined' && obj.body && typeof (obj.body) === 'string') {\\r\\n        // let data = {};\\r\\n        // obj.body.split('&').forEach(it=>{\\r\\n        //     data[it.split('=')[0]] = it.split('=')[1]\\r\\n        // });\\r\\n        // obj.data = data;\\r\\n        // delete obj.body\\r\\n\\r\\n        // 传body加 \\\"Content-Type\\\":\\\"application/x-www-form-urlencoded;\\\" 即可post form\\r\\n        if (!obj.headers.hasOwnProperty('Content-Type') && !obj.headers.hasOwnProperty('content-type')) { // 手动指定了就不管\\r\\n            obj.headers[\\\"Content-Type\\\"] = 'application/x-www-form-urlencoded; charset=' + rule.encoding;\\r\\n        }\\r\\n    } else if (typeof (obj.body) != 'undefined' && obj.body && typeof (obj.body) === 'object') {\\r\\n        obj.data = obj.body;\\r\\n        delete obj.body\\r\\n    }\\r\\n    if (!url) {\\r\\n        return obj.withHeaders ? '{}' : ''\\r\\n    }\\r\\n    if (obj.toBase64) { // 返回base64,用于请求图片\\r\\n        obj.buffer = 2;\\r\\n        delete obj.toBase64\\r\\n    }\\r\\n    if (obj.redirect === false) {\\r\\n        obj.redirect = 0;\\r\\n    }\\r\\n    console.log(JSON.stringify(obj.headers));\\r\\n    // console.log('request:'+url+' obj:'+JSON.stringify(obj));\\r\\n    console.log('request:' + url + `|method:${obj.method || 'GET'}|body:${obj.body || ''}`);\\r\\n    let res = req(url, obj);\\r\\n    let html = res.content || '';\\r\\n    // console.log(html);\\r\\n    if (obj.withHeaders) {\\r\\n        let htmlWithHeaders = res.headers;\\r\\n        htmlWithHeaders.body = html;\\r\\n        return JSON.stringify(htmlWithHeaders);\\r\\n    } else {\\r\\n        return html\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n *  快捷post请求\\r\\n * @param url 地址\\r\\n * @param obj 对象\\r\\n * @returns {string|DocumentFragment|*}\\r\\n */\\r\\nfunction post(url, obj) {\\r\\n    obj = obj || {};\\r\\n    obj.method = 'POST';\\r\\n    return request(url, obj);\\r\\n}\\r\\n\\r\\n/**\\r\\n * 快捷获取特殊地址cookie|一般用作搜索过验证\\r\\n * 用法 let {cookie,html} = reqCookie(url);\\r\\n * @param url 能返回cookie的地址\\r\\n * @param obj 常规请求参数\\r\\n * @param all_cookie 返回全部cookie.默认false只返回第一个,一般是PhpSessionId\\r\\n * @returns {{cookie: string, html: (*|string|DocumentFragment)}}\\r\\n */\\r\\nfunction reqCookie(url, obj, all_cookie) {\\r\\n    obj = obj || {};\\r\\n    obj.withHeaders = true;\\r\\n    all_cookie = all_cookie || false;\\r\\n    let html = request(url, obj);\\r\\n    let json = JSON.parse(html);\\r\\n    let setCk = Object.keys(json).find(it => it.toLowerCase() === 'set-cookie');\\r\\n    let cookie = setCk ? json[setCk] : '';\\r\\n    if (Array.isArray(cookie)) {\\r\\n        cookie = cookie.join(';')\\r\\n    }\\r\\n    if (!all_cookie) {\\r\\n        cookie = cookie.split(';')[0];\\r\\n    }\\r\\n    html = json.body;\\r\\n    return {\\r\\n        cookie,\\r\\n        html\\r\\n    }\\r\\n}\\r\\n\\r\\nfetch = request;\\r\\nprint = function (data) {\\r\\n    data = data || '';\\r\\n    if (typeof (data) == 'object' && Object.keys(data).length > 0) {\\r\\n        try {\\r\\n            data = JSON.stringify(data);\\r\\n            console.log(data);\\r\\n        } catch (e) {\\r\\n            // console.log('print:'+e.message);\\r\\n            console.log(typeof (data) + ':' + data.length);\\r\\n            return\\r\\n        }\\r\\n    } else if (typeof (data) == 'object' && Object.keys(data).length < 1) {\\r\\n        console.log('null object');\\r\\n    } else {\\r\\n        console.log(data);\\r\\n    }\\r\\n}\\r\\nlog = print;\\r\\n\\r\\n/**\\r\\n * 检查宝塔验证并自动跳过获取正确源码\\r\\n * @param html 之前获取的html\\r\\n * @param url 之前的来源url\\r\\n * @param obj 来源obj\\r\\n * @returns {string|DocumentFragment|*}\\r\\n */\\r\\nfunction checkHtml(html, url, obj) {\\r\\n    if (/\\\\?btwaf=/.test(html)) {\\r\\n        let btwaf = html.match(/btwaf(.*?)\\\"/)[1];\\r\\n        url = url.split('#')[0] + '?btwaf' + btwaf;\\r\\n        print('宝塔验证访问链接:' + url);\\r\\n        html = request(url, obj);\\r\\n    }\\r\\n    return html\\r\\n}\\r\\n\\r\\n/**\\r\\n *  带一次宝塔验证的源码获取\\r\\n * @param url 请求链接\\r\\n * @param obj 请求参数\\r\\n * @returns {string|DocumentFragment}\\r\\n */\\r\\nfunction getCode(url, obj) {\\r\\n    let html = request(url, obj);\\r\\n    html = checkHtml(html, url, obj);\\r\\n    return html\\r\\n}\\r\\n\\r\\n/**\\r\\n * 源rule专用的请求方法,自动注入cookie\\r\\n * @param url 请求链接\\r\\n * @returns {string|DocumentFragment}\\r\\n */\\r\\nfunction getHtml(url) {\\r\\n    let obj = {};\\r\\n    if (rule.headers) {\\r\\n        obj.headers = rule.headers;\\r\\n    }\\r\\n    let cookie = getItem(RULE_CK, '');\\r\\n    if (cookie) {\\r\\n        // log('有cookie:'+cookie);\\r\\n        if (obj.headers && !Object.keys(obj.headers).map(it => it.toLowerCase()).includes('cookie')) {\\r\\n            log('历史无cookie,新增过验证后的cookie');\\r\\n            obj.headers['Cookie'] = cookie;\\r\\n        } else if (obj.headers && obj.headers.cookie && obj.headers.cookie !== cookie) {\\r\\n            obj.headers['Cookie'] = cookie;\\r\\n            log('历史有小写过期的cookie,更新过验证后的cookie');\\r\\n        } else if (obj.headers && obj.headers.Cookie && obj.headers.Cookie !== cookie) {\\r\\n            obj.headers['Cookie'] = cookie;\\r\\n            log('历史有大写过期的cookie,更新过验证后的cookie');\\r\\n        } else if (!obj.headers) {\\r\\n            obj.headers = {Cookie: cookie};\\r\\n            log('历史无headers,更新过验证后的含cookie的headers');\\r\\n        }\\r\\n    }\\r\\n    let html = getCode(url, obj);\\r\\n    return html\\r\\n}\\r\\n\\r\\n/**\\r\\n * 首页分类解析，筛选暂未实现\\r\\n * @param homeObj 首页传参对象\\r\\n * @returns {string}\\r\\n */\\r\\nfunction homeParse(homeObj) {\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    let classes = [];\\r\\n    if (homeObj.class_name && homeObj.class_url) {\\r\\n        let names = homeObj.class_name.split('&');\\r\\n        let urls = homeObj.class_url.split('&');\\r\\n        let cnt = Math.min(names.length, urls.length);\\r\\n        for (let i = 0; i < cnt; i++) {\\r\\n            classes.push({\\r\\n                'type_id': urls[i],\\r\\n                'type_name': names[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (homeObj.class_parse) {\\r\\n        if (homeObj.class_parse.startsWith('js:')) {\\r\\n            var input = homeObj.MY_URL;\\r\\n            try {\\r\\n                eval(homeObj.class_parse.replace('js:', ''));\\r\\n                if (Array.isArray(input)) {\\r\\n                    classes = input;\\r\\n                }\\r\\n            } catch (e) {\\r\\n                log('通过js动态获取分类发生了错误:' + e.message);\\r\\n            }\\r\\n        } else {\\r\\n            let p = homeObj.class_parse.split(';');\\r\\n            let p0 = p[0];\\r\\n            let _ps = parseTags.getParse(p0);\\r\\n            let is_json = p0.startsWith('json:');\\r\\n            _pdfa = _ps.pdfa;\\r\\n            _pdfh = _ps.pdfh;\\r\\n            _pd = _ps.pd;\\r\\n            MY_URL = rule.url;\\r\\n            if (is_json) {\\r\\n                try {\\r\\n                    let cms_cate_url = homeObj.MY_URL.replace('ac=detail', 'ac=list');\\r\\n                    let html = homeObj.home_html || getHtml(cms_cate_url);\\r\\n                    if (html) {\\r\\n                        if (cms_cate_url === homeObj.MY_URL) {\\r\\n                            homeHtmlCache = html;\\r\\n                        }\\r\\n                        let list = _pdfa(html, p0.replace('json:', ''));\\r\\n                        if (list && list.length > 0) {\\r\\n                            classes = list;\\r\\n                        }\\r\\n                    }\\r\\n                } catch (e) {\\r\\n                    console.log(e.message);\\r\\n                }\\r\\n            } else if (p.length >= 3 && !is_json) { // 可以不写正则\\r\\n                try {\\r\\n                    let html = homeObj.home_html || getHtml(homeObj.MY_URL);\\r\\n                    if (html) {\\r\\n                        homeHtmlCache = html;\\r\\n                        let list = _pdfa(html, p0);\\r\\n                        if (list && list.length > 0) {\\r\\n                            list.forEach((it, idex) => {\\r\\n                                try {\\r\\n                                    let name = _pdfh(it, p[1]);\\r\\n                                    if (homeObj.cate_exclude && (new RegExp(homeObj.cate_exclude).test(name))) {\\r\\n                                        return;\\r\\n                                    }\\r\\n                                    // let url = pdfh(it, p[2]);\\r\\n                                    let url = _pd(it, p[2]);\\r\\n                                    if (p.length > 3 && p[3] && !homeObj.home_html) {\\r\\n                                        let exp = new RegExp(p[3]);\\r\\n                                        url = url.match(exp)[1];\\r\\n                                    }\\r\\n\\r\\n                                    classes.push({\\r\\n                                        'type_id': url.trim(),\\r\\n                                        'type_name': name.trim()\\r\\n                                    });\\r\\n                                } catch (e) {\\r\\n                                    console.log(`分类列表定位第${idex}个元素正常报错:${e.message}`);\\r\\n                                }\\r\\n                            });\\r\\n                        }\\r\\n                    }\\r\\n                } catch (e) {\\r\\n                    console.log(e.message);\\r\\n                }\\r\\n\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // 排除分类\\r\\n    classes = classes.filter(it => !homeObj.cate_exclude || !(new RegExp(homeObj.cate_exclude).test(it.type_name)));\\r\\n    let resp = {\\r\\n        'class': classes\\r\\n    };\\r\\n    if (homeObj.filter) {\\r\\n        resp.filters = homeObj.filter;\\r\\n    }\\r\\n    console.log(JSON.stringify(resp));\\r\\n    return JSON.stringify(resp);\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * 推荐和搜索单字段继承一级\\r\\n * @param p 推荐或搜索的解析分割;列表\\r\\n * @param pn 自身列表序号\\r\\n * @param pp  一级解析分割;列表\\r\\n * @param ppn 继承一级序号\\r\\n * @returns {*}\\r\\n */\\r\\nfunction getPP(p, pn, pp, ppn) {\\r\\n    try {\\r\\n        let ps = p[pn] === '*' && pp.length > ppn ? pp[ppn] : p[pn]\\r\\n        return ps\\r\\n    } catch (e) {\\r\\n        return ''\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n *  首页推荐列表解析\\r\\n * @param homeVodObj\\r\\n * @returns {string}\\r\\n */\\r\\nfunction homeVodParse(homeVodObj) {\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    let d = [];\\r\\n    MY_URL = homeVodObj.homeUrl;\\r\\n    // setItem('MY_URL',MY_URL);\\r\\n    console.log(MY_URL);\\r\\n    let t1 = (new Date()).getTime();\\r\\n    let p = homeVodObj.推荐;\\r\\n    print('p:' + p);\\r\\n    if (p === '*' && rule.一级) {\\r\\n        p = rule.一级;\\r\\n        homeVodObj.double = false;\\r\\n    }\\r\\n    if (!p || typeof (p) !== 'string') {\\r\\n        return '{}'\\r\\n    }\\r\\n    p = p.trim();\\r\\n    let pp = rule.一级 ? rule.一级.split(';') : [];\\r\\n    if (p.startsWith('js:')) {\\r\\n        const TYPE = 'home';\\r\\n        var input = MY_URL;\\r\\n        HOST = rule.host;\\r\\n        eval(p.replace('js:', ''));\\r\\n        d = VODS;\\r\\n    } else {\\r\\n        p = p.split(';');\\r\\n        if (!homeVodObj.double && p.length < 5) {\\r\\n            return '{}'\\r\\n        } else if (homeVodObj.double && p.length < 6) {\\r\\n            return '{}'\\r\\n        }\\r\\n        let p0 = getPP(p, 0, pp, 0)\\r\\n        let _ps = parseTags.getParse(p0);\\r\\n        _pdfa = _ps.pdfa;\\r\\n        _pdfh = _ps.pdfh;\\r\\n        _pd = _ps.pd;\\r\\n        let is_json = p0.startsWith('json:');\\r\\n        p0 = p0.replace(/^(jsp:|json:|jq:)/, '');\\r\\n        // print(p[0]);\\r\\n        let html = homeHtmlCache || getHtml(MY_URL);\\r\\n        homeHtmlCache = undefined;\\r\\n        if (is_json) {\\r\\n            // print('是json,开始处理');\\r\\n            html = dealJson(html);\\r\\n        }\\r\\n        try {\\r\\n            console.log('double:' + homeVodObj.double);\\r\\n            if (homeVodObj.double) {\\r\\n                let items = _pdfa(html, p0);\\r\\n                // console.log(items.length);\\r\\n                let p1 = getPP(p, 1, pp, 0);\\r\\n                let p2 = getPP(p, 2, pp, 1);\\r\\n                let p3 = getPP(p, 3, pp, 2);\\r\\n                let p4 = getPP(p, 4, pp, 3);\\r\\n                let p5 = getPP(p, 5, pp, 4);\\r\\n                let p6 = getPP(p, 6, pp, 5);\\r\\n                for (let item of items) {\\r\\n                    // console.log(p[1]);\\r\\n                    let items2 = _pdfa(item, p1);\\r\\n                    // console.log(items2.length);\\r\\n                    for (let item2 of items2) {\\r\\n                        try {\\r\\n                            let title = _pdfh(item2, p2);\\r\\n                            let img = '';\\r\\n                            try {\\r\\n                                img = _pd(item2, p3);\\r\\n                            } catch (e) {\\r\\n                            }\\r\\n                            let desc = '';\\r\\n                            try {\\r\\n                                desc = _pdfh(item2, p4);\\r\\n                            } catch (e) {\\r\\n                            }\\r\\n                            let links = [];\\r\\n                            for (let _p5 of p5.split('+')) {\\r\\n                                let link = !homeVodObj.detailUrl ? _pd(item2, _p5, MY_URL) : _pdfh(item2, _p5);\\r\\n                                links.push(link);\\r\\n                            }\\r\\n                            let content;\\r\\n                            if (p.length > 6 && p[6]) {\\r\\n                                content = _pdfh(item2, p6);\\r\\n                            } else {\\r\\n                                content = '';\\r\\n                            }\\r\\n                            let vid = links.join('$');\\r\\n                            if (rule.二级 === '*') {\\r\\n                                vid = vid + '@@' + title + '@@' + img;\\r\\n                            }\\r\\n                            let vod = {\\r\\n                                vod_name: title,\\r\\n                                vod_pic: img,\\r\\n                                vod_remarks: desc,\\r\\n                                vod_content: content,\\r\\n                                vod_id: vid\\r\\n                            };\\r\\n                            // print(vod);\\r\\n                            d.push(vod);\\r\\n                        } catch (e) {\\r\\n                            console.log('首页列表双层定位处理发生错误:' + e.message);\\r\\n                        }\\r\\n\\r\\n                    }\\r\\n\\r\\n\\r\\n                }\\r\\n\\r\\n\\r\\n            } else {\\r\\n                let items = _pdfa(html, p0);\\r\\n                let p1 = getPP(p, 1, pp, 1);\\r\\n                let p2 = getPP(p, 2, pp, 2);\\r\\n                let p3 = getPP(p, 3, pp, 3);\\r\\n                let p4 = getPP(p, 4, pp, 4);\\r\\n                let p5 = getPP(p, 5, pp, 5);\\r\\n\\r\\n                for (let item of items) {\\r\\n                    try {\\r\\n                        let title = _pdfh(item, p1);\\r\\n                        let img = '';\\r\\n                        try {\\r\\n                            img = _pd(item, p2, MY_URL);\\r\\n                        } catch (e) {\\r\\n                        }\\r\\n                        let desc = '';\\r\\n                        try {\\r\\n                            desc = _pdfh(item, p3);\\r\\n                        } catch (e) {\\r\\n                        }\\r\\n                        let links = [];\\r\\n                        for (let _p5 of p4.split('+')) {\\r\\n                            let link = !homeVodObj.detailUrl ? _pd(item, _p5, MY_URL) : _pdfh(item, _p5);\\r\\n                            links.push(link);\\r\\n                        }\\r\\n                        let content;\\r\\n                        if (p.length > 5 && p[5]) {\\r\\n                            content = _pdfh(item, p5);\\r\\n                        } else {\\r\\n                            content = ''\\r\\n                        }\\r\\n                        let vid = links.join('$');\\r\\n                        if (rule.二级 === '*') {\\r\\n                            vid = vid + '@@' + title + '@@' + img;\\r\\n                        }\\r\\n                        let vod = {\\r\\n                            vod_name: title,\\r\\n                            vod_pic: img,\\r\\n                            vod_remarks: desc,\\r\\n                            vod_content: content,\\r\\n                            vod_id: vid\\r\\n                        };\\r\\n                        d.push(vod);\\r\\n\\r\\n                    } catch (e) {\\r\\n                        console.log('首页列表单层定位处理发生错误:' + e.message);\\r\\n                    }\\r\\n\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n        } catch (e) {\\r\\n\\r\\n        }\\r\\n    }\\r\\n    let t2 = (new Date()).getTime();\\r\\n    console.log('加载首页推荐耗时:' + (t2 - t1) + '毫秒');\\r\\n    // console.log(JSON.stringify(d));\\r\\n    if (rule.图片替换) {\\r\\n        if (rule.图片替换.startsWith('js:')) {\\r\\n            d.forEach(it => {\\r\\n                try {\\r\\n                    var input = it.vod_pic;\\r\\n                    eval(rule.图片替换.trim().replace('js:', ''));\\r\\n                    it.vod_pic = input;\\r\\n                } catch (e) {\\r\\n                    log(`图片:${it.vod_pic}替换错误:${e.message}`);\\r\\n                }\\r\\n            });\\r\\n        } else if (rule.图片替换.includes('=>')) {\\r\\n            let replace_from = rule.图片替换.split('=>')[0];\\r\\n            let replace_to = rule.图片替换.split('=>')[1];\\r\\n            d.forEach(it => {\\r\\n                if (it.vod_pic && it.vod_pic.startsWith('http')) {\\r\\n                    it.vod_pic = it.vod_pic.replace(replace_from, replace_to);\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    if (rule.图片来源) {\\r\\n        d.forEach(it => {\\r\\n            if (it.vod_pic && it.vod_pic.startsWith('http')) {\\r\\n                it.vod_pic = it.vod_pic + rule.图片来源;\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n    if (d.length > 0) {\\r\\n        print(d.slice(0, 2));\\r\\n    }\\r\\n    return JSON.stringify({\\r\\n        list: d\\r\\n    })\\r\\n}\\r\\n\\r\\n/**\\r\\n * 一级分类页数据解析\\r\\n * @param cateObj\\r\\n * @returns {string}\\r\\n */\\r\\nfunction categoryParse(cateObj) {\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    let p = cateObj.一级;\\r\\n    if (!p || typeof (p) !== 'string') {\\r\\n        return '{}'\\r\\n    }\\r\\n    let d = [];\\r\\n    // let url = cateObj.url.replaceAll('fyclass', cateObj.tid).replaceAll('fypage', cateObj.pg);\\r\\n    let url = cateObj.url.replaceAll('fyclass', cateObj.tid);\\r\\n    if (cateObj.pg === 1 && url.includes('[') && url.includes(']')) {\\r\\n        url = url.split('[')[1].split(']')[0];\\r\\n    } else if (cateObj.pg > 1 && url.includes('[') && url.includes(']')) {\\r\\n        url = url.split('[')[0];\\r\\n    }\\r\\n    if (rule.filter_url) {\\r\\n        if (!/fyfilter/.test(url)) {\\r\\n            if (!url.endsWith('&') && !rule.filter_url.startsWith('&')) {\\r\\n                url += '&'\\r\\n            }\\r\\n            url += rule.filter_url;\\r\\n        } else {\\r\\n            url = url.replace('fyfilter', rule.filter_url);\\r\\n        }\\r\\n        // filter_url支持fyclass\\r\\n        url = url.replaceAll('fyclass', cateObj.tid);\\r\\n        // console.log('filter:'+cateObj.filter);\\r\\n        let fl = cateObj.filter ? cateObj.extend : {};\\r\\n        // 自动合并 不同分类对应的默认筛选\\r\\n        if (rule.filter_def && typeof (rule.filter_def) === 'object') {\\r\\n            try {\\r\\n                if (Object.keys(rule.filter_def).length > 0 && rule.filter_def.hasOwnProperty(cateObj.tid)) {\\r\\n                    let self_fl_def = rule.filter_def[cateObj.tid];\\r\\n                    if (self_fl_def && typeof (self_fl_def) === 'object') {\\r\\n                        // 引用传递转值传递,避免污染self变量\\r\\n                        let fl_def = JSON.parse(JSON.stringify(self_fl_def));\\r\\n                        fl = Object.assign(fl_def, fl);\\r\\n                    }\\r\\n                }\\r\\n            } catch (e) {\\r\\n                print('合并不同分类对应的默认筛选出错:' + e.message);\\r\\n            }\\r\\n        }\\r\\n        let new_url;\\r\\n        new_url = cheerio.jinja2(url, {fl: fl});\\r\\n        // console.log('jinjia2执行后的new_url类型为:'+typeof(new_url));\\r\\n        url = new_url;\\r\\n    }\\r\\n    if (/fypage/.test(url)) {\\r\\n        if (url.includes('(') && url.includes(')')) {\\r\\n            let url_rep = url.match(/.*?\\\\((.*)\\\\)/)[1];\\r\\n            // console.log(url_rep);\\r\\n            let cnt_page = url_rep.replaceAll('fypage', cateObj.pg);\\r\\n            // console.log(cnt_page);\\r\\n            let cnt_pg = eval(cnt_page);\\r\\n            // console.log(cnt_pg);\\r\\n            url = url.replaceAll(url_rep, cnt_pg).replaceAll('(', '').replaceAll(')', '');\\r\\n        } else {\\r\\n            url = url.replaceAll('fypage', cateObj.pg);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    MY_URL = url;\\r\\n    // setItem('MY_URL',MY_URL);\\r\\n    console.log(MY_URL);\\r\\n    p = p.trim();\\r\\n    const MY_CATE = cateObj.tid;\\r\\n    if (p.startsWith('js:')) {\\r\\n        var MY_FL = cateObj.extend;\\r\\n        const TYPE = 'cate';\\r\\n        var input = MY_URL;\\r\\n        const MY_PAGE = cateObj.pg;\\r\\n        var desc = '';\\r\\n        eval(p.trim().replace('js:', ''));\\r\\n        d = VODS;\\r\\n    } else {\\r\\n        p = p.split(';');\\r\\n        if (p.length < 5) {\\r\\n            return '{}'\\r\\n        }\\r\\n        let _ps = parseTags.getParse(p[0]);\\r\\n        _pdfa = _ps.pdfa;\\r\\n        _pdfh = _ps.pdfh;\\r\\n        _pd = _ps.pd;\\r\\n        let is_json = p[0].startsWith('json:');\\r\\n        p[0] = p[0].replace(/^(jsp:|json:|jq:)/, '');\\r\\n        try {\\r\\n            let html = getHtml(MY_URL);\\r\\n            if (html) {\\r\\n                if (is_json) {\\r\\n                    html = dealJson(html);\\r\\n                }\\r\\n                let list = _pdfa(html, p[0]);\\r\\n                list.forEach(it => {\\r\\n                    let links = p[4].split('+').map(p4 => {\\r\\n                        return !rule.detailUrl ? _pd(it, p4, MY_URL) : _pdfh(it, p4);\\r\\n                    });\\r\\n                    let link = links.join('$');\\r\\n                    let vod_id = rule.detailUrl ? MY_CATE + '$' + link : link;\\r\\n\\r\\n                    let vod_name = _pdfh(it, p[1]).replace(/\\\\n|\\\\t/g, '').trim();\\r\\n                    let vod_pic = _pd(it, p[2], MY_URL);\\r\\n\\r\\n                    if (rule.二级 === '*') {\\r\\n                        vod_id = vod_id + '@@' + vod_name + '@@' + vod_pic;\\r\\n                    }\\r\\n                    d.push({\\r\\n                        'vod_id': vod_id,\\r\\n                        'vod_name': vod_name,\\r\\n                        'vod_pic': vod_pic,\\r\\n                        'vod_remarks': _pdfh(it, p[3]).replace(/\\\\n|\\\\t/g, '').trim(),\\r\\n                    });\\r\\n                });\\r\\n            }\\r\\n        } catch (e) {\\r\\n            console.log(e.message);\\r\\n        }\\r\\n    }\\r\\n    if (rule.图片替换) {\\r\\n        if (rule.图片替换.startsWith('js:')) {\\r\\n            d.forEach(it => {\\r\\n                try {\\r\\n                    var input = it.vod_pic;\\r\\n                    eval(rule.图片替换.trim().replace('js:', ''));\\r\\n                    it.vod_pic = input;\\r\\n                } catch (e) {\\r\\n                    log(`图片:${it.vod_pic}替换错误:${e.message}`);\\r\\n                }\\r\\n            });\\r\\n        } else if (rule.图片替换.includes('=>')) {\\r\\n            let replace_from = rule.图片替换.split('=>')[0];\\r\\n            let replace_to = rule.图片替换.split('=>')[1];\\r\\n            d.forEach(it => {\\r\\n                if (it.vod_pic && it.vod_pic.startsWith('http')) {\\r\\n                    it.vod_pic = it.vod_pic.replace(replace_from, replace_to);\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    if (rule.图片来源) {\\r\\n        d.forEach(it => {\\r\\n            if (it.vod_pic && it.vod_pic.startsWith('http')) {\\r\\n                it.vod_pic = it.vod_pic + rule.图片来源;\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n    // print(d);\\r\\n    if (d.length > 0) {\\r\\n        print(d.slice(0, 2));\\r\\n    }\\r\\n    let pagecount = 0;\\r\\n    if (rule.pagecount && typeof (rule.pagecount) === 'object' && rule.pagecount.hasOwnProperty(MY_CATE)) {\\r\\n        print(`MY_CATE:${MY_CATE},pagecount:${JSON.stringify(rule.pagecount)}`);\\r\\n        pagecount = parseInt(rule.pagecount[MY_CATE]);\\r\\n    }\\r\\n    let nodata = {\\r\\n        list: [{\\r\\n            vod_name: '无数据,防无限请求',\\r\\n            vod_id: 'no_data',\\r\\n            vod_remarks: '不要点,会崩的',\\r\\n            vod_pic: 'https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/404.jpg'\\r\\n        }],\\r\\n        total: 1, pagecount: 1, page: 1, limit: 1\\r\\n    };\\r\\n    let vod = d.length < 1 ? JSON.stringify(nodata) : JSON.stringify({\\r\\n        'page': parseInt(cateObj.pg),\\r\\n        'pagecount': pagecount || 999,\\r\\n        'limit': 20,\\r\\n        'total': 999,\\r\\n        'list': d,\\r\\n    });\\r\\n    // print(vod);\\r\\n    return vod\\r\\n}\\r\\n\\r\\n/**\\r\\n * 搜索列表数据解析\\r\\n * @param searchObj\\r\\n * @returns {string}\\r\\n */\\r\\nfunction searchParse(searchObj) {\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    let d = [];\\r\\n    if (!searchObj.searchUrl) {\\r\\n        return '{}'\\r\\n    }\\r\\n    let p = searchObj.搜索 === '*' && rule.一级 ? rule.一级 : searchObj.搜索;\\r\\n    if (!p || typeof (p) !== 'string') {\\r\\n        return '{}'\\r\\n    }\\r\\n    p = p.trim();\\r\\n    let pp = rule.一级 ? rule.一级.split(';') : [];\\r\\n    let url = searchObj.searchUrl.replaceAll('**', searchObj.wd);\\r\\n    if (searchObj.pg === 1 && url.includes('[') && url.includes(']') && !url.includes('#')) {\\r\\n        url = url.split('[')[1].split(']')[0];\\r\\n    } else if (searchObj.pg > 1 && url.includes('[') && url.includes(']') && !url.includes('#')) {\\r\\n        url = url.split('[')[0];\\r\\n    }\\r\\n\\r\\n    if (/fypage/.test(url)) {\\r\\n        if (url.includes('(') && url.includes(')')) {\\r\\n            let url_rep = url.match(/.*?\\\\((.*)\\\\)/)[1];\\r\\n            // console.log(url_rep);\\r\\n            let cnt_page = url_rep.replaceAll('fypage', searchObj.pg);\\r\\n            // console.log(cnt_page);\\r\\n            let cnt_pg = eval(cnt_page);\\r\\n            // console.log(cnt_pg);\\r\\n            url = url.replaceAll(url_rep, cnt_pg).replaceAll('(', '').replaceAll(')', '');\\r\\n        } else {\\r\\n            url = url.replaceAll('fypage', searchObj.pg);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    MY_URL = url;\\r\\n    console.log(MY_URL);\\r\\n    // log(searchObj.搜索);\\r\\n    // setItem('MY_URL',MY_URL);\\r\\n    if (p.startsWith('js:')) {\\r\\n        const TYPE = 'search';\\r\\n        const MY_PAGE = searchObj.pg;\\r\\n        const KEY = searchObj.wd;\\r\\n        var input = MY_URL;\\r\\n        var detailUrl = rule.detailUrl || '';\\r\\n        eval(p.trim().replace('js:', ''));\\r\\n        d = VODS;\\r\\n    } else {\\r\\n        p = p.split(';');\\r\\n        if (p.length < 5) {\\r\\n            return '{}'\\r\\n        }\\r\\n        let p0 = getPP(p, 0, pp, 0);\\r\\n        let _ps = parseTags.getParse(p0);\\r\\n        _pdfa = _ps.pdfa;\\r\\n        _pdfh = _ps.pdfh;\\r\\n        _pd = _ps.pd;\\r\\n        let is_json = p0.startsWith('json:');\\r\\n        p0 = p0.replace(/^(jsp:|json:|jq:)/, '');\\r\\n        // print('1381 p0:'+p0);\\r\\n        try {\\r\\n            let req_method = MY_URL.split(';').length > 1 ? MY_URL.split(';')[1].toLowerCase() : 'get';\\r\\n            let html;\\r\\n            if (req_method === 'post') {\\r\\n                let rurls = MY_URL.split(';')[0].split('#')\\r\\n                let rurl = rurls[0]\\r\\n                let params = rurls.length > 1 ? rurls[1] : '';\\r\\n                print(`post=》rurl:${rurl},params:${params}`);\\r\\n                // let new_dict = {};\\r\\n                // let new_tmp = params.split('&');\\r\\n                // new_tmp.forEach(i=>{\\r\\n                //     new_dict[i.split('=')[0]] = i.split('=')[1];\\r\\n                // });\\r\\n                // html = post(rurl,{body:new_dict});\\r\\n                let _fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n                let postData = {body: params};\\r\\n                Object.assign(_fetch_params, postData);\\r\\n                html = post(rurl, _fetch_params);\\r\\n            } else if (req_method === 'postjson') {\\r\\n                let rurls = MY_URL.split(';')[0].split('#')\\r\\n                let rurl = rurls[0]\\r\\n                let params = rurls.length > 1 ? rurls[1] : '';\\r\\n                print(`postjson-》rurl:${rurl},params:${params}`);\\r\\n                try {\\r\\n                    params = JSON.parse(params);\\r\\n                } catch (e) {\\r\\n                    params = '{}'\\r\\n                }\\r\\n                let _fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n                let postData = {body: params};\\r\\n                Object.assign(_fetch_params, postData);\\r\\n                html = post(rurl, _fetch_params);\\r\\n            } else {\\r\\n                html = getHtml(MY_URL);\\r\\n            }\\r\\n            if (html) {\\r\\n                if (/系统安全验证|输入验证码/.test(html)) {\\r\\n                    let cookie = verifyCode(MY_URL);\\r\\n                    if (cookie) {\\r\\n                        console.log(`本次成功过验证,cookie:${cookie}`);\\r\\n                        setItem(RULE_CK, cookie);\\r\\n                    } else {\\r\\n                        console.log(`本次自动过搜索验证失败,cookie:${cookie}`);\\r\\n                    }\\r\\n                    // obj.headers['Cookie'] = cookie;\\r\\n                    html = getHtml(MY_URL);\\r\\n                }\\r\\n                if (!html.includes(searchObj.wd)) {\\r\\n                    console.log('搜索结果源码未包含关键字,疑似搜索失败,正为您打印结果源码');\\r\\n                    console.log(html);\\r\\n                }\\r\\n                if (is_json) {\\r\\n                    // console.log(html);\\r\\n                    html = dealJson(html);\\r\\n                    // console.log(JSON.stringify(html));\\r\\n                }\\r\\n                // console.log(html);\\r\\n                let list = _pdfa(html, p0);\\r\\n                // print(list.length);\\r\\n                // print(list);\\r\\n                let p1 = getPP(p, 1, pp, 1);\\r\\n                let p2 = getPP(p, 2, pp, 2);\\r\\n                let p3 = getPP(p, 3, pp, 3);\\r\\n                let p4 = getPP(p, 4, pp, 4);\\r\\n                let p5 = getPP(p, 5, pp, 5);\\r\\n                list.forEach(it => {\\r\\n                    let links = p4.split('+').map(_p4 => {\\r\\n                        return !rule.detailUrl ? _pd(it, _p4, MY_URL) : _pdfh(it, _p4)\\r\\n                    });\\r\\n                    let link = links.join('$');\\r\\n                    let content;\\r\\n                    if (p.length > 5 && p[5]) {\\r\\n                        content = _pdfh(it, p5);\\r\\n                    } else {\\r\\n                        content = '';\\r\\n                    }\\r\\n                    let vod_id = link;\\r\\n                    let vod_name = _pdfh(it, p1).replace(/\\\\n|\\\\t/g, '').trim();\\r\\n                    let vod_pic = _pd(it, p2, MY_URL);\\r\\n                    if (rule.二级 === '*') {\\r\\n                        vod_id = vod_id + '@@' + vod_name + '@@' + vod_pic;\\r\\n                    }\\r\\n                    let ob = {\\r\\n                        'vod_id': vod_id,\\r\\n                        'vod_name': vod_name,\\r\\n                        'vod_pic': vod_pic,\\r\\n                        'vod_remarks': _pdfh(it, p3).replace(/\\\\n|\\\\t/g, '').trim(),\\r\\n                        'vod_content': content.replace(/\\\\n|\\\\t/g, '').trim(),\\r\\n                    };\\r\\n                    d.push(ob);\\r\\n                });\\r\\n\\r\\n            }\\r\\n        } catch (e) {\\r\\n            print('搜索发生错误:' + e.message);\\r\\n            return '{}'\\r\\n        }\\r\\n    }\\r\\n    if (rule.图片替换) {\\r\\n        if (rule.图片替换.startsWith('js:')) {\\r\\n            d.forEach(it => {\\r\\n                try {\\r\\n                    var input = it.vod_pic;\\r\\n                    eval(rule.图片替换.trim().replace('js:', ''));\\r\\n                    it.vod_pic = input;\\r\\n                } catch (e) {\\r\\n                    log(`图片:${it.vod_pic}替换错误:${e.message}`);\\r\\n                }\\r\\n            });\\r\\n        } else if (rule.图片替换.includes('=>')) {\\r\\n            let replace_from = rule.图片替换.split('=>')[0];\\r\\n            let replace_to = rule.图片替换.split('=>')[1];\\r\\n            d.forEach(it => {\\r\\n                if (it.vod_pic && it.vod_pic.startsWith('http')) {\\r\\n                    it.vod_pic = it.vod_pic.replace(replace_from, replace_to);\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    if (rule.图片来源) {\\r\\n        d.forEach(it => {\\r\\n            if (it.vod_pic && it.vod_pic.startsWith('http')) {\\r\\n                it.vod_pic = it.vod_pic + rule.图片来源;\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n    // print(d);\\r\\n    return JSON.stringify({\\r\\n        'page': parseInt(searchObj.pg),\\r\\n        'pagecount': 10,\\r\\n        'limit': 20,\\r\\n        'total': 100,\\r\\n        'list': d,\\r\\n    });\\r\\n}\\r\\n\\r\\n/**\\r\\n * 二级详情页数据解析\\r\\n * @param detailObj\\r\\n * @returns {string}\\r\\n */\\r\\nfunction detailParse(detailObj) {\\r\\n    let t1 = (new Date()).getTime();\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    let orId = detailObj.orId;\\r\\n    let vod_name = '片名';\\r\\n    let vod_pic = '';\\r\\n    let vod_id = orId;\\r\\n    if (rule.二级 === '*') {\\r\\n        // vod_id = orId.split('@@')[0]; // 千万不能分割\\r\\n        let extra = orId.split('@@');\\r\\n        vod_name = extra.length > 1 ? extra[1] : vod_name;\\r\\n        vod_pic = extra.length > 2 ? extra[2] : vod_pic;\\r\\n    }\\r\\n    // print(vod_pic);\\r\\n    let vod = {\\r\\n        vod_id: vod_id, //\\\"id\\\",\\r\\n        vod_name: vod_name,\\r\\n        vod_pic: vod_pic,\\r\\n        type_name: \\\"类型\\\",\\r\\n        vod_year: \\\"年份\\\",\\r\\n        vod_area: \\\"地区\\\",\\r\\n        vod_remarks: \\\"更新信息\\\",\\r\\n        vod_actor: \\\"主演\\\",\\r\\n        vod_director: \\\"导演\\\",\\r\\n        vod_content: \\\"简介\\\"\\r\\n    };\\r\\n    let p = detailObj.二级;\\r\\n    let url = detailObj.url;\\r\\n    let detailUrl = detailObj.detailUrl;\\r\\n    let fyclass = detailObj.fyclass;\\r\\n    let tab_exclude = detailObj.tab_exclude;\\r\\n    let html = detailObj.html || '';\\r\\n    MY_URL = url;\\r\\n    if (detailObj.二级访问前) {\\r\\n        try {\\r\\n            print(`尝试在二级访问前执行代码:${detailObj.二级访问前}`);\\r\\n            eval(detailObj.二级访问前.trim().replace('js:', ''));\\r\\n        } catch (e) {\\r\\n            print(`二级访问前执行代码出现错误:${e.message}`)\\r\\n        }\\r\\n    }\\r\\n    // console.log(MY_URL);\\r\\n    // setItem('MY_URL',MY_URL);\\r\\n    if (p === '*') {\\r\\n        vod.vod_play_from = '道长在线';\\r\\n        vod.vod_remarks = detailUrl;\\r\\n        vod.vod_actor = '没有二级,只有一级链接直接嗅探播放';\\r\\n        vod.vod_content = MY_URL;\\r\\n        vod.vod_play_url = '嗅探播放$' + MY_URL.split('@@')[0];\\r\\n    } else if (typeof (p) === 'string' && p.trim().startsWith('js:')) {\\r\\n        const TYPE = 'detail';\\r\\n        var input = MY_URL;\\r\\n        var play_url = '';\\r\\n        eval(p.trim().replace('js:', ''));\\r\\n        vod = VOD;\\r\\n        console.log(JSON.stringify(vod));\\r\\n    } else if (p && typeof (p) === 'object') {\\r\\n        let tt1 = (new Date()).getTime();\\r\\n        if (!html) {\\r\\n            html = getHtml(MY_URL);\\r\\n        }\\r\\n        print(`二级${MY_URL}仅获取源码耗时:${(new Date()).getTime() - tt1}毫秒`);\\r\\n        let _ps;\\r\\n        if (p.is_json) {\\r\\n            print('二级是json');\\r\\n            _ps = parseTags.json;\\r\\n            html = dealJson(html);\\r\\n        } else if (p.is_jsp) {\\r\\n            print('二级是jsp');\\r\\n            _ps = parseTags.jsp;\\r\\n        } else if (p.is_jq) {\\r\\n            print('二级是jq');\\r\\n            _ps = parseTags.jq;\\r\\n        } else {\\r\\n            print('二级默认jq');\\r\\n            _ps = parseTags.jq;\\r\\n            // print('二级默认jsp');\\r\\n            // _ps = parseTags.jsp;\\r\\n        }\\r\\n        let tt2 = (new Date()).getTime();\\r\\n        print(`二级${MY_URL}获取并装载源码耗时:${tt2 - tt1}毫秒`);\\r\\n        _pdfa = _ps.pdfa;\\r\\n        _pdfh = _ps.pdfh;\\r\\n        _pd = _ps.pd;\\r\\n        if (p.title) {\\r\\n            let p1 = p.title.split(';');\\r\\n            vod.vod_name = _pdfh(html, p1[0]).replace(/\\\\n|\\\\t/g, '').trim();\\r\\n            let type_name = p1.length > 1 ? _pdfh(html, p1[1]).replace(/\\\\n|\\\\t/g, '').replace(/ /g, '').trim() : '';\\r\\n            vod.type_name = type_name || vod.type_name;\\r\\n        }\\r\\n        if (p.desc) {\\r\\n            try {\\r\\n                let p1 = p.desc.split(';');\\r\\n                vod.vod_remarks = _pdfh(html, p1[0]).replace(/\\\\n|\\\\t/g, '').trim();\\r\\n                vod.vod_year = p1.length > 1 ? _pdfh(html, p1[1]).replace(/\\\\n|\\\\t/g, '').trim() : '';\\r\\n                vod.vod_area = p1.length > 2 ? _pdfh(html, p1[2]).replace(/\\\\n|\\\\t/g, '').trim() : '';\\r\\n                // vod.vod_actor = p1.length > 3 ? _pdfh(html, p1[3]).replaceAll('\\\\n', ' ').trim():'';\\r\\n                vod.vod_actor = p1.length > 3 ? _pdfh(html, p1[3]).replace(/\\\\n|\\\\t/g, '').trim() : '';\\r\\n                vod.vod_director = p1.length > 4 ? _pdfh(html, p1[4]).replace(/\\\\n|\\\\t/g, '').trim() : '';\\r\\n            } catch (e) {\\r\\n\\r\\n            }\\r\\n        }\\r\\n        if (p.content) {\\r\\n            try {\\r\\n                let p1 = p.content.split(';');\\r\\n                vod.vod_content = _pdfh(html, p1[0]).replace(/\\\\n|\\\\t/g, '').trim();\\r\\n            } catch (e) {\\r\\n            }\\r\\n        }\\r\\n        if (p.img) {\\r\\n            try {\\r\\n                let p1 = p.img.split(';');\\r\\n                vod.vod_pic = _pd(html, p1[0], MY_URL);\\r\\n            } catch (e) {\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let vod_play_from = '$$$';\\r\\n        let playFrom = [];\\r\\n        if (p.重定向 && p.重定向.startsWith('js:')) {\\r\\n            print('开始执行重定向代码:' + p.重定向);\\r\\n            html = eval(p.重定向.replace('js:', ''));\\r\\n        }\\r\\n\\r\\n// console.log(2);\\r\\n        if (p.tabs) {\\r\\n            if (p.tabs.startsWith('js:')) {\\r\\n                print('开始执行tabs代码:' + p.tabs);\\r\\n                var input = MY_URL;\\r\\n                eval(p.tabs.replace('js:', ''));\\r\\n                playFrom = TABS;\\r\\n            } else {\\r\\n                let p_tab = p.tabs.split(';')[0];\\r\\n                // console.log(p_tab);\\r\\n                let vHeader = _pdfa(html, p_tab);\\r\\n                console.log(vHeader.length);\\r\\n                let tab_text = p.tab_text || 'body&&Text';\\r\\n                // print('tab_text:'+tab_text);\\r\\n                let new_map = {};\\r\\n                for (let v of vHeader) {\\r\\n                    let v_title = _pdfh(v, tab_text).trim();\\r\\n                    if (!v_title) {\\r\\n                        v_title = '线路空'\\r\\n                    }\\r\\n                    console.log(v_title);\\r\\n                    if (tab_exclude && (new RegExp(tab_exclude)).test(v_title)) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    if (!new_map.hasOwnProperty(v_title)) {\\r\\n                        new_map[v_title] = 1;\\r\\n                    } else {\\r\\n                        new_map[v_title] += 1;\\r\\n                    }\\r\\n                    if (new_map[v_title] > 1) {\\r\\n                        v_title += Number(new_map[v_title] - 1);\\r\\n                    }\\r\\n                    playFrom.push(v_title);\\r\\n                }\\r\\n            }\\r\\n            console.log(JSON.stringify(playFrom));\\r\\n        } else {\\r\\n            playFrom = ['道长在线']\\r\\n        }\\r\\n        vod.vod_play_from = playFrom.join(vod_play_from);\\r\\n\\r\\n// console.log(3);\\r\\n        let vod_play_url = '$$$';\\r\\n        let vod_tab_list = [];\\r\\n        if (p.lists) {\\r\\n            if (p.lists.startsWith('js:')) {\\r\\n                print('开始执行lists代码:' + p.lists);\\r\\n                try {\\r\\n                    var input = MY_URL;\\r\\n                    var play_url = '';\\r\\n                    eval(p.lists.replace('js:', ''));\\r\\n                    for (let i in LISTS) {\\r\\n                        if (LISTS.hasOwnProperty(i)) {\\r\\n                            // print(i);\\r\\n                            try {\\r\\n                                LISTS[i] = LISTS[i].map(it => it.split('$').slice(0, 2).join('$'));\\r\\n                            } catch (e) {\\r\\n                                print('格式化LISTS发生错误:' + e.message);\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                    vod_play_url = LISTS.map(it => it.join('#')).join(vod_play_url);\\r\\n                } catch (e) {\\r\\n                    print('js执行lists: 发生错误:' + e.message);\\r\\n                }\\r\\n\\r\\n            } else {\\r\\n                let list_text = p.list_text || 'body&&Text';\\r\\n                let list_url = p.list_url || 'a&&href';\\r\\n                let list_url_prefix = p.list_url_prefix || '';\\r\\n                // print('list_text:'+list_text);\\r\\n                // print('list_url:'+list_url);\\r\\n                // print('list_parse:'+p.lists);\\r\\n                let is_tab_js = p.tabs.trim().startsWith('js:');\\r\\n                for (let i = 0; i < playFrom.length; i++) {\\r\\n                    let tab_name = playFrom[i];\\r\\n                    let tab_ext = p.tabs.split(';').length > 1 && !is_tab_js ? p.tabs.split(';')[1] : '';\\r\\n                    let p1 = p.lists.replaceAll('#idv', tab_name).replaceAll('#id', i);\\r\\n                    tab_ext = tab_ext.replaceAll('#idv', tab_name).replaceAll('#id', i);\\r\\n                    let tabName = tab_ext ? _pdfh(html, tab_ext) : tab_name;\\r\\n                    console.log(tabName);\\r\\n                    // print('tab_ext:'+tab_ext);\\r\\n                    let new_vod_list = [];\\r\\n                    let tt1 = (new Date()).getTime();\\r\\n                    // print('pdfl:'+typeof (pdfl));\\r\\n                    if (typeof (pdfl) === 'function') {\\r\\n                        new_vod_list = pdfl(html, p1, list_text, list_url, MY_URL);\\r\\n                        if (list_url_prefix) {\\r\\n                            new_vod_list = new_vod_list.map(it => it.split('$')[0] + '$' + list_url_prefix + it.split('$').slice(1).join('$'));\\r\\n                        }\\r\\n                    } else {\\r\\n                        let vodList = [];\\r\\n                        try {\\r\\n                            vodList = _pdfa(html, p1);\\r\\n                            console.log('len(vodList):' + vodList.length);\\r\\n                        } catch (e) {\\r\\n                            // console.log(e.message);\\r\\n                        }\\r\\n                        for (let i = 0; i < vodList.length; i++) {\\r\\n                            let it = vodList[i];\\r\\n                            new_vod_list.push(_pdfh(it, list_text).trim() + '$' + list_url_prefix + _pd(it, list_url, MY_URL));\\r\\n                        }\\r\\n                    }\\r\\n                    if (new_vod_list.length > 0) {\\r\\n                        new_vod_list = forceOrder(new_vod_list, '', x => x.split('$')[0]);\\r\\n                        console.log(`drpy影响性能代码共计列表数循环次数:${new_vod_list.length},耗时:${(new Date()).getTime() - tt1}毫秒`);\\r\\n                    }\\r\\n                    // print(new_vod_list);\\r\\n                    let vlist = new_vod_list.join('#');\\r\\n                    vod_tab_list.push(vlist);\\r\\n                }\\r\\n                vod_play_url = vod_tab_list.join(vod_play_url);\\r\\n            }\\r\\n        }\\r\\n        vod.vod_play_url = vod_play_url;\\r\\n    }\\r\\n    if (rule.图片替换 && rule.图片替换.includes('=>')) {\\r\\n        let replace_from = rule.图片替换.split('=>')[0];\\r\\n        let replace_to = rule.图片替换.split('=>')[1];\\r\\n        vod.vod_pic = vod.vod_pic.replace(replace_from, replace_to);\\r\\n    }\\r\\n    if (rule.图片来源 && vod.vod_pic && vod.vod_pic.startsWith('http')) {\\r\\n        vod.vod_pic = vod.vod_pic + rule.图片来源;\\r\\n    }\\r\\n    if (!vod.vod_id || (vod_id.includes('$') && vod.vod_id !== vod_id)) {\\r\\n        vod.vod_id = vod_id;\\r\\n    }\\r\\n    let t2 = (new Date()).getTime();\\r\\n    console.log(`加载二级界面${MY_URL}耗时:${t2 - t1}毫秒`);\\r\\n    // print(vod);\\r\\n    try {\\r\\n        vod = vodDeal(vod);\\r\\n    } catch (e) {\\r\\n        console.log(`vodDeal发生错误:${e.message}`);\\r\\n    }\\r\\n    // print(vod);\\r\\n    return JSON.stringify({\\r\\n        list: [vod]\\r\\n    })\\r\\n}\\r\\n\\r\\n/**\\r\\n * 获取二级待返回的播放线路没处理时的索引关系\\r\\n * @param vod\\r\\n * @returns {{}}\\r\\n */\\r\\nfunction get_tab_index(vod) {\\r\\n    let obj = {};\\r\\n    vod.vod_play_from.split('$$$').forEach((it, index) => {\\r\\n        obj[it] = index;\\r\\n    });\\r\\n    return obj\\r\\n}\\r\\n\\r\\n/**\\r\\n * 处理待返回的vod数据|线路去除,排序,重命名\\r\\n * @param vod\\r\\n * @returns {*}\\r\\n */\\r\\nfunction vodDeal(vod) {\\r\\n    let vod_play_from = vod.vod_play_from.split('$$$');\\r\\n    let vod_play_url = vod.vod_play_url.split('$$$');\\r\\n\\r\\n    // 移除指定线路后的列表\\r\\n    let tab_removed_list = vod_play_from;\\r\\n    // 排序后的线路列表\\r\\n    let tab_ordered_list = vod_play_from;\\r\\n    // 线路重命名后的列表\\r\\n    let tab_renamed_list = vod_play_from;\\r\\n    // 定义实际要返回线路\\r\\n    let tab_list = vod_play_from;\\r\\n    // 选集列表根据线路排序\\r\\n    let play_ordered_list = vod_play_url;\\r\\n\\r\\n    // 判断有移除线路或者线路排序\\r\\n    if ((rule.tab_remove && rule.tab_remove.length > 0) || (rule.tab_order && rule.tab_order.length > 0)) {\\r\\n        // 获取原来线路的索引下标\\r\\n        let tab_index_dict = get_tab_index(vod);\\r\\n\\r\\n        if (rule.tab_remove && rule.tab_remove.length > 0) {\\r\\n            tab_removed_list = vod_play_from.filter(it => !rule.tab_remove.includes(it));\\r\\n            tab_list = tab_removed_list;\\r\\n        }\\r\\n\\r\\n        if (rule.tab_order && rule.tab_order.length > 0) {\\r\\n            let tab_order = rule.tab_order;\\r\\n            tab_ordered_list = tab_removed_list.sort((a, b) => {\\r\\n                return (tab_order.indexOf(a) === -1 ? 9999 : tab_order.indexOf(a)) - (tab_order.indexOf(b) === -1 ? 9999 : tab_order.indexOf(b))\\r\\n            });\\r\\n            tab_list = tab_ordered_list;\\r\\n        }\\r\\n        play_ordered_list = tab_list.map(it => vod_play_url[tab_index_dict[it]]);\\r\\n    }\\r\\n\\r\\n    if (rule.tab_rename && typeof (rule.tab_rename) === 'object' & Object.keys(rule.tab_rename).length > 0) {\\r\\n        tab_renamed_list = tab_list.map(it => rule.tab_rename[it] || it);\\r\\n        tab_list = tab_renamed_list;\\r\\n    }\\r\\n    vod.vod_play_from = tab_list.join('$$$');\\r\\n    vod.vod_play_url = play_ordered_list.join('$$$');\\r\\n    return vod\\r\\n}\\r\\n\\r\\n/**\\r\\n * 判断是否需要解析\\r\\n * @param url\\r\\n * @returns {number|number}\\r\\n */\\r\\nfunction tellIsJx(url) {\\r\\n    try {\\r\\n        let is_vip = !/\\\\.(m3u8|mp4|m4a)$/.test(url.split('?')[0]) && 是否正版(url);\\r\\n        return is_vip ? 1 : 0\\r\\n    } catch (e) {\\r\\n        return 1\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 选集播放点击事件解析\\r\\n * @param playObj\\r\\n * @returns {string}\\r\\n */\\r\\nfunction playParse(playObj) {\\r\\n    fetch_params = JSON.parse(JSON.stringify(rule_fetch_params));\\r\\n    MY_URL = playObj.url;\\r\\n    var MY_FLAG = playObj.flag;\\r\\n    if (!/http/.test(MY_URL)) {\\r\\n        try {\\r\\n            MY_URL = base64Decode(MY_URL);\\r\\n        } catch (e) {\\r\\n        }\\r\\n    }\\r\\n    MY_URL = decodeURIComponent(MY_URL);\\r\\n    var input = MY_URL;//注入给免嗅js\\r\\n    var flag = MY_FLAG;//注入播放线路名称给免嗅js\\r\\n    let common_play = {\\r\\n        parse: SPECIAL_URL.test(input) || /^(push:)/.test(input) ? 0 : 1,\\r\\n        url: input,\\r\\n        flag: flag,\\r\\n        // url:urlencode(input),\\r\\n        jx: tellIsJx(input)\\r\\n    };\\r\\n    let lazy_play;\\r\\n    if (!rule.play_parse || !rule.lazy) {\\r\\n        lazy_play = common_play;\\r\\n    } else if (rule.play_parse && rule.lazy && typeof (rule.lazy) === 'string') {\\r\\n        try {\\r\\n            let lazy_code = rule.lazy.trim();\\r\\n            if (lazy_code.startsWith('js:')) {\\r\\n                lazy_code = lazy_code.replace('js:', '').trim();\\r\\n            }\\r\\n            print('开始执行js免嗅=>' + lazy_code);\\r\\n            eval(lazy_code);\\r\\n            lazy_play = typeof (input) === 'object' ? input : {\\r\\n                parse: SPECIAL_URL.test(input) || /^(push:)/.test(input) ? 0 : 1,\\r\\n                jx: tellIsJx(input),\\r\\n                url: input\\r\\n            };\\r\\n        } catch (e) {\\r\\n            print('js免嗅错误:' + e.message);\\r\\n            lazy_play = common_play;\\r\\n        }\\r\\n    } else {\\r\\n        lazy_play = common_play;\\r\\n    }\\r\\n    // print('play_json:'+typeof(rule.play_json));\\r\\n    // console.log(Array.isArray(rule.play_json));\\r\\n    if (Array.isArray(rule.play_json) && rule.play_json.length > 0) { // 数组情况判断长度大于0\\r\\n        let web_url = lazy_play.url;\\r\\n        for (let pjson of rule.play_json) {\\r\\n            if (pjson.re && (pjson.re === '*' || web_url.match(new RegExp(pjson.re)))) {\\r\\n                if (pjson.json && typeof (pjson.json) === 'object') {\\r\\n                    let base_json = pjson.json;\\r\\n                    // print('开始合并:');\\r\\n                    // print(base_json);\\r\\n                    lazy_play = Object.assign(lazy_play, base_json);\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    } else if (rule.play_json && !Array.isArray(rule.play_json)) { // 其他情况 非[] 判断true/false\\r\\n        let base_json = {\\r\\n            jx: 1,\\r\\n            parse: 1,\\r\\n        };\\r\\n        lazy_play = Object.assign(lazy_play, base_json);\\r\\n    } else if (!rule.play_json) { // 不解析传0\\r\\n        let base_json = {\\r\\n            jx: 0,\\r\\n            parse: 1,\\r\\n        };\\r\\n        lazy_play = Object.assign(lazy_play, base_json);\\r\\n    }\\r\\n    console.log(JSON.stringify(lazy_play));\\r\\n    return JSON.stringify(lazy_play);\\r\\n}\\r\\n\\r\\n/**\\r\\n * 本地代理解析规则\\r\\n * @param params\\r\\n */\\r\\nfunction proxyParse(proxyObj) {\\r\\n    var input = proxyObj.params;\\r\\n    if (proxyObj.proxy_rule) {\\r\\n        log('准备执行本地代理规则:\\\\n' + proxyObj.proxy_rule);\\r\\n        try {\\r\\n            eval(proxyObj.proxy_rule);\\r\\n            if (input && input !== proxyObj.params && Array.isArray(input) && input.length >= 3) {\\r\\n                return input\\r\\n            } else {\\r\\n                return [404, 'text/plain', 'Not Found']\\r\\n            }\\r\\n        } catch (e) {\\r\\n            return [500, 'text/plain', '代理规则错误:' + e.message]\\r\\n        }\\r\\n\\r\\n    } else {\\r\\n        return [404, 'text/plain', 'Not Found']\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 辅助嗅探解析规则\\r\\n * @param isVideoObj\\r\\n * @returns {boolean}\\r\\n */\\r\\nfunction isVideoParse(isVideoObj) {\\r\\n    var input = isVideoObj.url;\\r\\n    if (!isVideoObj.t) { // t为假代表默认传的正则字符串\\r\\n        let re_matcher = new RegExp(isVideoObj.isVideo, 'i');  // /g匹配多个,/i不区分大小写,/m匹配多行\\r\\n        return re_matcher.test(input);\\r\\n    } else {\\r\\n        // 执行js\\r\\n        try {\\r\\n            eval(isVideoObj.isVideo);\\r\\n            if (typeof (input) === 'boolean') {\\r\\n                return input\\r\\n            } else {\\r\\n                return false\\r\\n            }\\r\\n        } catch (e) {\\r\\n            log('执行嗅探规则发生错误:' + e.message);\\r\\n            return false\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 获取加密前的原始的js源文本\\r\\n * @param js_code\\r\\n */\\r\\nfunction getOriginalJs(js_code) {\\r\\n    let current_match = /var rule|[\\\\u4E00-\\\\u9FA5]+|function|let |var |const |\\\\(|\\\\)|\\\"|'/;\\r\\n    if (current_match.test(js_code)) {\\r\\n        return js_code\\r\\n    }\\r\\n    let rsa_private_key = 'MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqin/jUpqM6+fgYP/oMqj9zcdHMM0mEZXLeTyixIJWP53lzJV2N2E3OP6BBpUmq2O1a9aLnTIbADBaTulTNiOnVGoNG58umBnupnbmmF8iARbDp2mTzdMMeEgLdrfXS6Y3VvazKYALP8EhEQykQVarexR78vRq7ltY3quXx7cgI0ROfZz5Sw3UOLQJ+VoWmwIxu9AMEZLVzFDQN93hzuzs3tNyHK6xspBGB7zGbwCg+TKi0JeqPDrXxYUpAz1cQ/MO+Da0WgvkXnvrry8NQROHejdLVOAslgr6vYthH9bKbsGyNY3H+P12kcxo9RAcVveONnZbcMyxjtF5dWblaernAgMBAAECggEAGdEHlSEPFmAr5PKqKrtoi6tYDHXdyHKHC5tZy4YV+Pp+a6gxxAiUJejx1hRqBcWSPYeKne35BM9dgn5JofgjI5SKzVsuGL6bxl3ayAOu+xXRHWM9f0t8NHoM5fdd0zC3g88dX3fb01geY2QSVtcxSJpEOpNH3twgZe6naT2pgiq1S4okpkpldJPo5GYWGKMCHSLnKGyhwS76gF8bTPLoay9Jxk70uv6BDUMlA4ICENjmsYtd3oirWwLwYMEJbSFMlyJvB7hjOjR/4RpT4FPnlSsIpuRtkCYXD4jdhxGlvpXREw97UF2wwnEUnfgiZJ2FT/MWmvGGoaV/CfboLsLZuQKBgQDTNZdJrs8dbijynHZuuRwvXvwC03GDpEJO6c1tbZ1s9wjRyOZjBbQFRjDgFeWs9/T1aNBLUrgsQL9c9nzgUziXjr1Nmu52I0Mwxi13Km/q3mT+aQfdgNdu6ojsI5apQQHnN/9yMhF6sNHg63YOpH+b+1bGRCtr1XubuLlumKKscwKBgQDOtQ2lQjMtwsqJmyiyRLiUOChtvQ5XI7B2mhKCGi8kZ+WEAbNQcmThPesVzW+puER6D4Ar4hgsh9gCeuTaOzbRfZ+RLn3Aksu2WJEzfs6UrGvm6DU1INn0z/tPYRAwPX7sxoZZGxqML/z+/yQdf2DREoPdClcDa2Lmf1KpHdB+vQKBgBXFCVHz7a8n4pqXG/HvrIMJdEpKRwH9lUQS/zSPPtGzaLpOzchZFyQQBwuh1imM6Te+VPHeldMh3VeUpGxux39/m+160adlnRBS7O7CdgSsZZZ/dusS06HAFNraFDZf1/VgJTk9BeYygX+AZYu+0tReBKSs9BjKSVJUqPBIVUQXAoGBAJcZ7J6oVMcXxHxwqoAeEhtvLcaCU9BJK36XQ/5M67ceJ72mjJC6/plUbNukMAMNyyi62gO6I9exearecRpB/OGIhjNXm99Ar59dAM9228X8gGfryLFMkWcO/fNZzb6lxXmJ6b2LPY3KqpMwqRLTAU/zy+ax30eFoWdDHYa4X6e1AoGAfa8asVGOJ8GL9dlWufEeFkDEDKO9ww5GdnpN+wqLwePWqeJhWCHad7bge6SnlylJp5aZXl1+YaBTtOskC4Whq9TP2J+dNIgxsaF5EFZQJr8Xv+lY9lu0CruYOh9nTNF9x3nubxJgaSid/7yRPfAGnsJRiknB5bsrCvgsFQFjJVs=';\\r\\n    let decode_content = '';\\r\\n\\r\\n    function aes_decrypt(data) {\\r\\n        let key = CryptoJS.enc.Hex.parse(\\\"686A64686E780A0A0A0A0A0A0A0A0A0A\\\");\\r\\n        let iv = CryptoJS.enc.Hex.parse(\\\"647A797964730A0A0A0A0A0A0A0A0A0A\\\");\\r\\n        let encrypted = CryptoJS.AES.decrypt({\\r\\n            ciphertext: CryptoJS.enc.Base64.parse(data)\\r\\n        }, key, {\\r\\n            iv: iv,\\r\\n            mode: CryptoJS.mode.CBC,\\r\\n            padding: CryptoJS.pad.Pkcs7\\r\\n        }).toString(CryptoJS.enc.Utf8);\\r\\n        return encrypted;\\r\\n    }\\r\\n\\r\\n    let error_log = false;\\r\\n\\r\\n    function logger(text) {\\r\\n        if (error_log) {\\r\\n            log(text);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let decode_funcs = [\\r\\n        (text) => {\\r\\n            try {\\r\\n                return ungzip(text)\\r\\n            } catch (e) {\\r\\n                logger('非gzip加密');\\r\\n                return ''\\r\\n            }\\r\\n        },\\r\\n        (text) => {\\r\\n            try {\\r\\n                return base64Decode(text)\\r\\n            } catch (e) {\\r\\n                logger('非b64加密');\\r\\n                return ''\\r\\n            }\\r\\n        },\\r\\n        (text) => {\\r\\n            try {\\r\\n                return aes_decrypt(text)\\r\\n            } catch (e) {\\r\\n                logger('非aes加密');\\r\\n                return ''\\r\\n            }\\r\\n        },\\r\\n        (text) => {\\r\\n            try {\\r\\n                return RSA.decode(text, rsa_private_key, null)\\r\\n            } catch (e) {\\r\\n                logger('非rsa加密');\\r\\n                return ''\\r\\n            }\\r\\n        },\\r\\n        // (text)=>{try {return NODERSA.decryptRSAWithPrivateKey(text, RSA.getPrivateKey(rsa_private_key).replace(/RSA /g,''), {options: {environment: \\\"browser\\\", encryptionScheme: 'pkcs1',b:'1024'}});} catch (e) {log(e.message);return ''}},\\r\\n    ]\\r\\n    let func_index = 0\\r\\n    while (!current_match.test(decode_content)) {\\r\\n        decode_content = decode_funcs[func_index](js_code);\\r\\n        func_index++;\\r\\n        if (func_index >= decode_funcs.length) {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    return decode_content\\r\\n}\\r\\n\\r\\n/**\\r\\n * 执行main函数\\r\\n * 示例  function main(text){return gzip(text)}\\r\\n * @param main_func_code\\r\\n * @param arg\\r\\n */\\r\\nfunction runMain(main_func_code, arg) {\\r\\n    let mainFunc = function () {\\r\\n        return ''\\r\\n    };\\r\\n    try {\\r\\n        eval(main_func_code + '\\\\nmainFunc=main;');\\r\\n        return mainFunc(arg);\\r\\n    } catch (e) {\\r\\n        log(`执行main_funct发生了错误:${e.message}`);\\r\\n        return ''\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源预处理特定返回对象中的函数\\r\\n * @param ext\\r\\n */\\r\\nfunction init(ext) {\\r\\n    console.log('init');\\r\\n    // init前重置rule和fetch_params\\r\\n    rule = {};\\r\\n    rule_fetch_params = {};\\r\\n    fetch_params = null;\\r\\n    try {\\r\\n        // make shared jsContext happy muban不能import,不然会造成换源继承后变量被篡改\\r\\n        // if (typeof (globalThis.mubanJs) === 'undefined') {\\r\\n        //     let mubanJs = request('https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/dr_py/main/js/模板.js', { 'User-Agent': MOBILE_UA });\\r\\n        //     mubanJs = mubanJs.replace('export default', '(function() {return muban;}()) // export default');\\r\\n        //     // console.log(mubanJs);\\r\\n        //     globalThis.mubanJs = mubanJs;\\r\\n        // }\\r\\n        // let muban = eval(globalThis.mubanJs);\\r\\n\\r\\n        let muban = 模板.getMubans();\\r\\n        // print(typeof (muban));\\r\\n        // print(muban);\\r\\n        if (typeof ext == 'object') {\\r\\n            rule = ext;\\r\\n        } else if (typeof ext == 'string') {\\r\\n            if (ext.startsWith('http') || ext.startsWith('file://')) {\\r\\n                let query = getQuery(ext); // 获取链接传参\\r\\n                let js = request(ext, {'method': 'GET'});\\r\\n                if (js) {\\r\\n                    js = getOriginalJs(js);\\r\\n                    // eval(js.replace('var rule', 'rule'));\\r\\n                    // eval(\\\"(function(){'use strict';\\\"+js.replace('var rule', 'rule')+\\\"})()\\\");\\r\\n                    eval(\\\"(function(){\\\" + js.replace('var rule', 'rule') + \\\"})()\\\");\\r\\n                }\\r\\n                if (query.type === 'url' && query.params) { // 指定type是链接并且传了params支持简写如 ./xx.json\\r\\n                    rule.params = urljoin(ext, query.params);\\r\\n                } else if (query.params) { // 没指定type直接视为字符串\\r\\n                    rule.params = query.params;\\r\\n                }\\r\\n            } else {\\r\\n                ext = getOriginalJs(ext);\\r\\n                // eval(ext.replace('var rule', 'rule'));\\r\\n                // eval(\\\"(function(){'use strict';\\\"+ext.replace('var rule', 'rule')+\\\"})()\\\");\\r\\n                eval(\\\"(function(){\\\" + ext.replace('var rule', 'rule') + \\\"})()\\\");\\r\\n            }\\r\\n        } else {\\r\\n            console.log(`规则加载失败,不支持的规则类型:${typeof ext}`);\\r\\n            return\\r\\n        }\\r\\n        rule.host = (rule.host || '').rstrip('/');\\r\\n        HOST = rule.host;\\r\\n        if (rule.hostJs) {\\r\\n            console.log(`检测到hostJs,准备执行...`);\\r\\n            try {\\r\\n                eval(rule.hostJs);\\r\\n                rule.host = HOST.rstrip('/');\\r\\n            } catch (e) {\\r\\n                console.log(`执行${rule.hostJs}获取host发生错误:` + e.message);\\r\\n            }\\r\\n        }\\r\\n        if (rule['模板'] === '自动') {\\r\\n            try {\\r\\n                let host_headers = rule['headers'] || {};\\r\\n                let host_html = getCode(HOST, {headers: host_headers});\\r\\n                let match_muban = '';\\r\\n                let muban_keys = Object.keys(muban).filter(it => !/默认|短视2/.test(it));\\r\\n                for (let muban_key of muban_keys) {\\r\\n                    try {\\r\\n                        let host_data = JSON.parse(home({}, host_html, muban[muban_key].class_parse));\\r\\n                        if (host_data.class && host_data.class.length > 0) {\\r\\n                            match_muban = muban_key;\\r\\n                            console.log(`自动匹配模板:【${muban_key}】`);\\r\\n                            break;\\r\\n                        }\\r\\n                    } catch (e) {\\r\\n                        // @ts-ignore\\r\\n                        console.log(`自动匹配模板:【${muban_key}】错误:${e.message}`);\\r\\n                    }\\r\\n                }\\r\\n                if (match_muban) {\\r\\n                    muban['自动'] = muban[match_muban];\\r\\n                    if (rule['模板修改'] && rule['模板修改'].startsWith('js:')) {\\r\\n                        // 模板修改:$js.toString(()=>{ muban.自动.class_parse = ''});\\r\\n                        eval(rule['模板修改'].replace('js:', '').trim());\\r\\n                    }\\r\\n                } else {\\r\\n                    delete rule['模板']\\r\\n                }\\r\\n            } catch (e) {\\r\\n                delete rule['模板']\\r\\n            }\\r\\n        }\\r\\n        if (rule.模板 && muban.hasOwnProperty(rule.模板)) {\\r\\n            print('继承模板:' + rule.模板);\\r\\n            rule = Object.assign(muban[rule.模板], rule);\\r\\n        }\\r\\n        /** 处理一下 rule规则关键字段没传递的情况 **/\\r\\n        let rule_cate_excludes = (rule.cate_exclude || '').split('|').filter(it => it.trim());\\r\\n        let rule_tab_excludes = (rule.tab_exclude || '').split('|').filter(it => it.trim());\\r\\n        rule_cate_excludes = rule_cate_excludes.concat(CATE_EXCLUDE.split('|').filter(it => it.trim()));\\r\\n        rule_tab_excludes = rule_tab_excludes.concat(TAB_EXCLUDE.split('|').filter(it => it.trim()));\\r\\n\\r\\n        rule.cate_exclude = rule_cate_excludes.join('|');\\r\\n        rule.tab_exclude = rule_tab_excludes.join('|');\\r\\n\\r\\n        rule.类型 = rule.类型 || '影视'; // 影视|听书|漫画|小说\\r\\n        rule.url = rule.url || '';\\r\\n        rule.double = rule.double || false;\\r\\n        rule.homeUrl = rule.homeUrl || '';\\r\\n        rule.detailUrl = rule.detailUrl || '';\\r\\n        rule.searchUrl = rule.searchUrl || '';\\r\\n        rule.homeUrl = rule.host && rule.homeUrl ? urljoin(rule.host, rule.homeUrl) : (rule.homeUrl || rule.host);\\r\\n        rule.homeUrl = cheerio.jinja2(rule.homeUrl, {rule: rule});\\r\\n        rule.detailUrl = rule.host && rule.detailUrl ? urljoin(rule.host, rule.detailUrl) : rule.detailUrl;\\r\\n        rule.二级访问前 = rule.二级访问前 || '';\\r\\n        if (rule.url.includes('[') && rule.url.includes(']')) {\\r\\n            let u1 = rule.url.split('[')[0]\\r\\n            let u2 = rule.url.split('[')[1].split(']')[0]\\r\\n            rule.url = rule.host && rule.url ? urljoin(rule.host, u1) + '[' + urljoin(rule.host, u2) + ']' : rule.url;\\r\\n        } else {\\r\\n            rule.url = rule.host && rule.url ? urljoin(rule.host, rule.url) : rule.url;\\r\\n        }\\r\\n        if (rule.searchUrl.includes('[') && rule.searchUrl.includes(']') && !rule.searchUrl.includes('#')) {\\r\\n            let u1 = rule.searchUrl.split('[')[0]\\r\\n            let u2 = rule.searchUrl.split('[')[1].split(']')[0]\\r\\n            rule.searchUrl = rule.host && rule.searchUrl ? urljoin(rule.host, u1) + '[' + urljoin(rule.host, u2) + ']' : rule.searchUrl;\\r\\n        } else {\\r\\n            rule.searchUrl = rule.host && rule.searchUrl ? urljoin(rule.host, rule.searchUrl) : rule.searchUrl;\\r\\n        }\\r\\n\\r\\n        rule.timeout = rule.timeout || 5000;\\r\\n        rule.encoding = rule.编码 || rule.encoding || 'utf-8';\\r\\n        rule.search_encoding = rule.搜索编码 || rule.search_encoding || '';\\r\\n        rule.图片来源 = rule.图片来源 || '';\\r\\n        rule.图片替换 = rule.图片替换 || '';\\r\\n        rule.play_json = rule.hasOwnProperty('play_json') ? rule.play_json : [];\\r\\n        rule.pagecount = rule.hasOwnProperty('pagecount') ? rule.pagecount : {};\\r\\n        rule.proxy_rule = rule.hasOwnProperty('proxy_rule') ? rule.proxy_rule : '';\\r\\n        if (!rule.hasOwnProperty('sniffer')) { // 默认关闭辅助嗅探\\r\\n            rule.sniffer = false;\\r\\n        }\\r\\n        rule.sniffer = rule.hasOwnProperty('sniffer') ? rule.sniffer : '';\\r\\n        rule.sniffer = !!(rule.sniffer && rule.sniffer !== '0' && rule.sniffer !== 'false');\\r\\n\\r\\n        rule.isVideo = rule.hasOwnProperty('isVideo') ? rule.isVideo : '';\\r\\n        if (rule.sniffer && !rule.isVideo) { // 默认辅助嗅探自动增强嗅探规则\\r\\n            rule.isVideo = 'http((?!http).){12,}?\\\\\\\\.(m3u8|mp4|flv|avi|mkv|rm|wmv|mpg|m4a|mp3)\\\\\\\\?.*|http((?!http).){12,}\\\\\\\\.(m3u8|mp4|flv|avi|mkv|rm|wmv|mpg|m4a|mp3)|http((?!http).)*?video/tos*|http((?!http).)*?obj/tos*';\\r\\n        }\\r\\n\\r\\n        rule.tab_remove = rule.hasOwnProperty('tab_remove') ? rule.tab_remove : [];\\r\\n        rule.tab_order = rule.hasOwnProperty('tab_order') ? rule.tab_order : [];\\r\\n        rule.tab_rename = rule.hasOwnProperty('tab_rename') ? rule.tab_rename : {};\\r\\n\\r\\n        if (rule.headers && typeof (rule.headers) === 'object') {\\r\\n            try {\\r\\n                let header_keys = Object.keys(rule.headers);\\r\\n                for (let k of header_keys) {\\r\\n                    if (k.toLowerCase() === 'user-agent') {\\r\\n                        let v = rule.headers[k];\\r\\n                        console.log(v);\\r\\n                        if (['MOBILE_UA', 'PC_UA', 'UC_UA', 'IOS_UA', 'UA'].includes(v)) {\\r\\n                            rule.headers[k] = eval(v);\\r\\n                        }\\r\\n                    } else if (k.toLowerCase() === 'cookie') {\\r\\n                        let v = rule.headers[k];\\r\\n                        if (v && v.startsWith('http')) {\\r\\n                            console.log(v);\\r\\n                            try {\\r\\n                                v = fetch(v);\\r\\n                                console.log(v);\\r\\n                                rule.headers[k] = v;\\r\\n                            } catch (e) {\\r\\n                                console.log(`从${v}获取cookie发生错误:` + e.message);\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } catch (e) {\\r\\n                console.log('处理headers发生错误:' + e.message);\\r\\n            }\\r\\n        }\\r\\n        // print(rule.headers);\\r\\n        rule_fetch_params = {'headers': rule.headers || false, 'timeout': rule.timeout, 'encoding': rule.encoding};\\r\\n        oheaders = rule.headers || {};\\r\\n        RKEY = typeof (key) !== 'undefined' && key ? key : 'drpy_' + (rule.title || rule.host);\\r\\n        pre(); // 预处理\\r\\n        init_test();\\r\\n    } catch (e) {\\r\\n        console.log('init_test发生错误:' + e.message);\\r\\n    }\\r\\n}\\r\\n\\r\\nlet homeHtmlCache = undefined;\\r\\n\\r\\n/**\\r\\n * js源获取首页分类和筛选特定返回对象中的函数\\r\\n * @param filter 筛选条件字典对象\\r\\n * @param home_html 指定了源码。无需内部再请求\\r\\n * @param class_parse 自动匹配传入的模板的动态分类\\r\\n * @returns {string}\\r\\n */\\r\\nfunction home(filter, home_html, class_parse) {\\r\\n    console.log(\\\"home\\\");\\r\\n    home_html = home_html || '';\\r\\n    class_parse = class_parse || '';\\r\\n    if (typeof (rule.filter) === 'string' && rule.filter.trim().length > 0) {\\r\\n        try {\\r\\n            let filter_json = ungzip(rule.filter.trim());\\r\\n            rule.filter = JSON.parse(filter_json);\\r\\n        } catch (e) {\\r\\n            rule.filter = {};\\r\\n        }\\r\\n    }\\r\\n    let homeObj = {\\r\\n        filter: rule.filter || false,\\r\\n        MY_URL: rule.homeUrl,\\r\\n        class_name: rule.class_name || '',\\r\\n        class_url: rule.class_url || '',\\r\\n        class_parse: class_parse || rule.class_parse || '',\\r\\n        cate_exclude: rule.cate_exclude,\\r\\n        home_html: home_html,\\r\\n    };\\r\\n    return homeParse(homeObj);\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源获取首页推荐数据列表特定返回对象中的函数\\r\\n * @param params\\r\\n * @returns {string}\\r\\n */\\r\\nfunction homeVod(params) {\\r\\n    console.log(\\\"homeVod\\\");\\r\\n    let homeVodObj = {\\r\\n        推荐: rule.推荐,\\r\\n        double: rule.double,\\r\\n        homeUrl: rule.homeUrl,\\r\\n        detailUrl: rule.detailUrl\\r\\n    };\\r\\n    return homeVodParse(homeVodObj)\\r\\n    // return \\\"{}\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源获取分类页一级数据列表特定返回对象中的函数\\r\\n * @param tid 分类id\\r\\n * @param pg 页数\\r\\n * @param filter 当前选中的筛选条件\\r\\n * @param extend 扩展\\r\\n * @returns {string}\\r\\n */\\r\\nfunction category(tid, pg, filter, extend) {\\r\\n    let cateObj = {\\r\\n        url: rule.url,\\r\\n        一级: rule.一级,\\r\\n        tid: tid,\\r\\n        pg: parseInt(pg),\\r\\n        filter: filter,\\r\\n        extend: extend\\r\\n    };\\r\\n    // console.log(JSON.stringify(extend));\\r\\n    return categoryParse(cateObj)\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源获取二级详情页数据特定返回对象中的函数\\r\\n * @param vod_url 一级列表中的vod_id或者是带分类的自拼接 vod_id 如 fyclass$vod_id\\r\\n * @returns {string}\\r\\n */\\r\\nfunction detail(vod_url) {\\r\\n    let orId = vod_url;\\r\\n    let fyclass = '';\\r\\n    log('orId:' + orId);\\r\\n    if (vod_url.indexOf('$') > -1) {\\r\\n        let tmp = vod_url.split('$');\\r\\n        fyclass = tmp[0];\\r\\n        vod_url = tmp[1];\\r\\n    }\\r\\n    let detailUrl = vod_url.split('@@')[0];\\r\\n    let url;\\r\\n    if (!detailUrl.startsWith('http') && !detailUrl.includes('/')) {\\r\\n        url = rule.detailUrl.replaceAll('fyid', detailUrl).replaceAll('fyclass', fyclass);\\r\\n    } else if (detailUrl.includes('/')) {\\r\\n        url = urljoin(rule.homeUrl, detailUrl);\\r\\n    } else {\\r\\n        url = detailUrl\\r\\n    }\\r\\n    let detailObj = {\\r\\n        orId: orId,\\r\\n        url: url,\\r\\n        二级: rule.二级,\\r\\n        二级访问前: rule.二级访问前,\\r\\n        detailUrl: detailUrl,\\r\\n        fyclass: fyclass,\\r\\n        tab_exclude: rule.tab_exclude,\\r\\n    }\\r\\n    return detailParse(detailObj)\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源选集按钮播放点击事件特定返回对象中的函数\\r\\n * @param flag 线路名\\r\\n * @param id 播放按钮的链接\\r\\n * @param flags 全局配置的flags是否需要解析的标识列表\\r\\n * @returns {string}\\r\\n */\\r\\nfunction play(flag, id, flags) {\\r\\n    let playObj = {\\r\\n        url: id,\\r\\n        flag: flag,\\r\\n        flags: flags\\r\\n    }\\r\\n    return playParse(playObj);\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源搜索返回的数据列表特定返回对象中的函数\\r\\n * @param wd 搜索关键字\\r\\n * @param quick 是否来自快速搜索\\r\\n * @returns {string}\\r\\n */\\r\\nfunction search(wd, quick, pg) {\\r\\n    if (rule.search_encoding) {\\r\\n        if (rule.search_encoding.toLowerCase() !== 'utf-8') {\\r\\n            // 按搜索编码进行编码\\r\\n            wd = encodeStr(wd, rule.search_encoding);\\r\\n        }\\r\\n    } else if (rule.encoding && rule.encoding.toLowerCase() !== 'utf-8') {\\r\\n        // 按全局编码进行编码\\r\\n        wd = encodeStr(wd, rule.encoding);\\r\\n    }\\r\\n    let searchObj = {\\r\\n        searchUrl: rule.searchUrl,\\r\\n        搜索: rule.搜索,\\r\\n        wd: wd,\\r\\n        //pg: pg,\\r\\n        pg: pg || 1,\\r\\n        quick: quick,\\r\\n    };\\r\\n    // console.log(JSON.stringify(searchObj));\\r\\n    return searchParse(searchObj)\\r\\n}\\r\\n\\r\\n/**\\r\\n * js源本地代理返回的数据列表特定返回对象中的函数\\r\\n * @param params 代理链接参数比如 /proxy?do=js&url=https://wwww.baidu.com => params就是 {do:'js','url':'https://wwww.baidu.com'}\\r\\n * @returns {*}\\r\\n */\\r\\nfunction proxy(params) {\\r\\n    if (rule.proxy_rule && rule.proxy_rule.trim()) {\\r\\n        rule.proxy_rule = rule.proxy_rule.trim();\\r\\n    }\\r\\n    if (rule.proxy_rule.startsWith('js:')) {\\r\\n        rule.proxy_rule = rule.proxy_rule.replace('js:', '');\\r\\n    }\\r\\n    let proxyObj = {\\r\\n        params: params,\\r\\n        proxy_rule: rule.proxy_rule\\r\\n    };\\r\\n    return proxyParse(proxyObj)\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * 是否启用辅助嗅探功能,启用后可以根据isVideo函数进行手动识别为视频的链接地址。默认为false\\r\\n * @returns {*|boolean|boolean}\\r\\n */\\r\\nfunction sniffer() {\\r\\n    let enable_sniffer = rule.sniffer || false;\\r\\n    if (enable_sniffer) {\\r\\n        // log('准备执行辅助嗅探代理规则:\\\\n'+rule.isVideo);\\r\\n        log('开始执行辅助嗅探代理规则...');\\r\\n    }\\r\\n    return enable_sniffer\\r\\n}\\r\\n\\r\\n/**\\r\\n * 启用辅助嗅探功能后根据次函数返回的值识别地址是否为视频，返回true/false\\r\\n * @param url\\r\\n */\\r\\nfunction isVideo(url) {\\r\\n    let t = 0;\\r\\n    let is_video;\\r\\n    if (rule.isVideo && rule.isVideo.trim()) {\\r\\n        is_video = rule.isVideo.trim();\\r\\n    }\\r\\n    if (is_video.startsWith('js:')) {\\r\\n        is_video = is_video.replace('js:', '');\\r\\n        t = 1;\\r\\n    }\\r\\n    let isVideoObj = {\\r\\n        url: url,\\r\\n        isVideo: is_video,\\r\\n        t: t,\\r\\n    };\\r\\n    let result = isVideoParse(isVideoObj);\\r\\n    if (result) {\\r\\n        log('成功执行辅助嗅探规则并检测到视频地址:\\\\n' + rule.isVideo);\\r\\n    }\\r\\n    return result\\r\\n}\\r\\n\\r\\n/**\\r\\n * 获取规则\\r\\n * @returns {{}}\\r\\n */\\r\\nfunction getRule(key) {\\r\\n    return key ? rule[key] || '' : rule\\r\\n}\\r\\n\\r\\nfunction DRPY() {//导出函数\\r\\n    return {\\r\\n        runMain: runMain,\\r\\n        getRule: getRule,\\r\\n        init: init,\\r\\n        home: home,\\r\\n        homeVod: homeVod,\\r\\n        category: category,\\r\\n        detail: detail,\\r\\n        play: play,\\r\\n        search: search,\\r\\n        proxy: proxy,\\r\\n        sniffer: sniffer,\\r\\n        isVideo: isVideo,\\r\\n        fixAdM3u8Ai: fixAdM3u8Ai,\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 导出函数无法简写成下面的形式:\\r\\n\\r\\n export default {\\r\\n  ...DRPY,\\r\\n  DRPY\\r\\n }\\r\\n\\r\\n */\\r\\n\\r\\n// 导出函数对象\\r\\n$.exports = {\\r\\n    runMain,\\r\\n    getRule,\\r\\n    init,\\r\\n    home,\\r\\n    homeVod,\\r\\n    category,\\r\\n    detail,\\r\\n    play,\\r\\n    search,\\r\\n    proxy,\\r\\n    sniffer,\\r\\n    isVideo,\\r\\n    fixAdM3u8Ai,\\r\\n    DRPY,\\r\\n}\"}]","proxy":"","icon":"https://xiaoxiaojia.oss-cn-shanghai.aliyuncs.com/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"万能🎬","author":"格格","version":2,"type":"video","url":"https://wnvod.net/vodtype/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/voddetail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } else if (url.match(/qq|iqiyi|youku|mgtv|bilibili|sohu|ixigua|pptv|migu|le|1905|fun|vip|yaokan|douban|huanxi|cctv/)) {\n        return aytmParse(url)\n     } else if (/mgtv|sohu/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\n     } else if (/bilibili|bilivideo/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}';\n    }\n            \n});\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://wap.wnvod.net/template/mytheme/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"0855🎬","author":"格格","version":0,"type":"video","url":"https://www.085516.com/f/fyAll/index-fypage.html[firstPage=https://www.085516.com/f/fyAll/  ]","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺&私藏&","class_url":"tv&vod&dongman&zongyi&tp&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.085512.com/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy = $('').lazyRule((MY_HOME) => {\n    var html = pdfa(request(input, {}), 'body&&.hl-tabs-btn');\n    var name = html.map(data => pdfh(data, 'Text'));\n    var lists = [];\n    for (var i = 1; i <= html.length; i++) {\n        lists.push(input.replace(/(.*?-)\\d+(.*)/, '$1' + i + '$2'))\n    }\n    var url = lists.map(data => JSON.parse(request(data).match(/r player_.*?=(.*?)</)[1]).url);\n    return JSON.stringify({\n        urls: url,\n        names: name\n    });\n}, MY_HOME)\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.085516.com/template/0855/asset/favicon.ico"},{"last_chapter_rule":"","pageList":[],"title":"墨墨🎬","author":"蓝莓果酱UX","version":0,"type":"video","url":"http://www.shliangjie1.com/vt/fyAll-fypage/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","chapter_find":".fed-list-pics&&data-original;.fed-part-both&&Text;body&&.fed-play-item@a;a&&Text;a&&href;.fed-tabs-item&&.fed-drop-btns@Text","movie_find":"","searchFind":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"http://www.shliangjie1.com/vsearch/**----------fypage---/","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar lazy = `@lazyRule=.js:JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]).url`;\n\nvar 标题 = 'body&&h3&&Text';\nvar 简介 = '.data,-1&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 线路列表 = 'body&&.stui-pannel__head';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\nvar 调用断插 = 0;\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"require('https://gitlab.com/hjdhnx/hiker/-/raw/main/js/预处理.js');","pages":"[]","proxy":"","icon":"http://image.shliangjie.com/static/cs/st_07_02_min.png"},{"last_chapter_rule":"","pageList":[],"title":"小白菜🎬","author":"道长&蓝莓果酱UX","version":0,"type":"video","url":"http://www.xbcdy.com/vodshow/fyclass-fyarea-fysort------fypage---fyyear.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"全部&大陆&香港&台湾&美国&法国","area_url":"&大陆&香港&台湾&美国&法国","sort_name":"","year_name":"年代&2021&2020&2019&2018","sort_url":"","year_url":"&2021&2020&2019&2018","find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 片源链接 = '/voddetail/'\n搜索验证()","search_url":"http://www.xbcdy.com/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar lazy =  `@lazyRule=.js:decodeURIComponent(base64Decode(JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]).url))`;\n\nvar 标题 = 'body&&h1&&Text';\nvar 简介 = '.data,3&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 线路列表 = 'body&&.nav&&a';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\nvar 调用断插 = 0;\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"var 验证码='http://www.xbcdy.com/verify/index.html';\nrequire('https://gitlab.com/hjdhnx/hiker/-/raw/main/js/预处理.js');","pages":"[]","proxy":"","icon":"http://www.xbcdy.com/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"348🎬","author":"格格","version":1,"type":"video","url":"https://www.348z.com/vodshow/id/fyclass/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.pack-ykpack';\nvar 标题 = 'a&&title';\nvar 描述 = '.pack-prb&&Text';\nvar 图片 = '.eclazy&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.ec-search&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pack-prb&&Text';\nvar 图片 = '.eclazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/vodsearch/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } else if (url.match(/qq|iqiyi|youku|mgtv|bilibili|sohu|ixigua|pptv|migu|le|1905|fun|vip|yaokan|douban|huanxi|cctv/)) {\n        return aytmParse(url)\n     } else if (/mgtv|sohu/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\n     } else if (/bilibili|bilivideo/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}';\n    } else {\n        const {lazyParse} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\n        return lazyParse(input)\n    }\n});\n\nvar 线路列表 = '.play_source_tab&&a';\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.348z.com/template/Ds-wap/img/20191011150535538.png"},{"last_chapter_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"789🎬","author":"道长&蓝莓果酱UX","version":2,"type":"video","url":"https://789ys.com/list/2-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text||.pic-tag,1&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist__media&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.55kan.com/search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\n\n\nvar 线路列表 = 'body&&.stui-pannel__head';\nvar 选集列表 = 'body&&.stui-content__plist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"","pages":"[]","proxy":"","icon":"https://789ys.com/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:\neval(fetch(config.模板));\n\nvar 选集列表 = 'body&&.sort-item';\nvar 选集标签= .'sort-item&&a';\n章节()","pageList":[],"title":"奈落🎬","author":"格格","version":0,"type":"video","url":"https://newfii.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"地区&内地&香港&台湾&美国&法国&英国&日本&韩国&德国&泰国&印度&意大利&西班牙&加拿大&其他","area_url":"&area/内地&area/香港&area/台湾&area/美国&area/法国&area/英国&area/日本&area/韩国&area/德国&area/泰国&area/印度&area/意大利&area/西班牙&area/加拿大&area/其他","sort_name":"","year_name":"年代&2022&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010&2009&2008&2007&2006&2005&更早","sort_url":"","year_url":"&year/2022&year/2021&year/2020&year/2019&year/2018&year/2017&year/2016&year/2015&year/2014&year/2013&year/2012&year/2011&year/2010&year/2009&year/2008&year/2007&year/2006&year/2005&更早","find_rule":"js:\neval(fetch(config.模板));\n\nvar 列表 = 'body&&.module-items&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/voddetail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(config.模板));\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url.replace(/O0O0OO0O0O|O0O0O/, \"\");    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    }\nlog('\\n'+'当前线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } else if (url.match(/qq|iqiyi|youku|mgtv|bilibili|sohu|ixigua|pptv|migu|le|1905|fun|vip|yaokan|douban|huanxi|cctv/)) {\n        return aytmParse(url)\n     } else if (/mgtv|sohu/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\n     } else if (/bilibili|bilivideo/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}';\n     }else if (url.match(/xfy|LT|renrenmi|leduozy|RongXingVR|daodm/)) {\n        return ParseS['超强解析♔'](url)\n}\n            \n});\nvar 线路列表 = '.module-tab-content&&span';\nvar 选集列表 = 'body&&.sort-item';\nvar 选集标签 = '.sort-item&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"auto","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.newfii.com/template/mxone/mxstatic/picture/ico.ico"},{"last_chapter_rule":"js:\nrequire(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"星辰②🎬","author":"逐风者","version":2021092805,"type":"video","url":"http://www.40yb.com/fyAll/indexfypage.html[firstPage= http://www.40yb.com/fyAll/index.html ]","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"dianshiju&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nrequire(config.模板);\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text||.pic-tag,1&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:\nrequire(config.模板);\n\nvar 列表 = '.stui-vodlist__media&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"http://www.40yb.com/search.php?page=fypage&searchword=**=","titleColor":"#ff228be6","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\nvar lazy=`@lazyRule=.stui-player__video&&script&&Html.js:eval(input.replace(/64de/g,'64De'));var url=unescape(now);if(url.match(/qq|iqiyi|youku|mgtv|bilibili|sohu|ixigua|pptv|migu|le|1905|fun|vip|yaokan|douban|huanxi|cctv/)){eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));eval(fetch(config.cj));aytmParse(url)}else{url}`;\n \n//var lazy =`@lazyRule=.embed-responsive&&script&&Html.js:eval(input.replace(/64de/g,'64De'));now.indexOf('m3u8')!=-1?now:now.split('/share')[0]+fetch(now,{}).match(/url:.*?'(.*?)\"/)[1]`;\nvar 线路列表 = 'body&&.stui-pannel__head||h3';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://www.40yb.com/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"草民🎬","author":"格格","version":0,"type":"video","url":"https://www.cmdys.com/show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"动作片&喜剧片&爱情片&科幻片&恐怖片&剧情片&战争片","area_url":"dongzuopian&xijupian&aiqingpian&kehuanpian&kongbupian&juqingpian&zhanzhengpian","sort_name":"","year_name":"国产剧&港台剧&日韩剧&欧美剧","sort_url":"","year_url":"guochanju&gangtaiju&rihanju&oumeiju","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.cmdys.com/search/**----------fypage---.html","titleColor":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.cmdys.com/template/mxonestyles/static/picture/logo.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"神马🎬","author":"格格","version":0,"type":"video","url":"https://www.shenma4480.com/show/fyclass--fysort------fypage---fyyear/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"全部&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010","sort_url":"","year_url":"&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.shenma4480.com/search/**----------fypage---/","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy = $('').lazyRule((MY_HOME) => {\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    eval(request(MY_HOME + '/static/js/playerconfig.js'));\n    var jx = MacPlayerConfig.player_list[html.from].parse\n    eval(request(jx + url, {\n        headers: {\n            'Referer': MY_URL\n        }\n    }).match(/var config = {[\\s\\S]*?}/)[0])\neval(request('https://disdk.oss-cn-shenzhen.aliyuncs.com/play/js/decode.js'))\n    function dd(jx, body) {\n        return getVideoInfo(JSON.parse(post(jx, {\n            body: body,\n        })).url);\n    }\n    return dd('https://player.6080kan.cc/player/xinapi.php', {\n        url: config.url,\n        vkey: config.vkey,\n        token: config.token,\n        sign: 'smdyycc'\n    }) + '#isVideo=true#'\n}, MY_HOME)\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.shenma4480.com/statics/img/favicon.ico"},{"last_chapter_rule":"js:\nrequire(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"昌龙🎬","author":"格格","version":0,"type":"video","url":"https://www.380tv.com/category/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&3&4&","area_name":"动作片&喜剧片&爱情片&科幻片&恐怖片&剧情片&战争片&悬疑片&犯罪片&惊悚片&冒险片&纪录片&动画片&微影视&其他片","area_url":"5&6&7&8&9&10&11&12&13&14&15&16&17&18&19","sort_name":"","year_name":"国产剧&港台剧&日韩剧&欧美剧&其他剧","sort_url":"","year_url":"20&21&22&23&24","find_rule":"js:\nrequire(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.text-right||.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:\nrequire(config.模板);\n\nvar 列表 = '.myui-vodlist||#searchList&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.text-right||.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.380tv.com/vediosearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\nvar lazy = $(\"\").lazyRule(() => {\n     try {\n         var apiUrl = \"https://www.xgchanglong.com/index.php/ajax/vodurl\";\n         var jid = input.split('\\/')[5].split('.')[0];\n         //log(jid);\n         var json = JSON.parse(request(apiUrl, {\n             headers: {\n                 \"User-Agent\": MOBILE_UA,\n                 \"Referer\": input\n             },\n             body: \"jid=\" + jid,\n             method: \"POST\"\n         }));\n         if (json.code == 1) {\n             var playurl = json.data.playurl;\n             if (playurl.match(/\\.m3u8|\\.mp4|obj\\/tos|\\.flv/) && !playurl.match(/html|m3u8\\.tv|\\&next|ac\\=dm|\\=http/)) {\n                 if (playurl.indexOf('bilivideo') != -1) {\n                     return playurl + ';{Referer@https://www.bilibili.com&&User-Agent@Mozilla/5.0}';\n                 } else if (playurl.indexOf('titan.mgtv.com') != -1) {\n                     return playurl + '#isVideo=true#' + ';{Referer@www.mgtv.com&&User-Agent@Mozilla/5.0}';\n                 } else if (playurl.indexOf('com/gzc') != -1) {\n                     return playurl + ';{Referer@https://www.laibahj.com}';\n                 } else {\n                     return playurl\n                 }\n             }\n         } else {\n             var play = input;\n             showLoading(\"网页嗅探中,请稍后...\");\n             var video = 'x5Rule://' + play + '@' + $.toString(() => {\n                 var urls = _getUrls()\n                 for (var i in urls) {\n                     if (!urls[i].includes(\"url=\") && urls[i].match(/\\.mp4|\\.m3u8|video/)) {                       \n                         return urls[i]\n                     }\n                 }\n             })\n         }\n     } catch (e) {\n         return 'toast://嗅探异常，请稍后重试。'\n     }\n\n });\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.380tv.com/template/mytheme/statics/image/20220407/1d42cd3ce.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"必搜🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://biso.cc/show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"动作片&喜剧片&爱情片&科幻片&恐怖片&剧情片&战争片&纪录片&微电影","area_url":"6&7&8&9&10&11&12&21&22","sort_name":"","year_name":"国产剧&港台剧&日韩剧&欧美剧&海外剧","sort_url":"","year_url":"13&14&15&16&20","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/detail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy = $('').lazyRule(() => {\n    var urll = \"\";\n    try {\n        var html = request(input, {});\n        var player_data = JSON.parse(html.match(/r player_.*?=(.*?)</)[1]);\n        urll = player_data.url;\n        if (player_data.encrypt == '1') {\n            urll = unescape(player_data.url);\n        } else if (player_data.encrypt == '2') {\n            urll = unescape(base64Decode(player_data.url));\n        }; \n        if (urll.match(/\\.m3u8|\\.mp4|obj\\/tos|\\.flv/) && !urll.match(/html|m3u8\\.tv|\\&next|ac\\=dm|\\=http/)) {\n            if (urll.indexOf('bilivideo') != -1) {\n                return urll + ';{Referer@https://www.bilibili.com&&User-Agent@Mozilla/5.0}';\n            } else if (urll.indexOf('titan.mgtv.com') != -1) {\n                return urll + '#isVideo=true#' + ';{Referer@www.mgtv.com&&User-Agent@Mozilla/5.0}';\n            } else if (urll.indexOf('com/gzc') != -1) {\n                return urll + ';{Referer@https://www.laibahj.com}';\n            } else {\n                return urll;\n            }\n        } else {\n            showLoading(\"正在进行检索，请稍候...\");\n            var video = 'x5Rule://' + jiexi + '@' + $.toString(() => {\n                //fba.log(fba.getUrls());\n                var urls = _getUrls();\n                if (urls.length > 0) {\n                    for (var i in urls) {\n                        if (urls[i].match(/\\.m3u8|\\.mp4|obj\\/tos|\\.flv/) && !urls[i].match(/html|m3u8\\.tv|\\&next|ac\\=dm|\\=http/)) {\n                            //fy_bridge_app.log(urls[i])\n                            if (urls[i].indexOf('bilivideo') != -1) {\n                                return urls[i] + ';{Referer@https://www.bilibili.com&&User-Agent@Mozilla/5.0}';\n                            } else if (urls[i].indexOf('titan.mgtv.com') != -1) {\n                                return urls[i] + '#isVideo=true#' + ';{Referer@www.mgtv.com&&User-Agent@Mozilla/5.0}';\n                            } else if (urls[i].indexOf('com/gzc') != -1) {\n                                return urls[i] + ';{Referer@https://www.laibahj.com}';\n                            } else {\n                                return urls[i]\n                            }\n                        }\n                    }\n                } else {\n                    fba.hideLoading();\n                    return 'toast://嗅探失败，可能链接无法访问。'\n                }\n            });\n            return video\n        }\n    } catch (e) {\n        return 'toast://嗅探异常，可能链接无法访问。'\n    }\n});\nvar 线路列表 = '.module-tab-content&&span';\nvar 选集列表 = 'body&&.sort-item';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://biso.cc/template/dianyingim/img/logo.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"魔卡🎬","author":"格格","version":0,"type":"video","url":"https://www.kumoka.com/ryyyshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"地区&大陆&香港&台湾&美国&法国&英国&日本&韩国&德国&泰国&印度&意大利&西班牙&加拿大&新加坡&其他","area_url":"&大陆&香港&台湾&美国&法国&英国&日本&韩国&德国&泰国&印度&意大利&西班牙&加拿大&新加坡&其他","sort_name":"时间&人气&评分","year_name":"年代&2022&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010","sort_url":"time&hits&score","year_url":"&2022&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.kumoka.com/ryyysearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.kumoka.com/template/statics_tmp2/images/logo.png"},{"last_chapter_rule":"js:\nrequire(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"555🎬","author":"影视","version":0,"type":"video","url":"https://55flix.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nrequire(config.模板);\n\nvar 列表 = 'body&&.module-items&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/voddetail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","titleColor":"#fff20c00","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\nvar lazy=`@lazyRule=iframe&&src.js:input.split('url=')[1]`;\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://t1.021huaying.com/2022/07/12/88c2f1613357e.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"ikan234🎬","author":"道长&Btea","version":2,"type":"video","url":"hiker://empty##https://www.ikan234.com/list/2-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'当前线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } \n            \n});\nvar 线路列表 = 'body&&.stui-pannel__head';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.ikan234.com/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"兄弟🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.brovod.com/show/fyAll--------fypage---/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.brovod.com/ss/**----------fypage---/","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\nvar lazy = $('').lazyRule((MY_HOME) => {\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var from = html.from\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    log(url)\n    if (/m3u8/.test(url)) {\n\n        return url\n    } else {\n\n        var jx = request(MY_HOME + '/static/player/' + html.from + '.js').match(/src=\"(.*?)'/)[1]\n        log(jx)\n        if (/mytv/.test(html.from)) {\n            var url = request(jx + url).match(/url: '(.*?)'/)[1]\n            log(url)\n            return url\n        } else {\n            eval(request(jx + url, {\n                headers: {\n                    'Referer': MY_HOME\n                }\n            }).match(/var config = {[\\s\\S]*?}/)[0])\n\n            eval(getCryptoJS())\n\n            /* function getHourlyTimestamp() {\n              const _0x5d3f83 = new Date();\n              return _0x5d3f83.setMinutes(0), _0x5d3f83.setSeconds(0), _0x5d3f83.setMilliseconds\n            (0), _0x5d3f83.getTime();\n            }\n\n            */\n            let key = CryptoJS.SHA256(new Date(new Date().setMinutes(0, 0, 0)).getTime() / 1000 + \"brovod\").toString(CryptoJS.enc.Hex);\n\n            log(key)\n            let body = JSON.stringify({\n                \"url\": config.url,\n                \"pbgjz\": config.pbgjz,\n                \"dmkey\": config.dmkey,\n                \"key\": key\n            })\n            log(body)\n            let video = JSON.parse(request('https://jx.xdys.vip/v1/jx', {\n                headers: {\n                    'Content-Type': 'text/plain'\n                },\n                body: body,\n                method: 'POST'\n            })).jarod\n            log(video)\n\n\n\n            return video\n\n\n            /*   \n     \nvar api =\"https://pl.qcheng.cc/hktvpc.php?url=\"\nif (/mytv/.test(html.from)){\nvar url=request(api+ url).match(/url: '(.*?)'/)[1]\nlog (url)\nreturn url\n}else{\nvar jx = request(MY_HOME + '/static/player/' + html.from + '.js').match(/src=\"(.*?)'/)[1]\nlog(jx)\n                eval(request(jx.replace('index', 'ec') + url, {\n                    headers: {\n                        'Referer': MY_URL\n                    }\n                }).match(/let ConFig.*}/)[0])\n                eval(getCryptoJS())\n                return CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(ConFig.url, CryptoJS.enc.Utf8.parse('2890' + ConFig.config.uid + 'tB959C'), {\n                    iv: CryptoJS.enc.Utf8.parse('2F131BE91247866E'),\n                    mode: CryptoJS.mode.CBC,\n                    padding: CryptoJS.pad.Pkcs7\n                })) + '#isVideo=true#';\n    }*/\n        }\n    }\n}, MY_HOME);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.brovod.com/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"小鸭🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://777tv.ai/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://777tv.ai/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://777tv.ai/images/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"视中心🎬","author":"格格","version":20221207,"type":"video","url":"hiker://empty##https://www.ksksy.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.ksksy.com/vodsearch/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy = $('').lazyRule(() => {\n    try {\n        function toUrl(playUrl) {\n            if (/mgtv|sohu/.test(playUrl)) {\n                return playUrl + \";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\";\n            } else if (/bili/.test(playUrl)) {\n                return playUrl + \";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\";\n            } else if (/ixigua/.test(playUrl)) {\n                return playUrl + \"#isVideo=true#\" + \"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\";\n            } else {\n                return playUrl;\n            }\n        }\n\n        var html = request(input, {});\n        var player_data = JSON.parse(html.match(/r player_.*?=(.*?)</)[1]);\n        var fro = player_data.from;\n        var playUrl = player_data.url;\n\n\n        if (player_data.encrypt == '1') {\n            playUrl = unescape(player_data.url);\n        } else if (player_data.encrypt == '2') {\n            playUrl = unescape(base64Decode(player_data.url));\n        };\n        var exclude = /playm3u8|m3u8\\.tv|min\\.css|404\\.m3u8|\\.css/;\n        var contain = /\\.mp4|\\.m3u8|\\.flv|\\.avi|\\.mpeg|\\.wmv|\\.mov|\\.rmvb|\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\n        if (!exclude.test(playUrl) && contain.test(playUrl)) {\n            return toUrl(playUrl);\n        }\n\n        var jxUrl = 'https://languang.ksksy.com/?url=' + playUrl + '&tm=' + player_data.tm + '&key=' + player_data.key + '&next=' + player_data.link_next + '&title=' + pdfh(html, \"title&&Text\").split(\"-\")[0];\n        var jxHtml = request(jxUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0)\"\n            },\n            method: \"GET\"\n        });\n        eval(jxHtml.match(/var config = {[\\s\\S]*?}/)[0] + \"\");\n        var apiUrl = 'https://languang.ksksy.com/API.php';\n        var apiHtml = request(apiUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0)\"\n            },\n            body: \"url=\" + config.url + \"&time=\" + config.time + \"&key=\" + config.key,\n            method: \"POST\"\n        });\n        var json = JSON.parse(apiHtml);\n        if (json.code == 200) {\n            playUrl = json.url;\n            return toUrl(playUrl);\n        } else {\n            return 'toast://' + json.msg;\n        }\n\n    } catch (e) {\n        //setError(e);\n        showLoading(\"正在进行检索，请稍候...\");\n        var video = 'x5Rule://' + input + '@' + $.toString(() => {\n            //fba.log(fba.getUrls())\n            var urls = _getUrls()\n            var exclude = /playm3u8|m3u8\\.tv|min\\.css|404\\.m3u8|\\.css/;\n            var contain = /\\.mp4|\\.m3u8|\\.flv|\\.avi|\\.mpeg|\\.wmv|\\.mov|\\.rmvb|\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\n            for (var i in urls) {\n                if (!exclude.test(urls[i]) && contain.test(urls[i])) {\n                    // fy_bridge_app.log(urls[i])\n                    if (/mgtv|sohu/.test(urls[i])) {\n                        return urls[i] + \";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\";\n                    } else if (/bili/.test(urls[i])) {\n                        return urls[i] + \";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\";\n                    } else if (/ixigua/.test(urls[i])) {\n                        return urls[i] + \"#isVideo=true#\" + \"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\";\n                    } else {\n                        return urls[i]\n                    }\n                }\n            }\n        });\n        return video;\n    }\n});\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.ksksy.com/template/mxone/mxstatic/picture/logo.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"APP🎬","author":"格格","version":1,"type":"video","url":"https://www.appmovie.cc/index.php/vod/type/id/fyclass/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.appmovie.cc/index.php/vod/search.html?wd=**&submit=","titleColor":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } \n            \n});\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://cdn.wyteam.net/webapps/maccms/template/blueghost/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"疯狗🎬","author":"格格","version":0,"type":"video","url":"https://m.fenggoudy3.com/list-select-id-fyAll-type--area--year--star--state--order-addtime-p-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.vod-item-img&&li';\nvar 标题 = 'h2&&Text';\nvar 描述 = '.continu&&Text';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.vod-item-img&&li';\nvar 标题 = 'h2&&Text';\nvar 描述 = '.continu&&Text';\nvar 图片 = 'img&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://m.fenggoudy3.com/vod-search-wd-**-p-fypage.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\n\nvar 线路列表 = 'body&&.page-header';\nvar 选集列表 = 'body&&.ff-playurl-line';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h2&&Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://m.fenggoudy3.com/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.content_playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"KOK🎬","author":"格格","version":1,"type":"video","url":"https://www.pzjzyy.com/koks/kokAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"ds&dy&dm&zy&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.movie-list-item';\nvar 标题 = '.movie-title&&Text';\nvar 描述 = '.movie-rating&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.vod-search-list';\nvar 标题 = '.movie-title&&Text';\nvar 描述 = '.movie-rating&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.pzjzyy.com/kokso/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } else {\n        const {lazyParse} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\n        return lazyParse(input)\n    }\n            \n});\nvar 线路列表 = '.play_source_tab&&a';\nvar 选集列表 = 'body&&.content_playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.pzjzyy.com/template/kokmoban/img/favicon.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"小狗🎬","author":"格格","version":0,"type":"video","url":"https://pupvod.com/puptype/fyAllpfypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"TVshow&movie&Anime&Variety","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.myui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://pupvod.com/pupsearch/ppppppppppppp.html?wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\nvar lazy = $('').lazyRule(() => {\n    try {\n        function toUrl(playUrl) {\n            if (/mgtv|sohu/.test(playUrl)) {\n                return playUrl + \";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\";\n            } else if (/bili/.test(playUrl)) {\n                return playUrl + \";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\";\n            } else if (/ixigua/.test(playUrl)) {\n                return playUrl + \"#isVideo=true#\" + \"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\";\n            } else {\n                return playUrl;\n            }\n        }\n\n        var html = request(input, {});\n        var player_data = JSON.parse(html.match(/r player_.*?=(.*?)</)[1]);\n        var fro = player_data.from;\n        var playUrl = player_data.url;\n\n\n        if (player_data.encrypt == '1') {\n            playUrl = unescape(player_data.url);\n        } else if (player_data.encrypt == '2') {\n            playUrl = unescape(base64Decode(player_data.url));\n        };\n        var exclude = /playm3u8|m3u8\\.tv|min\\.css|404\\.m3u8|\\.css/;\n        var contain = /\\.mp4|\\.m3u8|\\.flv|\\.avi|\\.mpeg|\\.wmv|\\.mov|\\.rmvb|\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\n        if (!exclude.test(playUrl) && contain.test(playUrl)) {\n            return toUrl(playUrl);\n        }\n\n\n        var jxHtml = request(jxUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0)\"\n            },\n            method: \"GET\"\n        });\n        eval(jxHtml.match(/var config = {[\\s\\S]*?}/)[0] + \"\");\n\n        var apiHtml = request(apiUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0)\"\n            },\n            body: \"url=\" + config.url + \"&time=\" + config.time + \"&key=\" + config.key,\n            method: \"POST\"\n        });\n        var json = JSON.parse(apiHtml);\n        if (json.code == 200) {\n            playUrl = json.url;\n            return toUrl(playUrl);\n        } else {\n            return 'toast://' + json.msg;\n        }\n\n    } catch (e) {\n        //setError(e);\n        showLoading(\"正在进行检索，请稍候...\");\n        var video = 'x5Rule://' + input + '@' + $.toString(() => {\n            //fba.log(fba.getUrls())\n            var urls = _getUrls()\n            var exclude = /playm3u8|m3u8\\.tv|min\\.css|404\\.m3u8|\\.css/;\n            var contain = /\\.mp4|\\.m3u8|\\.flv|\\.avi|\\.mpeg|\\.wmv|\\.mov|\\.rmvb|\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\n            for (var i in urls) {\n                if (!exclude.test(urls[i]) && contain.test(urls[i])) {\n                    // fy_bridge_app.log(urls[i])\n                    if (/mgtv|sohu/.test(urls[i])) {\n                        return urls[i] + \";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\";\n                    } else if (/bili/.test(urls[i])) {\n                        return urls[i] + \";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\";\n                    } else if (/ixigua/.test(urls[i])) {\n                        return urls[i] + \"#isVideo=true#\" + \"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\";\n                    } else {\n                        return urls[i]\n                    }\n                }\n            }\n        });\n        return video;\n    }\n});\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://pupvod.com/template/mytheme/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"66西瓜🎬","author":"格格","version":0,"type":"video","url":"https://www.ledlmw.com/sx-fyclass-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&3&4&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.myui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"/baidu**/page/fypage.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\n\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.ledlmw.com/template/mytheme/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"米爱🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.miai9.cc/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.miai9.cc/vodsearch/-------------.html?wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.miai9.cc/upload/mxcms/20230102-1/b92b2ddae09438e5be9797a152a790e9.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"橘猫🎬","author":"格格","version":1,"type":"video","url":"https://www.fq620.com/show/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.fq620.com/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } else {\n        const {lazyParse} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\n        return lazyParse(input)\n    }\n            \n});\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.fq620.com/upload/site/20221021-1/e0ef4a46a73c1ab02eecda65e4dc3407.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"影渣渣🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.yingzhazha.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/voddetail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.yingzhazha.com/mxtheme/images/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"圣城🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://sc1080.top/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://sc1080.top/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://sc1080.top/static/images/logo.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"139🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.139ys.com/vodtype/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"lianxuju&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.myui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.139ys.com/vodsearch/-------------.html?wd=**&submit=","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.139ys.com/template/mytheme/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"明帝🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://ys.md214.cn/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://ys.md214.cn/index.php/vod/search.html?wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\n\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://ys.md214.cn/mxtheme/images/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"青苹果🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.miushuo.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.miushuo.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.miushuo.com/mxtheme/images/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"荔枝🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://zjys.vip/vodshow/fyAll--------fypage---/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://zjys.vip/vodsearch/page/fypage/wd/**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://pic.rmb.bdstatic.com/bjh/4b79a918aa44da7959f63806814b0448.jpeg"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"吃瓜🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.chiguafilm.com/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.chiguafilm.com/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\n\n\nvar html=request(MY_URL.replace('hiker://empty##', ''));\nvar MY_URL=pd(html,\"body&&a.btn_primary&&href\");\nvar 线路列表 = '.play_source_tab&&a';\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.chiguafilm.com/template/conch/img/19jin.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"胖虎🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://www.panghuys.com/vodshow/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.panghuys.com/phsch/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.panghuys.com/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"7号🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.num7.xyz/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&3&4&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.num7.xyz/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://cdn.jsdelivr.net/gh/ifuncool/num7cloud/3b613b27aeb44ec51a29b21793c57f06.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"飞飞🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.kaixinfang.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"fenlei2&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.kaixinfang.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.kaixinfang.com/template/mxone/mxstatic/picture/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"海兔🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.haituu.tv/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.haituu.tv/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.haituu.tv/template/mxone/mxstatic/picture/logo.png"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_num_list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"十品🎬","author":"格格","version":0,"type":"video","url":"http://www.sh5187.com/spshow/fyclass/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.tv-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.v-tips&&Text';\nvar 图片 = 'img&&data-src';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.search-list&&.item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.v-tips&&Text';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n搜索()","search_url":"http://www.sh5187.com/spsearch/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.play_source_tab&&a';\nvar 选集列表 = 'body&&.play_num_list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://www.sh5187.com/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"稻田🎬","author":"格格","version":0,"type":"video","url":"https://555u.net/vodshow/fyAll--------fypage---.html;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://555u.net/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://img1.baidu.com/it/u=2313859,3291633042&fm=253&app=138&size=b931,274&q=75&n=0&f=PNG&fmt=auto&maxorilen2heic=2000000"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"首播🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://www.mhz8.com##fypage","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.mhz8.com/ch/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.mhz8.com/template/mxone/mxstatic/picture/apple-touch-icon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"乐仁🎬","author":"格格","version":0,"type":"video","url":"https://www.lranc.com/lrtv/dianying/page/3.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"dianshiju&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.myui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.lranc.com/lrso**/page/fypage.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.lranc.com/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"思古🎬","author":"格格","version":20230927,"type":"video","url":"hiker://empty##https://siguyy.cc/type/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"tv&m&ct&va","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n\n\n\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/detail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://img.enxnc.com.cn/uploadimg/ico/2021/1124/1637720411447602.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"爱🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://aiyingshis.com/vodtype/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://aiyingshis.com/vodsearch/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://aiyingshis.com/mxstatic/picture/logo.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"臭蛋蛋🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://cddys.me/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://cddys.me/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://cddys.me/upload/mxprocms/20230207-1/73e14465db536e67a6a73ea7f7d7c906.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"700🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://700kan.cc/DyttShow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://700kan.cc/DyttSearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://700kan.cc/mxtheme/images/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"东方🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.oyangjian.com/vodshow/fyAll--------fypage---/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"21&20&23&22&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.oyangjian.com/vodsearch/**----------fypage---/","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.oyangjian.com/template/DYXS2/static/picture/logo.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"灰太狼🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.minjiancai.com/vodshow/fyAll--------fypage---/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.minjiancai.com/vodsearch**/page/fyoage/","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.minjiancai.com/template/mxone/mxstatic/picture/favicon.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"黑狐🎬","author":"格格","version":0,"type":"video","url":"http://fagmn.com/list/fyclass_fypage.html?order=fysort","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"时间&人气","year_name":"","sort_url":"time&hit","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"http://fagmn.com/search.php","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.nav&&a';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://fagmn.com/static/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"悠云🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://yoyys1.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.module-play-list-content';\nvar 选集标签 = '.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://yoyys1.com/upload/mxprocms/20231010-1/01013b641bc4bf77a9d357ad4ed746ba.png"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"农民🎬","author":"格格","version":20231211,"type":"video","url":"https://m.xiangdao.me/vod-list-id-fyclass-pg-fypage-order--by-fysort-class-0-year-fyyear-letter--area-fyarea-lang-.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"全部\n&大陆&香港&台湾&美国&韩国&日本&泰国&新加坡&马来西亚&印度&英国&法国&加拿大&西班牙&俄罗斯&其它","area_url":"&大陆&香港&台湾&美国&韩国&日本&泰国&新加坡&马来西亚&印度&英国&法国&加拿大&西班牙&俄罗斯&其它","sort_name":"时间&人气&评分","year_name":"全部sort_url":"time&hits&score","year_url":"0&2023&2022&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010&2009&2008&2007&2006&2005&2004&2003&2002&2001&2000&1999&1998&1997&1996&1995&1994&1993&1992&1991&1990&1989&1988&1987&1986&1985&1984&1983&1982&1981&1980&1979&1978&1977&1976&1975&1974&1973&1972&1971&1970&1969&1968&1967&1966&1965&1964&1963&1962&1961&1960&1959&1958&1957&1956&1955&1954&1953&1952&1951&1950&1949&1948&1947&1946&1945&1944&1943&1942&1941&1940&1939&1938&1937&1936&1935&1934&1933&1932&1931&1930&1929&1928&1927&1926&1925&1924&1923&1922&1921&1920&1919&1918&1917&1916&1915&1914&1913&1912&1911&1910&1909&1908&1907&1906&1905&1904&1903&1902&1901&1900","find_rule":"js:require(config.模板);\n\nvar 列表 = '.resize_list&&li';\nvar 标题 = '.sTit&&Text';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.ulPicTxt&&li';\nvar 标题 = '.sTit&&Text';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = 'img&&data-src';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://m.xiangdao.me/index.php?m=vod-search&wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.hd&&a';\nvar 选集列表 = 'body&&.numList';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://v.emsdn.cn/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.episodes-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"58②🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://www.58kdy.net/type/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.y-list-info||.fed-deta-info&&li';\nvar 标题 = '.y-list-title||.fed-part-eone&&Text';\nvar 描述 = '.y-list-pics&&.y-list-remarks&&Text';\nvar 图片 = '.y-lazy&&.data-src||data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.y-list-deta';\nvar 标题 = 'h3&&Text';\nvar 描述 = '.y-list-remarks&&Text';\nvar 图片 = '.y-lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.58kdy.net/search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy =$('').lazyRule(()=>{\n    let  player=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n     var from = player.from;\n     var url = player.url;    \n     if (player.encrypt == '1') {\n       var url = unescape(url);\n    } else if (player.encrypt == '2') {\n       var url = unescape(base64Decode(url));\n    } else{\n      var url =url;\n    }\n    log('\\n'+'当前线路名：'+ from+'\\n'+'链接：'+ url);\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    if(/m3u8|mp4/.test(url)){\n        return cacheM3u8(url)\n     } else if (url.match(/qq|iqiyi|youku|mgtv|bilibili|sohu|ixigua|pptv|migu|le|1905|fun|vip|yaokan|douban|huanxi|cctv/)) {\n        return aytmParse(url)\n     } else if (/mgtv|sohu/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\n     } else if (/bilibili|bilivideo/.test(url)) {\n        url = url+ ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}';\n    }\n            \n});\n\nvar 线路列表 = 'body&&.nav&&a';\nvar 选集列表 = 'body&&.episodes-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","icon":"https://www.58kdy.net/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"花花🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://hua355.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://hua355.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://hua355.com/upload/mxprocms/20230322-1/415dd351e8b57a50bc605b43168461ad.png"},{"firstHeader":"class","last_chapter_rule":"","pageList":[],"title":"蚂蚁🎬","author":"发粪涂墙","version":0,"type":"video","url":"https://www.mayiyingshi.com/vodtype/fyAll-fypage.html","col_type":"movie_3","class_name":"电影&电视剧&综艺&动漫","class_url":"1&2&4&3","area_name":"动作片&战争片&剧情片&恐怖片&科幻片&爱情片&喜剧片","area_url":"5&11&10&9&8&7&6","sort_name":"","year_name":"国产剧&欧美剧&香港剧&台湾剧&日本剧&韩国剧","sort_url":"","year_url":"16&17&18&19&20&21","find_rule":"js:\nvar items=[];\n\nvar list = parseDomForArray(getResCode(), '.stui-vodlist&&li');//列表\n\nfor(var i in list){\ntry{\nitems.push({\ntitle:parseDomForHtml(list[i],'a&&title'),//标题\ndesc:parseDomForHtml(list[i],'.pic-text&&Text'),//描述\npic_url:parseDom(list[i],'.lazyload&&data-original'),//图片\nurl:parseDom(list[i],'a&&href'),//链接\ncol_type: 'movie_3'});\n  }catch(e){''}\n}\n//道佬•模板\nsetHomeResult({ data : items});","searchFind":"js:\nvar items=[];\n\nvar list = parseDomForArray(getResCode(), '.stui-vodlist__media&&li');//列表\nfor(var i in list){\ntry{\nitems.push({\ntitle:parseDomForHtml(list[i],'a&&title'),//标题\ndesc:parseDomForHtml(list[i],'.pic-text&&Text'),//描述\ncontent:parseDomForHtml(list[i],'p,-1&&Text'),//详情\npic_url:parseDom(list[i],'a&&data-original'),//图片\nurl:parseDom(list[i],'a&&href')//链接\n});\n  }catch(e){''}\n}\n//道佬•模板\nsetSearchResult({ data : items});","search_url":"/vodsearch/**----------fypage---.htm","titleColor":"#004466","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:var d = [];var html=getResCode();\n\n\n//默认播放地址(需修改)\nvar lazy=`@lazyRule=.stui-player__video&&script&&Html.js:eval(input);var url=player_data.url;url.indexOf('m3u8')!=-1?url:url.split('/share')[0]+fetch(url,{}).match(/url: '(.*?)'/)[1]`;\n\n\n\n\n//视频标题的定位\ntry{\nvar des_title = parseDomForHtml(html, 'body&&h1&&Text');\n\n}catch(e){\nvar des_title ='没有正确获取到影片名称哟！';\n}\n\n//剧情简介的定位\ntry{\nvar des_desc = parseDomForHtml(html,'.stui-content__detail&&p,-2&&Text');\n\n}catch(e){\nvar des_desc ='没有正确获取到剧情简介哟！';\n}\n\n//视频封面的定位\ntry{\nvar des_pic =parseDom(html,'.lazyload&&data-original');\n\n}catch(e){\nvar des_desc ='没有正确获取到简介图片路径哟！\\n'+des_desc;\n}\n\n//线路名列表的定位\nvar arts = parseDomForArray(html,'.play_source&&a');\n\n\n//播放列表的列表的定位\nvar conts = parseDomForArray(html, 'body&&.stui-content__playlist');\n   \nvar lists =[];\nfor (var i in conts) {\n    lists.push(parseDomForArray(conts[i], 'ul&&li'))      //' 列表名改'ul&&li'\n}\n\nvar tabs = [];\nfor (var i in conts) {\n    tabs.push(parseDomForHtml(arts[i], 'Text'))//有可能改Text\n\n}\n\n\n//下面除了获取选集名称例如1,2,3集，有的需要改下\n//有其他不需要修改\n\nd.push({\ntitle:des_title,\ndesc:des_desc,\npic_url:des_pic,\nurl:getUrl(),\ncol_type:'movie_1_vertical_pic'\n});\n\n//加一行空白行\nd.push({col_type:'line_blank'});\nd.push({\n\ttitle: \"““””<b>\"+'<span style=\"color: #CC4444\">'+'͜҉✿҉͜✿҉͜✿҉͜ 共有'+arts.length+'条线路 ͜҉✿͜҉✿҉͜҉✿҉͜҉'+'</span></b>',\n\tcol_type: 'text_center_1'\n})    \n   \n\n\n//折叠需要用到的\nfunction setLists(tabs, lists, vari) {\n    var title = '';\n    for (var i = 0; i < tabs.length; i++) {\n        var url = \"hiker://empty@lazyRule=.js:putVar('\" + vari + i + \"', getVar('\" + vari + i + \"', ' 【已折叠】') == ' 【已展开】' ? ' 【已折叠】': ' 【已展开】');refreshPage();'toast://切换成功！'\";\n\n\n         let flag=getVar(vari + i, ' 【已折叠】') == ' 【已展开】'?'🔻':'🔻';\n        d.push({\ntitle:flag+'线路'+(i+1)+'=> '+ parseDomForHtml(tabs[i],\"Text\"),\n            url: url,\n            col_type: 'text_1'\n        })\n          \n        if (getVar(vari + i, ' 【已折叠】') == ' 【已展开】') {\n            var list = lists[i];\n            for (var j in list) {\n                d.push({\n\n\n                    title: parseDomForHtml(list[j],'a&&Text'),//有的需要改'Text'\n\n\n\n                    url:parseDom(list[j],'a&&href') + lazy,\n                    col_type: list.length >3?'text_3':'text_2'\n                });\n            }\n        }\n    }\n}\n\n// 调用函数\nsetLists(tabs, lists, MY_URL);\n\nsetResult(d);","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"auto","preRule":"","pages":"[]","proxy":"","icon":"https://cdn.aiqingyu1314.com/mayi/statics/img/favicon.ico"},{"last_chapter_rule":"js:\nrequire(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"vip🎬","author":"发粪涂墙","version":0,"type":"video","url":"hiker://empty##http://www.vip1280.net/frim/indexfyAll/page/fypage.html[firstPage= http://www.vip1280.net/frim/indexfyAll.html ]","col_type":"movie_3","class_name":"电视剧&电影&港台","class_url":"2&1&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nrequire(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.text-right&&Text';\nvar 图片 = 'a&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/movie/index'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\nvar lazy = $('').lazyRule(() => {\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    if (/m3u8|mp4/.test(html.url)) {\n        var play = html.url\n    } else {\n  /*      eval(request('http://www.vip1280.net/static/js/playerconfig.js'));\n        var jx = MacPlayerConfig.player_list[html.from].parse;\n        if (jx == '') {\n            jx = MacPlayerConfig.parse\n        }\n   */     eval(request('https://jie.laodublog.com/?url=' + html.url,{headers:{'Referer':input}}).match(/var config = {[\\s\\S]*?}/)[0])\n        var play = JSON.parse(post('https://jie.laodublog.com/API.php', {\n            headers: {\n                'User-Agent': MOBILE_UA\n            },\n            body: config\n        })).url\n        if (/mgtv/.test(html.url)) {\n            play += ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\n        } else if (/bili/.test(html.url)) {\n            play += ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}'\n        }\n    }\n    return play + '#isVideo=true#'\n});\n\nvar 线路列表 = 'body&&h3';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://laodu.laodublog.com/favicon.ico"},{"last_chapter_rule":"","pageList":[],"title":"奇优🎬","author":"蓝莓果酱UX","version":1,"type":"video","url":"http://www.2dye.com/list/fyAll_fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\nvar 列表 = '.stui-vodlist__media&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"/search.php?searchword=**;post","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch(\"hiker://files/rules/模板/规则模板.js\"));\n\n`@lazyRule=.js:var get =fetch(input,{})；；var js = parseDomForHtml(get,\".stui-player__video＆＆＆＆iframe＆＆＆＆src\")；；var jx = fetch(js,{headers:{'Referer':'http://www.anluyg.net/'}})；；if(jx.indexOf('ldgplayer')!=-1){if(jx.split(\"ldgurl = \\'\")[1].split(\"\\'\")[0].indexOf('http')!=-1){jx.split(\"ldgurl = \\'\")[1].split(\"\\'\")[0]；；}else{'http:'+jx.split(\"ldgurl = \\'\")[1].split(\"\\'\")[0]；；}}else if(jx.indexOf('id=\\\"vod\\\"')!=-1){jx.match(/http.*?m3u8/g)[0]；；}else if(jx.indexOf('DPlayer')!=-1){jx.match(/http.*?m3u8/g)[0]；；}else{if(input.indexOf('http')!=-1){input}else{'http:'+input}}`;\n\nvar 标题 = 'body&&h1&&Text';\nvar 简介 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 线路列表 = 'body&&.nav&&a';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\nvar 调用断插 = 0;\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"","pages":"[]","proxy":"","icon":"http://res.wx.qq.com/a/wx_fed/assets/res/NTI4MWU5.ico"},{"last_chapter_rule":"js:\nrequire(config.模板);\n\nvar 选集列表 = 'body&&.videourl||.urlli';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"看一看🎬","author":"","version":0,"type":"video","url":"https://www.kyikan.cc/index.php?m=vod-list-id-fyclass-pg-fypage-order--by-fysort-class-0-year-fyyear-letter--area-fyarea-lang-.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"全部&大陆&香港&台湾&美国&韩国&日本&泰国&新加坡&马来西亚&印度&英国&法国&加拿大&&西班牙&俄罗斯&其它","area_url":"&大陆&香港&台湾&美国&韩国&日本&泰国&新加坡&马来西亚&印度&英国&法国&加拿大&&西班牙&俄罗斯&其它","sort_name":"","year_name":"全部&2022&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010&2009&2008&2007&2006&2005&2004&2003&2002&2001&2000","sort_url":"","year_url":"&2022&2021&2020&2019&2018&2017&2016&2015&2014&2013&2012&2011&2010&2009&2008&2007&2006&2005&2004&2003&2002&2001&2000","find_rule":"js:\nrequire(config.模板);\n\nvar 列表 = '.index-area||.index-tj&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.other&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:\nrequire(config.模板);\n\nvar 列表 = '.index-area||.index-tj&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.other||.bz&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.kyikan.cc/index.php?m=vod-search-pg-fypage-wd-**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\n\n\n\nvar 线路列表 = 'body&&.playfrom||.pfrom&&li';\nvar 选集列表 = 'body&&.videourl||.urlli';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.kyikan.cc/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"柒月🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://9day.cc/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://9day.cc/upload/mxprocms/20230924-1/9df0bb683fb900504313c592ed2f4fba.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"西屋🎬","author":"格格","version":2,"type":"video","url":"hiker://empty##https://xiwutv.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"30&20&40&45&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://xiwutv.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://xiwutv.com/upload/mxcms/20231022-1/409630560014c6d857cb54314b34c420.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"橙汁🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.orangek.cn/show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/detail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.orangek.cn/upload/A/ico.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"VS🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.ytshengde.com/sanyitp/1-fypage.html","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\nconst 大类定位 = '.nav-list'\nconst 拼接分类 = 'body&&.myui-screen__list'\nconst 小类定位 = 'body&&a:not(:matches(首|全|留|纪录片))'\n\n动态分类()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.myui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://www.ytshengde.com/sanyisc/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.ytshengde.com/template/vssanyi/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"圈圈🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.jqqzx.cc/vodshow/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"dianshiju&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.jqqzx.cc/vodsearch.html?wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.jqqzx.cc/mxtheme/images/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"猫视界🎬","author":"格格","version":0,"type":"video","url":"http://www.msjtv.com/vodshow/fyclass--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"http://www.msjtv.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://www.msjtv.com/mxtheme/images/logo_black.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"杂影🎬","author":"格格","version":0,"type":"video","url":"https://www.zaying.fun/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.zaying.fun/vodsearch/**-------------.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://s.lasi.fun/static/images/favicon/zy.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"在线之家🎬","author":"格格","version":0,"type":"video","url":"https://www.zxzjhd.com/list/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.zxzjhd.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-vodlist__head';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.zxzjhd.com/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"落枚🎬","author":"格格","version":0,"type":"video","url":"https://www.lggys.com/show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.lggys.com/search/-------------.html?wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.lggys.com/upload/mxprocms/20240604-1/30bbe454e658628a77db3e6740d4a82c.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"皮皮🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://www.pptv08.com/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.pptv08.com/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\n\nvar lazy = $('').lazyRule((MY_HOME) => {\n    try {\n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n        var url = html.url\n        if (html.encrypt == '1') {\n            url = unescape(url);\n        } else if (html.encrypt == '2') {\n            url = unescape(base64Decode(url));\n        }\n        if (/m3u8|mp4/.test(url)) {\n            return url\n        } else if (html.from == 'WZHD') {\n            eval(request(MY_HOME + '/static/js/playerconfig.js'));\n            var jx = MY_HOME + MacPlayerConfig.player_list[html.from].parse;\n            eval(request(jx + url, {\n                headers: {\n                    'Referer': MY_URL\n                }\n            }).match(/var config = {[\\s\\S]*?}/)[0])\n            return config.url\n        } else {\n            return 'video://' + input\n        }\n    } catch (e) {\n        return 'video://' + input\n    }\n},MY_HOME)\n\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.pptv08.com/mxtheme/images/favicon.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"8号🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##http://www.bahaoys.com/frim/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/search.php?page=fypage&searchword=**&searchtype=","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://www.bahaoys.com/statics/img/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"皮皮虾🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##http://www.ppxyes.com/s/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"1&2&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"http://www.ppxyes.com/vodsearch**/page/fypage.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://www.ppxys.vip/upload/mxprocms/20240615-1/c1a61eb851b0de9a105b9c5b162e62a9.png"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"旺旺🎬","author":"格格","version":0,"type":"video","url":"https://www.wwgz.cn/vod-type-id-fyAll-pg-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.resize_list';\nvar 标题 = '.sTit&&Text';\nvar 描述 = '';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.ulPicTxt&&li';\nvar 标题 = '.sTit&&Text';\nvar 描述 = '';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.wwgz.cn/vod-search-pg-fypage-wd-**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.numlistBox&&a';\nvar 选集列表 = 'body&&.numList';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'body&&Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.wwgz.cn/favicon.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"咖啡🎬","author":"格格","version":0,"type":"video","url":"https://cdnbeijin-aliyun-ys1.cfys.xyz/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"21&20&23&22&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://cdnbeijin-aliyun-ys1.cfys.xyz/upload/mxprocms/20240509-1/1085bc51d976e96bb20ce15390ad5463.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"祥祥🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##http://141.147.146.105/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"http://141.147.146.105/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://141.147.146.105/upload/site/20221016-1/dc1757620e9b936f28aa8fb834b1a128.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"爱看🎬","author":"格格","version":0,"type":"video","url":"https://ikan4k.com/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://ikan4k.com/template/mxone/mxstatic/picture/ikan4k_logo.png"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"唐人街🎬","author":"格格","version":0,"type":"video","url":"https://www.trjvod.com/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.play_source_tab&&a';\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.trjvod.com/upload/site/20240509-1/b0f062ef45bc665d456f168ad2de0146.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"糖豆🎬","author":"格格","version":0,"type":"video","url":"https://www.tdys.cc/show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"juji&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.tdys.cc/soso/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.tdys.cc/mxtheme/images/favicon.png"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"尘落","author":"格格","version":0,"type":"video","url":"https://v.wetv.wang/whole/fyAll_______0_addtime_fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.globalPicList&&li';\nvar 标题 = '.sTit&&Text';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.globalPicList&&li';\nvar 标题 = '.sTit&&Text';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://v.wetv.wang/?c=search&cl=**&sort=addtime&order=desc&page=fypage","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&#sec_subTab&&p';\nvar 选集列表 = 'body&&.list_name';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.chenluo.org/template/cl/wap/images/playBtn.png"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"爱家","author":"格格","version":0,"type":"video","url":"http://m.eajyy.com/List/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"18&17&48&20&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/Search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.play_source_tab&&a';\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://m.eajyy.com/template/ikan/img/tubiao.ico"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"北川🎬","author":"格格","version":0,"type":"video","url":"http://www.bcdy.xyz/vodshow/fyAll--------fypage---/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://www.bcdy.xyz/img/logo2.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"奈飞🎬","author":"格格","version":0,"type":"video","url":"https://www.naifei.in/vod/show/1--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"/vod/search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.naifei.in/mxtheme/images/favicon.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"可可兔🎬","author":"格格","version":0,"type":"video","url":"https://abc.qilin8.com/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://abc.qilin8.com/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://abc.qilin8.com/upload/site/20240604-1/e085c9a26eb678030a4f89080c499d56.jpg"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"骑士🎬","author":"格格","version":0,"type":"video","url":"https://www.74ev.com/show/fyclass--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"/qsyy_so/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":""},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"美帕🎬","author":"格格","version":0,"type":"video","url":"https://www.mp4br.com/dy/hdfyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"38&79&90&40&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.img-list&&li';\nvar 标题 = 'img&&alt';\nvar 描述 = 'body&&i&&Text';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.show-list&&li';\nvar 标题 = 'img&&alt';\nvar 描述 = 'body&&i&&Text';\nvar 图片 = 'img&&src';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://www.mp4br.com/sousuo/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar lazy=`@lazyRule=.embed-responsive&&script&&Html.js:eval(input);zanpiancms_player.url`;\n\nvar 线路列表 = 'body&&.down-title';\nvar 选集列表 = 'body&&.video_list';\nvar 选集标签 = 'body&&a';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://qqq.mp4pa.com/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"爱优🎬","author":"格格","version":20230927,"type":"video","url":"hiker://empty##https://iuys.cc/vodtype/1-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&3&4&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.myui-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"https://iuys.cc/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.nav&&a';\nvar 选集列表 = 'body&&.myui-content__list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://iuys.cc/template/mytheme/statics/image/20231015/dbcc6a6b0.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"全看🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://42c37e0b590eefa75c522370fc323f39.91qkw.cc/type/fyAll-fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://42c37e0b590eefa75c522370fc323f39.91qkw.cc/search/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":""},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"爱看","author":"格格","version":0,"type":"video","url":"https://www.aikanhd.vip/vodshow/2--------2---/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d=[];\nvar html = getResCode();\nvar list = pdfa(html, 'body&&.video-content-item');\n\nif (list != '') {\n\n    list.forEach(it => {\n        //log(pic_url)\n\n        d.push({\n            title: pdfh(it, '.video-name&&Text'),\n            desc: pdfh(it, '.video-title&&Text'),\n            // pic_url: pd(it, 图片)+ '@Referer=',\n            img: pd(it, '.lazyload&&data-original') + '@Referer=',\n\n            // img:  pd(it, 图片) ,\n\n            url: 'hiker://empty##' + pd(it, 'a&&href') + \"#gameTheme#\"\n        });\n    })\n}\nsetResult(d)","searchFind":"js:\nvar d = [];\nvar html = getResCode();\r\nvar list = pdfa(html, 'body&&item');\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'title,0&&Text'),\n        desc: pdfh(list[j], 'pubDate&&Text'),\n        img: pd(list[j], ''),\n        content: pdfh(list[j], 'description&&Text'),\n        url: pdfh(list[j], 'Text').match(/http.*\\d+\\//)[0] + \"#immersiveTheme#\"\n    });\n}\r\nsetResult(d);","search_url":"/rss.xml?wd=**","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:\nrequire(config.模板);\nlet parse={\n title:'p.data&&Text;p.data,2&&Text;p.data,1&&Text',//图片右侧的文字，可以是影片名，主演等\n img:'.lazyload&&data-original',//图片\n url:'.lazyload&&data-original',//可以是影片链接，或者图片也行\n desc:'.detail-sketch&&Text',//一般主演，地区，影片评分等描述\n tabs:'body&&.ewave-playlist-tab &&a:not(:matches(猜你喜欢|剧情介绍|剧情简介|影片评论|推荐专题|&nbsp;热播榜|剧情 热播榜|热播榜|热门|更新|最新))',//列表\n lists:'body&&.ewave-tab-content&&li',//列表\n tab_id:'',//线路id，可不填,\n};\nvar 动态最新章节=true;\nvar 倒序=false;\r\n二级(parse);","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"require('https://gitcode.net/qq_32394351/dr/-/raw/master/js/预处理.js');","pages":"[]","proxy":"","icon":""},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"桃子🎬","author":"格格","version":0,"type":"video","url":"https://ios.taozi007.com/show/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note&&Text';\nvar 图片 = '.lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 片源链接 = '/detail/'\n搜索验证()","search_url":"/index.php/ajax/suggest?mid=1&wd=**&limit=10","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.module-play-list-content';\nvar 选集标签 = '.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://ios.taozi007.com/upload/mxprocms/20240601-1/5d89849941a04db7d90d9755b7429e63.png"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"追影🎬","author":"格格","version":0,"type":"video","url":"http://svip.zhuiying.cyou/index.php/vod/type/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"21&20&22&23&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.hl-vod-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n一级()\n","searchFind":"js:require(config.模板);\n\nvar 列表 = '.hl-one-list&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.remarks&&Text';\nvar 图片 = '.hl-lazy&&data-original';\nvar 链接 = 'a&&href';\n搜索()\n","search_url":"http://svip.zhuiying.cyou/index.php/vod/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.hl-tabs&&a';\nvar 选集列表 = 'body&&.hl-plays-list';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://svip.zhuiying.cyou/upload/site/20240612-1/733b84141cf3b80c569f0d7e8b01da2c.jpeg"},{"firstHeader":"class","last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签= '.sort-item||.module-play-list-content&&a';\n章节()","pageList":[],"title":"茄子🎬","author":"格格","version":1,"type":"video","url":"hiker://empty##https://qiezi.fun/vodshow/fyAll--------fypage---.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"影视","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-item';\nvar 标题 = 'a&&title';\nvar 描述 = '.module-item-note||.module-item-text&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.module-list||.module-items&&.module-search-item||.module-item';\nvar 标题 = 'img&&alt';\nvar 描述 = '.module-item-note||.video-serial&&Text';\nvar 图片 = '.lazy&&data-src||data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"hiker://empty##https://qiezi.fun/vodsearch/**----------fypage---.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.module-tab-content||.module-tab-items-box&&span';\nvar 选集列表 = 'body&&.sort-item||.module-play-list-content';\nvar 选集标签 = '.sort-item||.module-play-list-content&&a';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://telegraph-image-2io.pages.dev/file/e10f1b4b7a647112b956d.png"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"木鱼🎬","author":"格格","version":0,"type":"video","url":"hiker://empty##https://m.muyy.cc/film/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"dianshiju&dianying&dongman&zongyi&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"https://m.muyy.cc/search/page/fypage/wd/**.html","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.nav&&a';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://m.muyy.cc/template/default/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"9D🎬","author":"格格","version":0,"type":"video","url":"https://www.9ddys.com/class/fyAll-fypage/","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"https://www.9ddys.com/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\n\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"剧集屋🎬","author":"格格","version":0,"type":"video","url":"http://jjwu.org/index.php/vod/show/id/fyAll/page/fypage.html","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = 'body&&.stui-vodlist__thumb';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic-text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = 'body&&.stui-pannel:has(.stui-content__playlist)';\nvar 选集列表 = 'body&&.stui-content__playlist';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'h3&&Text';\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://jjwu.org/statics/img/favicon.ico"},{"last_chapter_rule":"js:require(config.模板);\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签= 'ul&&li';\n章节()","pageList":[],"title":"Lan🎬","author":"格格","version":0,"type":"video","url":"http://lan6.net/list/fyAll/-_-_-_-_-_fypage","col_type":"movie_3","class_name":"电视剧&电影&动漫&综艺","class_url":"2&1&4&3&","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:require(config.模板);\n\nvar 列表 = '.shoutu-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n一级()","searchFind":"js:require(config.模板);\n\nvar 列表 = '.shoutu-vodlist&&li';\nvar 标题 = 'a&&title';\nvar 描述 = '.pic_text&&Text';\nvar 图片 = '.lazyload&&data-original';\nvar 链接 = 'a&&href';\n搜索()","search_url":"","group":"⑤影视🎬","detail_col_type":"movie_1","detail_find_rule":"js:require(config.模板);\n\nvar 线路列表 = '.play_source_tab&&a';\nvar 选集列表 = 'body&&.play_list_box';\nvar 选集标签 = 'ul&&li';\nvar 线路标签 = 'Text';\n\n二级()","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    模板: 'hiker://files/rules/模板/规则模板.js',\n});","pages":"[]","proxy":"","icon":"http://lan6.net/img/favicon.ico"}]